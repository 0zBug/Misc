return {
	time = [==[The amount of time the tween takes in seconds.]==],
	guibase = [==[GuiBase is an abstract class which most graphical user interface objects inherit from.]==],
	autocolorcharacters = [==[Deprecated and no longer functional. Historically set whether or not Player character models on a team would be colored to Team.TeamColor.]==],
	othermechanismsanchored = [==[Only the part and any parts directly jointed to it via joints/Constraint will be moved during resolution, but they will collide with other objects in the workspace.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	notprocessedyet = [==[The purchase request has been sent but not yet processed.]==],
	healthdisplaydistance = [==[Sets the distance at which this player will see other Humanoid’s health bars. If set to 0, the health bars will not be displayed.]==],
	maxangle = [==[The max angle, in degrees, of the constraint’s limiting cone]==],
	timeposition = [==[Returns the position in time in seconds that an AnimationTrack is through playing its source animation. Can be set to make the track jump to a specific moment in the animation.]==],
	actor = [==[This is the Actor Class]==],
	rep = [==[Returns a string that is the concatenation of n copies of the string s.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	uimessageerror = [==[The message error.]==],
	meshcontentprovider = [==[An internal Roblox service that is responsible for fetching, parsing and caching meshes. This service cannot be used by developers.]==],
	disabled = [==[Determines whether a BaseScript will run or not.]==],
	medium = [==[0.5 seconds per cycle]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	color3 = [==[The DataType.Color3 tint of the Decal.]==],
	getvaluestring = [==[Returns the StatsItem's value as a formatted string.]==],
	blue = [==[Returns the BrickColor Bright Blue.]==],
	magnitude = [==[The length of the vector.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	walkanimation = [==[When this description is Humanoid:ApplyDescription to a Humanoid, this determines the Animation.AnimationId to play when its Humanoid:GetState is enum.HumanoidStateType at a low speed]==],
	octave = [==[The percentage to shift the original pitch.]==],
	itemchanged = [==[Fires when a property of any object in the DataModel is changed]==],
	image = [==[The image content displayed by the UI element.]==],
	getalliesasync = [==[Returns a StandardPages object including information on all of the specified group's allies.]==],
	themechanged = [==[Event called when Studio's StudioTheme changes]==],
	skateboardplatform = [==[A SkateboardPlatform can be used to create a skateboard. When characters get on a skateboard, they are stuck to it until they press the escape key. Until then, the character uses skateboard animations and travels faster than a walking character.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	righthand = [==[The CFrame of the user's right hand.]==],
	script = [==[An object that contains and runs Lua code on the server]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	low = [==[Low priority]==],
	maxpromptsvisible = [==[The maximum number of ProximityPrompt that will be shown to the user]==],
	color = [==[The Color3 associated with the BrickColor.]==],
	path = [==[Stores the result of paths created by PathfindingService:CreatePath]==],
	removeasync = [==[Removes an item or items previously read from the queue.]==],
	rock = [==[Applies to Terrain only.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	vector2 = [==[A 2D value representing a direction and magnitude.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	userhasbadgeasync = [==[Checks whether a player has the badge given the Player.UserId and the badge ID.]==],
	ismodaldialog = [==[Indicates whether a modal dialog is visible.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	shadow = [==[The color of shadows rendered under floating items like dropdowns]==],
	bodythrust = [==[Applies a constant force to an object at a specific point]==],
	codepoint = [==[Returns the codepoints (as integers) from all codepoints in a given string.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	cframe = [==[A datatype that represents both a 3D position and orientation.]==],
	selectionlasso = [==[Abstract class for SelectionPartLasso and SelectionPartLasso.]==],
	textwrapped = [==[Determines if text wraps to multiple lines within the GuiObject element space, truncating excess text]==],
	headsupdisplay = [==[If true, a fancy speed bar will be displayed speed on screen that tells you what speed the Vehicle is moving at.]==],
	value = [==[Used to hold an <a href="/articles/Integers" title="Integer">Integer</a>.]==],
	spawnlocation = [==[SpawnLocation, or "spawns" determine where a Player respawns when they die. They can be configured to allow only certain players to use each spawn, using Team. They also control how ForceField are set up for newly-spawned players.]==],
	getpivot = [==[Gets the pivot of a PVInstance.]==],
	getmodelcframe = [==[This value historically returned the CFrame of a central position in the model. It has been deprecated as it did not provide reliable results.]==],
	datamodelmesh = [==[The DataModelMesh is an abstract class from which mesh classes descend.]==],
	rotationtype = [==[Controls how the client's character is rotated.]==],
	status = [==[The success of the generated Path.]==],
	nextunitvector = [==[Returns a unit vector with a pseudorandom direction.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	extreme = [==[No throttling, absolutely no exceptions.]==],
	numbervalue = [==[A container object for a single double-precision floating point number.]==],
	color = [==[Determines the color of the sparkle particles.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	place = [==[The asset is a place.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	value = [==[Used to hold a <a href="/api-reference/datatype/CFrame" title="CFrame">CFrame</a> value.]==],
	expression = [==[The expression set for the DebuggerWatch.]==],
	brick = [==[The mesh is a brick (just like the shape of a default BasePart)]==],
	respawnlocation = [==[If set, the player will respawn at the given SpawnLocation]==],
	editingdisabled = [==[Toggles whether this property can be edited from the Properties window.]==],
	action = [==[The action to be performed at this waypoint.]==],
	y = [==[The y-coordinate of the Vector2.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	shirtgraphic = [==[Applies a texture to the front surface of a character's torso, used to display t-shirts.]==],
	zvector = [==[Equivalent to the third/bottom row of the rotation matrix.]==],
	addselectiontuple = [==[<strong>AddSelectionTuple</strong> works similarly to GuiService:AddSelectionParent, but you can give it a tuple of GuiObject that you want to be contained in the group.
Beware that the second argument is <em>not</em> a table, but rather the first of several GuiObject in the tuple. To pass the contents of a table, use unpack/table.unpack:
<pre><code class="language-lua">local frame = script.Parent
-- Passing various GuiObject individually
GuiService:AddSelectionTuple(&quot;InventoryButtons&quot;, frame.Sort, frame.Trash, frame.Drop)
-- Unpacking a table of GuiObject (unpack/table.unpack are equivalent)
local inventoryButtons = { frame.Sort, frame.Trash, frame.Drop }
GuiService:AddSelectionTuple(&quot;InventoryButtons&quot;, unpack(inventoryButtons))
</pre>]==],
	round = [==[The corners are rounded  (see image above)]==],
	ended = [==[Fires when the Sound has completed playback and stopped.]==],
	importoriginworld = [==[Describes where the origin (in world space) was while authoring the cage mesh in an asset creation tool.]==],
	listdatastoresasync = [==[Returns a DataStoreListingPages object for enumerating through all of the experience's data stores.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	tween = [==[Tweens are used to interpolate the properties of instances. The Tween object itself controls the playback of the interpolation. Creating and configuring tweens is done with the TweenService:Create function. This is the only way to create tweens. Instance.new cannot be used for this particular object.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	deactivated = [==[Fired when the left mouse button is released.]==],
	secondarycolor = [==[Determines the color of the of the secondary (inner) flame particles]==],
	default = [==[Default action. Used for an undefined Action]==],
	mousemovement = [==[Movement of the mouse. Fires changed events each time the player's cursor position changes and when the move enters/leaves the game window.]==],
	distancelowerlimit = [==[Determines the distance in studs that a BillboardGui will stop scaling larger in size at]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	datacomplexitylimit = [==[The maximum amount of data that can be stored to a Player cache per place]==],
	smoke = [==[A particle emitter with the visual aesthetic of smoke]==],
	areworldcoordsshown = [==[An ancient property that hasn't worked correctly since late 2007.
It's supposed to render a large XYZ axis in the center of the world, but the axis rendering component doesn't work correctly.]==],
	transformedworldcframe = [==[Describes the combined Attachment.CFrame offset of the bone and the current animation offset in world space.]==],
	textbounds = [==[The pixel size of a UI element's text.]==],
	friendrequestsent = [==[At least one of two players has sent a friend request to the other player.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	active = [==[Determines if the joint is currently active in the world]==],
	avatareditorservice = [==[A service to support developer Avatar Editors.]==],
	selectable = [==[Determine whether the GuiObject can be selected by a gamepad]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	scaletype = [==[Determines how an image will scale if displayed in a UI element whose size differs from the source image.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	characterjump = [==[The player jumped.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	black = [==[Returns the BrickColor Black.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	getrealphysicsfps = [==[Returns the number of frames per second that physics is currently being simulated at.]==],
	preferredparent = [==[Sets the class that this class would prefer parenting to.]==],
	isgamepadbuttondown = [==[Determines whether a particular button is pressed on a particular gamepad]==],
	region3int16 = [==[A Region3 stored as two boundaries as opposed to position and size components.]==],
	hairaccessory = [==[A comma-separated list of asset IDs that will be added as Accessory to a Humanoid rig when Humanoid:ApplyDescription, usually those attached to its head resembling hair]==],
	completed = [==[The tween completed successfully.]==],
	characterbackward = [==[The player moved backward.]==],
	version = [==[The current version of the CoreGui. Everytime the CoreGui is majorly changed, this number is increased.]==],
	lowertorso = [==[Reference to a Humanoid's LowerTorso.]==],
	clicktomove = [==[The player can right click in the game world and the character will move there. Player can also control character with mouse and keyboard.]==],
	vector3int16 = [==[A Vector3 with signed 16-bit integers for components.]==],
	autoselectguienabled = [==[If the select button on a gamepad will automatically set a GUI as the selected object when the Select button is pressed. Turning this off will mean that Gui navigation will still work if GuiNavigationEnabled is enabled but you will have to set SelectedObject manually to start Gui navigation.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	decal = [==[The Decal object is an object which applies an image to a face of a BasePart.]==],
	didloop = [==[Fires whenever the VideoFrame.Video loops]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	getkeyatindex = [==[Returns a copy of a key at a given index.]==],
	getkeyframesequencebyid = [==[Returns a KeyframeSequence from the supplied assetId. Can optionally cache to reduce unnecessary loading freezes.]==],
	priority = [==[Determines the order the effect will be applied in relation to other effects.]==],
	limitsenabled = [==[Sets whether the BallSocketConstraint sets a limit on rotation based on BallSocketConstraint.UpperAngle.]==],
	backsurface = [==[Determines the type of surface for the Back face of a part (+Z direction)]==],
	right = [==[Alignment starts at the right side of the GUI object.]==],
	imagelabel = [==[A 2D user interface element that displays a single non-interactive image]==],
	allgenres = [==[All gear genres are allowed.]==],
	iswindows = [==[Indicates whether the user is playing on a computer running Windows.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	guiinputusercframe = [==[Describes what UserCFrame is responsible for input in VR.]==],
	gamepadservice = [==[The GamepadService is internally responsible for handling inputs from various controllers (such as an Xbox One controller).]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	proximitypromptservice = [==[Allows developers to interact with ProximityPrompt objects in a global way]==],
	keyframereached = [==[Fires every time playback of an AnimationTrack reaches a Keyframe that does not have the default name - "Keyframe"]==],
	watchadded = [==[Fired when an expression watch is added to this script debugger.]==],
	require = [==[Prints whether a condition is true along with description text.]==],
	topbottom = [==[Controls whether the feature is shifted to the top, center, or bottom on the surface.]==],
	randomseed = [==[Sets x as the seed for the pseudo-random generator.]==],
	color = [==[Determines the color blended with the parent GuiObject along the length of the gradient]==],
	top = [==[Whether the top face is included.]==],
	text = [==[Determines the string rendered by the UI element.]==],
	xaxis = [==[A Vector2 with a value of 1 on the X axis.]==],
	androidtv = [==[The client is running on an Android TV.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	team = [==[A team message only players in the same team can receive.]==],
	onteleport = [==[Fired when the TeleportState of a player changes.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	isloaded = [==[Indicates when the VideoFrame.Video has loaded from Roblox servers and is ready to play.]==],
	rendercsgtrianglesdebug = [==[When set to true, a wireframe of polygons will be shown on all PartOperation objects.]==],
	viewsizey = [==[Describes the height of the game window in pixels]==],
	position = [==[The position the constraint should move its Constraint.Attachment0 to when using the Enum.PositionAlignmentMode mode.]==],
	playerremoving = [==[Fires when a player is about to leave the game.]==],
	value = [==[The base value of the keypoint.]==],
	currentpage = [==[The page that is either currently being displayed or is the target of the current animation.]==],
	maxtorque = [==[Magnitude of the maximum torque the constraint can apply]==],
	castshadow = [==[Determines whether or not a part casts a shadow.]==],
	activescript = [==[Reflects the LuaSourceContainer currently being edited (if any)]==],
	stepover = [==[Performs a <a href="/articles/Lua-debugger" class="mw-redirect" title="Lua Debugger">step over</a> operation on the Lua Debugger.]==],
	dragbegin = [==[Fired when a player begins dragging the object]==],
	textfits = [==[Enables when rendered text content does not fit within the UI element's space.]==],
	getenums = [==[Returns an array of all datatype.Enums.]==],
	memorystoreservice = [==[Exposes methods to access specific primitives within MemoryStore.]==],
	scalewithparentsize = [==[Scales the element to the largest size it can fit inside the parent element’s maximum size while maintaining the aspect ratio]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	mouseup = [==[Stops the current dragging action (made by <a href="/api-reference/function/Dragger/MouseDown" class="mw-redirect" title="MouseDown">MouseDown</a>)]==],
	maxforce = [==[Determines the limit on how much force that may be applied to each axis]==],
	visible = [==[Toggles the visibility of this Constraint.]==],
	button2down = [==[Fires when the right mouse button is pressed.]==],
	charactermaxslopeangle = [==[Determines the starting value of Humanoid.MaxSlopeAngle for Player.Character]==],
	getlistener = [==[GetListener returns SoundServices current listener type and what is set as listener.]==],
	reverses = [==[Whether or not the tween does the reverse tween once the initial tween completes.]==],
	bottomleft = [==[Grid starts in bottom left corner.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	string = [==[Provides generic functions for string manipulation such as finding and extracting substrings and matching patterns.]==],
	classic = [==[Third-person camera which can be zoomed into first-person.]==],
	zero = [==[A Vector3 with a magnitude of zero.]==],
	setcells = [==[Sets the occupancy and material of all terrain voxels in a specific region.]==],
	humanoid = [==[The Humanoid that the Lasso belongs to, and will come from.]==],
	healthdisplaytype = [==[Controls when the Humanoid health bar is allowed to be displayed.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	getrangeasync = [==[Retrieves items within a sorted range of keys.]==],
	topparamb = [==[Determines the second parameter for the SurfaceType on the Top face of a part (+Y direction)]==],
	snap = [==[Holds two parts together and functions identically to Weld]==],
	axis = [==[The direction of the Attachment's X-Axis, represented as a unit Vector3.]==],
	doublesided = [==[Render both faces of polygons in the mesh]==],
	enabled = [==[Toggles the effect on and off.]==],
	forcefield = [==[Applies to BasePart only; see <a href="/articles/force-field-material">details</a>.]==],
	easingstyle = [==[The style in which the tween executes.]==],
	gettranslator = [==[Returns a Translator for keys in this LocalizationTable, in the specified language.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	characterappearanceid = [==[Determines the user ID of the account whose character appearance is used for a player's Player.Character]==],
	usercframechanged = [==[Fired when a UserCFrame is changed.]==],
	requestasync = [==[Sends an HTTP request using any <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods">HTTP method</a> given a dictionary of information]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	ribbontab = [==[The color of a tab on the ribbon menu (e.g. Home, Model, Test)]==],
	ps3 = [==[The client is running on a PS3 (console).]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	anchored = [==[Determines whether a part is immovable by physics]==],
	searchcatalog = [==[Returns a CatalogPages object containing the result of the given search]==],
	lefttangent = [==[The tangent to the left of this key.]==],
	nocollisions = [==[Only the part and any parts directly joined to it via joints/Constraint be be involved in the resolution, everything else in the workspace will be treated as though it doesn't exist.]==],
	lookvector = [==[The forward-direction component of the CFrame's orientation.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	includecontactedmechanisms = [==[The part, any parts directly joined to it via joints/Constraint, and any parts which it comes into contact with during the solve will be moved during the resolution. That is, the moved parts will be allowed to "push" other unanchored parts in the workspace out of the way in order to get to the target position.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	awardpoints = [==[Attempts to award the user with the specified Player.UserId the specified number of points]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	getmousebuttonspressed = [==[Returns an array of InputObject corresponding with the  mouse buttons currently being held down]==],
	image = [==[The asset is an image.]==],
	firstpersontransition = [==[Fires when the local user’s Camera switches in and out of first person mode]==],
	getcurrentlocaltoolicon = [==[Return the BackpackItem.TextureId of a Tool currently Tool.Equipped by the Player]==],
	max = [==[Returns the maximum value among the numbers passed to the function.]==],
	time = [==[The time position of this key.]==],
	creepster = [==[<style>@import url('https://fonts.googleapis.com/css2?family=Creepster');</style>
<p class="text-nowrap" style={{fontFamily: 'Creepster', fontSize: '1.75em', margin: '5px 0px'}}>The quick brown fox jumps over the lazy dog.<br />0123456789 , : ! ? # % & ( ) - + =]==],
	addaction = [==[Adds the given action to the menu]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	shape = [==[Sets the type of shape the object has.]==],
	mousebutton2click = [==[Fired when the mouse has fully right clicked the GUI button]==],
	restitution = [==[How <em>elastic</em> an Attachment connected by a RopeConstraint will be when reaching the end of the rope RopeConstraint.Length. The value of this property is constrained between 0 and 1.]==],
	lastforce = [==[Returns the last force in the object.]==],
	foreachi = [==[Similar to table.foreach() except index-value pairs are passed instead of key-value pairs.]==],
	tix = [==[Use Tickets.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	stiffness = [==[Torsional stiffness of the spring]==],
	numberofplayers = [==[The number of players expected in this test, if any.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	restitution = [==[The restitution coefficient of the cone constraint]==],
	prompthidden = [==[Triggers when the prompt becomes hidden]==],
	orbital = [==[The camera has a fixed Y position, but can be rotated around the player.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	resume = [==[Starts or continues the execution of coroutine co.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	bor = [==[Returns the bitwise or of its operands.]==],
	inspectplayerfromhumanoiddescription = [==[Allows a developer to bring up the Inspect menu showing the assets listed in this HumanoidDescription object]==],
	location = [==[Determines the relative position where the BodyThrust.Force is exerted]==],
	onredo = [==[Fired when the user reverses the undo command. Waypoint describes the type action that has been redone.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	bindactionatpriority = [==[Behaves like ContextActionService:BindAction but also allows a priority to be assigned to the bound action for overlapping input types (higher before lower)]==],
	minwidth = [==[The minimum pixel width of the PluginGui.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	weightcurrent = [==[WeightCurrent is a read-only property that gives the current weight of the AnimationTrack. It has a default value of 1.]==],
	getconnectedgamepads = [==[Returns an array of Enum.UserInputType gamepads currently connected]==],
	fromscale = [==[Returns a UDim2 with the given scale components and no offsets.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	repeatcount = [==[The number of times the tween repeats after tweening once.]==],
	freefalling = [==[Fires when the Humanoid enters or leaves the <em>Freefall</em> Enum.HumanoidStateType]==],
	y = [==[Whether the Y axis is enabled.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	hataccessory = [==[A comma-separated list of asset IDs that will be added as Accessory to a Humanoid rig when Humanoid:ApplyDescription, usually those attached to its head]==],
	dismount = [==[The Dismount button]==],
	promptshown = [==[Triggers when the ProximityPrompt becomes visible]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	trackdatatypes = [==[When set to true, the replicator stats will sample data about packets that are being sent.]==],
	pcall = [==[Runs the provided function and catches any error it throws, returning the function's success and its results.]==],
	maxtorque = [==[Determines the limit of torque that may be exerted on each world axis]==],
	toeuleranglesyxz = [==[Returns approximate angles that could be used to generate the CFrame, if angles were applied in Z, X, Y order.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	requestnavigation = [==[Requests navigation to the specified DataType.CFrame, using the specified Enum.UserCFrame as the origin for the visualizer parabola.]==],
	lerp = [==[Returns a Vector3 linearly interpolated between this Vector3 and the given goal by the given alpha.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	time = [==[The relative time at which the keypoint is positioned.]==],
	debuggerremoved = [==[Fired when a registered <a href="/api-reference/class/ScriptDebugger" class="mw-redirect" title="ScriptDebugger">ScriptDebugger</a> has been discontinued.]==],
	offset = [==[The absolute offset component of the UDim.]==],
	coasting = [==[Skateboard is coasting (not actively speeding up / being pushed).]==],
	primarypart = [==[Points to the primary part of the Model.]==],
	maxhealth = [==[The maximum value of a Humanoid Humanoid.Health.]==],
	clicktomove = [==[Change the movement controller to click to move.]==],
	gettingup = [==[The Humanoid is getting back on their feet after ragdolling.]==],
	addmenu = [==[Adds the given menu as a separator]==],
	looped = [==[This sets whether or not the Sound repeats once it has finished when it is playing.]==],
	thickness = [==[The visualized thickness of the RopeConstraint.]==],
	verticalalignment = [==[Determines the vertical alignment of UI elements within the parent element.]==],
	initialenabledshouldoverriderestore = [==[If true, will override any saved enabled state with the InitialEnabled value.]==],
	mousebutton2up = [==[Fired when the right mouse button has been released on a GUI Object]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	changed = [==[.Fired whenever the Value of the IntConstrainedValue is changed.]==],
	delta = [==[A Vector3 describing the Delta between mouse/joystick movements]==],
	reactionforceenabled = [==[If true the constraint applies force on both Attachments to achieve the goal.]==],
	gamepadinputenabled = [==[Controls the overrides of NextSelection{Up, Down, Left, Right}. Defaults to true.]==],
	floorwire = [==[A FloorWire attempts to make a wire from two of its properties: FloorWire.From and FloorWire.From, which both need to be set to a BasePart.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	simulationradius = [==[The simulation radius of a Player's Player.Character.]==],
	sports = [==[The game's genre is set to Sports.]==],
	loadassetversion = [==[Returns a model inserted into InsertService containing the asset with the given assetVersionId.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	devicegravitychanged = [==[Fired when the force of gravity changes on a device that has an enabled accelerometer - such as a mobile device]==],
	localtoolunequipped = [==[Fires when the current player unequips a <a href="/api-reference/class/Tool" class="mw-redirect" title="Tool">Tool</a>.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	coils = [==[The number of coils visualized for the constraint]==],
	acquire = [==[Indicates the acquisition of an in game resource. For example, a player acquires virtual currency by completing a specific in game task]==],
	frontparama = [==[Determines the first parameter for the SurfaceType on the Front face of a part (-Z direction)]==],
	left = [==[Whether the left face is included.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	mousedrag = [==[Fired when the mouse moves while the MouseButton1Down event has fired, but the left mouse button has not been released yet.]==],
	active = [==[Indicates if the constraint is currently active in the world]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	interpolate = [==[Tweens the Camera in a linear fashion towards a new Camera.CFrame and Camera.Focus over a given duration]==],
	typekey = [==[Simulates the user typing a key.]==],
	getcollisiongroupname = [==[Returns the name of the group with the corresponding id.]==],
	back = [==[Tween movement backs into or out of place (See animation).]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	getloghistory = [==[Returns a table of tables, each of which corresponds to something which has been displayed in the output]==],
	depthscale = [==[Determines by what factor the depth (back-to-front distance) of a Humanoid rig is scaled; when Humanoid:ApplyDescription, maps to the "DepthScale" NumberValue within the Humanoid]==],
	inprogress = [==[The teleport is currently in progress. The player usually disconnects and teleports to the destination after this.]==],
	addasync = [==[Adds an item to the queue.]==],
	marble = [==[Applies to BasePart only.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	shirt = [==[Determines the Shirt.ShirtTemplate used by a Shirt when Humanoid:ApplyDescription]==],
	right = [==[Right hand touchpad.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	equippedemoteschanged = [==[Fires when the equipped emotes are HumanoidDescription:SetEquippedEmotes on this description]==],
	respectfilteringenabled = [==[Sets whether Sound playback from a client will replicate to the server.]==],
	targetpoint = [==[Describes the 3D position where the Player controlling the Humanoid last clicked in the world while using a Tool]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	unknown = [==[Unknown R15 Humanoid body part!]==],
	anchorpoint = [==[Determines the origin point of a GuiObject, relative to its absolute size]==],
	columnmajor = [==[The direct siblings are considered columns.]==],
	wedge = [==[The mesh is a wedge.]==],
	dot = [==[Returns a scalar dot product of the two vectors.]==],
	meshid = [==[Used to load a mesh file, and apply it to the given BodyPart.]==],
	setemotes = [==[Sets all of the emotes on this description]==],
	getinventory = [==[Returns an InventoryPages object with information about owned items in the users inventory with the given AvatarAssetTypes]==],
	setlegacymaxitems = [==[Controls the behavior of Debris.MaxItems]==],
	gamenotfound = [==[The game that this player attempted to teleport to could not be found.]==],
	promptforexistingassetid = [==[Opens a window in Roblox Studio, which prompts the user to select an asset based on the <i>assetType</i> specified. Returns what assetId was selected, or -1 if the window was closed.]==],
	failstartnotempty = [==[Failed to compute path; the starting point is not empty.]==],
	bit32 = [==[A library of functions to perform bitwise operations.]==],
	isbestfriendswith = [==[Returns whether a player is friends with the specified user]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	nocollisionconstraint = [==[An instance used to prevent collisions between two specific parts]==],
	physics = [==[The Humanoid doesn't apply any force on its own. (Unending PlatformStand) <em>Has to be unset manually using Humanoid.ChangeState.</em>]==],
	onclientinvoke = [==[Called when the client is invoked by RemoteFunction:InvokeClient.]==],
	getenemiesasync = [==[Returns a StandardPages object including information on all of the specified group's enemies.]==],
	asset = [==[Asset format type - the product is an asset.]==],
	hipheight = [==[Determines the distance off the ground the Humanoid.RootPart should be.]==],
	allowedgames = [==[Item is purchasable in the Avatar Shop and experiences owned by the item creator.]==],
	startergui = [==[A container for LayerCollector to be copied into the PlayerGui of Player. Also provides a range of functions for interacting with the CoreGui]==],
	fromhsv = [==[Returns a Color3 from the given hue, saturation, and value components.]==],
	setroll = [==[Sets the current rotation applied around the Camera Z-axis]==],
	getrotationattime = [==[Samples the EulerRotationCurve at a given time and returns the corresponding rotation. Empty Euler angles channels are interpreted as zero.]==],
	face = [==[Sets the side of the parent that the SpotLight comes from.]==],
	reflectionmetadatayieldfunctions = [==[Acts as a Folder containing information about yielding functions for a ReflectionMetadataClass, and should be parented to it.
ReflectionMetadataMembers that are parented to this object will be perceived as yielding functions under the class this is parented to.]==],
	studiolocaleid = [==[The locale currently in-use by Studio, e.g. en_US.]==],
	readasync = [==[Reads one or more items from the queue.]==],
	cansendgameinviteasync = [==[Indicates whether the given Player can invite other players]==],
	lightinfluence = [==[Controls how much the BillboardGui is influenced by the lighting in the game world.]==],
	createdtime = [==[Indicates when the version was created in milliseconds since epoch.]==],
	version = [==[Returns the current version of Roblox as a string, which includes the generation, version, patch and commit.]==],
	size = [==[Sets the size of the BillboardGui as it'll appear in the Roblox "world".]==],
	speed = [==[The Speed of an AnimationTrack is a read only property that gives the current playback speed of the AnimationTrack. This has a default value of 1. When speed is equal to 1, the amount of time an animation takes to complete is equal to AnimationTrack.Length (in seconds).]==],
	center = [==[Center of the grid.]==],
	large = [==[Large motor.]==],
	capturecontroller = [==[Attempts to gain priority over the hardware controller's input, in favor of the VirtualUser's simulated input.]==],
	getlatestassetversionasync = [==[Returns the latest AssetVersionId of an asset for assets created by the place creator.
Can be used in combination with <a href="/api-reference/function/InsertService/LoadAssetVersion" class="mw-redirect" title="LoadAssetVersion">LoadAssetVersion</a> to load the latest version of a model, even if it gets updated while the game is running.
]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	teleportinitfailed = [==[Fires when a teleport fails to start, leaving the player in their current server.]==],
	getuserids = [==[An array of Player.UserId tagged with a key.]==],
	deactivate = [==[Deactivates the plugin]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	noaccess = [==[The current user or group roleset doesn't have access.]==],
	connected = [==[The client is connected.]==],
	clusterpacketcache = [==[An internal service meant to cache cluster packets.]==],
	vector2int16 = [==[A Vector2 with signed 16-bit integers for components.]==],
	attachmentforward = [==[Sets the offset position of the object on the Player.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	firecustomevent = [==[Fires a custom event with a custom event name and data]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	charactermesh = [==[Modifies the appearance of an R6 body part]==],
	rightlipcornerdown = [==[Lowers the corners of the mouth downwards in a frown]==],
	parkinglot = [==[Sound reverb is changed to sound like the player is in a parking lot.]==],
	nocraters = [==[Explosion does not generate craters.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	custom = [==[Default mode used by Roblox Core Scripts.]==],
	textlabel = [==[A 2D user interface element that displays non-interactive text]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	cameramode = [==[Changes the camera's mode to either first or third person.]==],
	guibutton = [==[An abstract class for interactive 2D user interface elements]==],
	tilesize = [==[Sets the tiling size of the ImageLabel.]==],
	setoutgoingkbpslimit = [==[Sets the maximum outgoing bandwidth that Roblox can use.]==],
	attachment0 = [==[The Attachment the Beam originates from.]==],
	mousebutton1click = [==[Fired when the mouse has fully left clicked the GUI button]==],
	target = [==[The object in 3D space the Mouse is pointing to]==],
	none = [==[Unusable placeholder in case an unknown state gets triggered internally.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	isdescendantof = [==[Returns true if an Instance is a descendant of the given ancestor.]==],
	equipped = [==[Fired when the tool is equipped]==],
	zindexbehavior = [==[Changes how ZIndex behaves on all descendants of the LayerCollector.]==],
	touchended = [==[Fired when a part stops touching another part.]==],
	force = [==[Determines the amount of force applied on each axis]==],
	eyeslookleft = [==[Moves gaze left]==],
	guiservice = [==[The GuiService is a service which currently allows developers to control what GuiObject is currently being selected by the gamepad navigator. It also allows clients to check if Roblox's main menu is currently open. 
This service has a lot of hidden members, which are mainly used internally by Roblox's CoreScript.]==],
	setchatstyle = [==[Sets whether BubbleChat and ClassicChat are being used, and tells TeamChat and Chat what to do.]==],
	setuimessage = [==[Sets the GuiService's Ui message.]==],
	scifi = [==[<img src="/assets/blt0f0196778d82c711/Font-Face-Sample-SciFi.png" class="img-fluid half-sized" />]==],
	new = [==[Returns a new pseudorandom generator using the given seed.]==],
	unbindbutton = [==[Removes the bind on button.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	getsortedasync = [==[Returns a DataStorePages object.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	studiomodechanged = [==[Fired when the user's client switches between studio mode and in-game mode.
This gets fired periodically in Roblox Studio when a session starts.
]==],
	message = [==[Fills the entire screen with a semi-transparent grey background, with centered text in the middle of the screen. With the introduction of Roblox's GUI features it has been deprecated and TextLabels should be used instead for new work.]==],
	max = [==[The coordinates of the bottom-right corner.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	issmooth = [==[The state of this property shows whether or not this TerrainRegion contains <em>smooth terrain</em>.]==],
	thumbpad = [==[Change the movement controller to the thumbpad.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	sizerelativeoffset = [==[The positional offset of the adornment based on the adornee’s  BasePart.Size.]==],
	scale = [==[The Scale of a mesh determines the size of the mesh relative to its original dimensions.]==],
	promptsetfavoritecompleted = [==[Prompts the LocalPlayer to favorite or unfavorite the given asset or bundle]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	bundletype = [==[An array containing enum.BundleType values to filter the search by.]==],
	part0 = [==[The second BasePart that the constraint connects]==],
	imagerectoffset = [==[The offset in pixels of the sub-area of an image to be displayed]==],
	min = [==[The lower bound of the Region3int16.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	ray = [==[A line with a starting point that casts infinitely in a specific direction.]==],
	udim2 = [==[A two-dimensional value where each dimension is composed of a relative scale and an absolute offset.]==],
	chatted = [==[Fires when Chat:Chat is called.]==],
	secondaryaxis = [==[The direction of the goal's Y-Axis, represented as a unit Vector3.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	linearresponsiveness = [==[Specifies the sharpness of the linear servo motor in reaching the SlidingBallConstraint.TargetPosition.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	group = [==[The place is owned by a group]==],
	goodbyechoiceactive = [==[Toggles whether the goodbye option will be displayed.]==],
	mastervolume = [==[A <a href="/articles/Numbers" class="mw-redirect" title="Float">float</a> between 0 and 1 representing the volume of the game's client.]==],
	renderingtest = [==[An internal testing utility for the rendering pipeline]==],
	promptsaveavatar = [==[Prompts the Players.LocalPlayer to update their avatar based on the given HumanoidDescription and Enum.RigType of R6 or R15]==],
	leftparamb = [==[Determines the second parameter for the SurfaceType on the Left face of a part (-Z direction)]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	materialcolors = [==[MaterialColors represents the editor for the Material Color feature, and <strong>cannot be edited by scripts</strong>.
To get the color of a material, use: Terrain:GetMaterialColor
To set the color of a material, use: Terrain:SetMaterialColor]==],
	none = [==[No surface constraint.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	loadboolean = [==[Returns a boolean value that was previously saved to the player with Player:SaveBoolean with the same key]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	texttruncate = [==[Controls the truncation of the text displayed in this TextButton.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	coregui = [==[The CoreGui is a service used to store Guis created in-game by Roblox for the core user interface found in every game (such as the game menu, the playerlist, the backpack, etc.). It can also be used by Plugin in Roblox Studio.]==],
	streamingtargetradius = [==[Maximum distance that content will be streamed to players]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	eyeslookup = [==[Moves gaze up]==],
	color3 = [==[Determines the colorization to be applied to the Clothing texture]==],
	overridecorescriptsdir = [==[The directory used when overriding core scripts.
This should point to a clone of <a rel="nofollow" class="external text" href="https://github.com/ROBLOX/Core-Scripts">Roblox's CoreScript GitHub repository</a>.]==],
	y = [==[The y-coordinate of the position.]==],
	tohsv = [==[Returns the hue, saturation, and value of the Color3.]==],
	textstroketransparency = [==[Determines the transparency of the text stroke (outline).]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	focus = [==[The client regaining focus of the Roblox window.]==],
	angularlimitsenabled = [==[Enables the angular limits around the rotation axis.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	isbackend = [==[Vague value for showing if this depends on backend stuff.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	waitfordataready = [==[Used to pause the script until the player's data is available to manipulate, or until a certain amount of time has elapsed without fetching the player's data]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	guiobject = [==[An abstract class for all 2D user interface objects]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	direct3d11 = [==[Direct3D Version 11 (Microsoft)]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	stepped = [==[Fires every <em>frame</em> prior to the physics simulation]==],
	getcurrentplayers = [==[Returns a list of players currently using the Dialog.]==],
	reachedtarget = [==[Fired when the Parent of the BodyPosition reaches the desired BodyPosition.Position (within .1 studs). Once this event fires it will not fire again until BodyPosition.Position is updated.]==],
	imagebutton = [==[A 2D user interface element that displays an interactive image]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	getasync = [==[Returns the value of a key in a specified data store and a DataStoreKeyInfo instance.]==],
	setequippedemotes = [==[Sets the currently equipped emotes given an array of emote names]==],
	pasteregion = [==[Applies a chunk of terrain to the Terrain object. Note: TerrainRegion data does not replicate between server and client.]==],
	titlebar = [==[The color of windows' title bars]==],
	promptthirdpartypurchase = [==[Prompts a third-party purchase.]==],
	lightcolor = [==[The color of the emitted light]==],
	autowedgecells = [==[<em>(OBSOLETE)</em> No longer does anything.]==],
	size = [==[Determines the dimensions of a part (length, width, height)]==],
	collisiongroupsetcollidable = [==[Sets the collision status between two groups.]==],
	currentdistance = [==[The current distance in studs that the BillboardGui is from the player's camera]==],
	fail = [==[Indicates the progression failed]==],
	createbutton = [==[Creates PluginToolbarButton that allows the user to initiate a single, one-off action in Roblox Studio through the PluginToolbarButton.Click event]==],
	exp = [==[Returns the value e^x.]==],
	fontsize = [==[Determines the font size of a TextBox object]==],
	getobjects = [==[Returns an array of Instance associated with the given Articles.Content URL]==],
	waterwavesize = [==[Sets the maximum height of the Terrain water waves in studs.]==],
	formatbykey = [==[Returns the localized text string in a LocalizationTable based on its Translator locale, by key.]==],
	value = [==[The stored Ray.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	upperangle = [==[The maximum rotation angle the HingeConstraint will allow if HingeConstraint.LimitsEnabled is true.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	raycastparams = [==[A container for parameters used in raycasting functions.]==],
	cframe = [==[Determines the position and rotation of a part in the world]==],
	find = [==[Looks for the first match of pattern in the string s and returns the indices of s where the occurrence starts and ends.]==],
	maxdistance = [==[The maximum distance, in studs, a client's listener can be from the Sound origin and still hear it. Only applies to Sounds parented to a Part or Attachment (3D sounds)]==],
	updateasync = [==[Retrieves the value of a key from a sorted map and updates it with a new value.]==],
	pointeraction = [==[Fires when the user performs a specific pointer action (wheel, pinch, pan).]==],
	setinspectmenuenabled = [==[Allows developers to enable or disable default Inspect and Buy functionality]==],
	running = [==[Returns the running coroutine.]==],
	color = [==[Determines the color of a part.]==],
	minheight = [==[The minimum pixel height of the PluginGui.]==],
	printstreaminstancequota = [==[When set to true, debug information is printed to the output regarding the replication of instances when Workspace.StreamingEnabled is set to true.]==],
	frexp = [==[Returns m and e such that x = m*2^e.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	gamepad2 = [==[Input from the 2nd plugged in Gamepad.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	limitsenabled = [==[Sets whether the SlidingBallConstraint will limit the range of translation.]==],
	follow = [==[Camera moves with the subject and rotates to keep the subject in the center.]==],
	healthchanged = [==[Fires when the Humanoid.Health changes]==],
	userstorageservice = [==[asdf]==],
	stop = [==[Stops the AnimationTrack. Once called playback of the AnimationTrack will stop and the weight of the animation will move towards zero over a length of time specified by the optional fadeTime parameter.]==],
	color = [==[Determines the color of all particles emit over their individual lifetimes]==],
	richtext = [==[Determines whether the TextBox renders the TextBox.Text string using rich text formatting.]==],
	lefteyeupperlidraiser = [==[Raises the left eyelid upwards to reveal more of the eye white above the iris]==],
	servercollectresult = [==[Fired when the server should collect a test result.]==],
	paused = [==[The tween is paused in the middle of playing.]==],
	canquery = [==[Determines whether the part is considered during spatial query operations]==],
	part1 = [==[The second BasePart that the joint connects.]==],
	sparkles = [==[A particle emitter with the visual aesthetic of sparkles]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	classcategory = [==[Describes the category of this class.]==],
	constant = [==[Rotate at a constant velocity of BasePart ParamB.]==],
	hairaccessory = [==[The asset is a hair accessory.]==],
	orientationalignmentmode = [==[The OrientationAlignmentMode Enum is used to select the number of Attachments used in an alignment.]==],
	gameended = [==[The game that this player attempted to teleport to has ended.]==],
	alignorientation = [==[A constraint that applies a torque to make its attachments align]==],
	autojumpenabled = [==[Sets whether the character will automatically jump when hitting an obstacle on a mobile device.]==],
	touchpinch = [==[Fired when a user pinches their fingers on a UserInputService.TouchEnabled device - such as the screen of a mobile device]==],
	atend = [==[Text is truncated at the end of the text.]==],
	gamesettingstableitem = [==[The color of items within tables in the game settings window]==],
	limitsenabled = [==[Determines whether the angular motion of attachments’ primary axes is limited]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	datetime = [==[A datatype that represents a moment in time.]==],
	createdtime = [==[Indicates when the data store was created in milliseconds since epoch.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	y = [==[The Y dimension of the UDim2.]==],
	x = [==[The x-coordinate of the Vector2.]==],
	teleport = [==[Teleports a Player to the place associated with the given <em>placeId</em>]==],
	paddingleft = [==[The padding to apply on the left side relative to the parent's normal size.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	threshold = [==[Volume level at which point the compressor applies its effect.]==],
	thirdpartyuserservice = [==[An internal service that is used to handle third-party related users.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	bodyvelocity = [==[Applies a force to maintain a constant velocity]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	skyboxrt = [==[The URL link to a picture for the right surface of the sky.]==],
	inputholdend = [==[Fires a signal indicating that the user ended pressing the prompt GUI button]==],
	reflectance = [==[Determines how much a part reflects the skybox.]==],
	new = [==[Returns a Color3 with the given red, green, and blue values.]==],
	surfaceappearance = [==[An object that allows developers to override the appearance of a MeshPart with advanced graphics options]==],
	getstatuses = [==[Returns a table of the Humanoid's statuses, and custom statuses.]==],
	animation = [==[The asset is an animation; also see the more specific animation type enums below.]==],
	getmass = [==[Returns the value of the BasePart.Mass property.]==],
	activated = [==[Fires when the button is activated]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	imagecolor3 = [==[Determines how a rendered image will be colorized.]==],
	findpartsinregion3 = [==[Returns an array of BaseParts in the given DataType.Region3.]==],
	enabled = [==[Toggles whether a trail will be drawn or not.]==],
	glass = [==[Applies to BasePart only.]==],
	motormaxacceleration = [==[The maximum angular acceleration a HingeConstraint with HingeConstraint.ActuatorType set to Enum.ActuatorType can apply to achieve its HingeConstraint.AngularVelocity. Measured in radians/(second squared).]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	getrelativemouseposition = [==[Returns the position of the mouse relative to the PluginGui]==],
	reserveserver = [==[Returns an access code that can be used to teleport players to a reserved server, along with the DataModel.PrivateServerId for it]==],
	origin = [==[The position of the origin.]==],
	getlastforce = [==[Returns the last force in the object.]==],
	fuzzyeq = [==[Returns true if the provided Vector3 falls within the given distance from the Vector3.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	orientation = [==[Describes the position of the part in the world]==],
	velocityinheritance = [==[Determines how much of the parent's velocity is inherited by particles when emitted]==],
	raycastparams = [==[A container for parameters used in raycasting functions.]==],
	magnitude = [==[The length of the Vector3.]==],
	usejumppower = [==[Determines whether the StarterPlayer.CharacterJumpHeight (false) or StarterPlayer.CharacterJumpPower (true) property is used]==],
	neckaccessory = [==[A comma-separated list of asset IDs that will be added as Accessory to a Humanoid rig when Humanoid:ApplyDescription, usually those attached to its neck (such as scarves or necklaces)]==],
	userchoice = [==[The camera will move based on the player's settings.]==],
	mousebutton1down = [==[Fired when the left mouse button goes down on one of the GUI handles.]==],
	setkeyup = [==[Simulates the user releasing a key.]==],
	rigidityenabled = [==[If true, the solver reacts as quickly as possible to complete the alignment. If false, the torque is dependent on AlignPosition.MaxForce, AlignPosition.MaxVelocity, and AlignPosition.Responsiveness.]==],
	stiffness = [==[Defines how much the body mesh can be compressed by clothing.]==],
	orbital = [==[The camera has a fixed Y position, but can be rotated around the player.]==],
	livingroom = [==[Sound reverb is changed to sound like the player is in a living room.]==],
	animationid = [==[This property is the content ID of the animation an Animation object is referencing. Once an animation has been created and uploaded to Roblox the content ID can be found in the uploaded animation’s URL.]==],
	lookat = [==[Returns a CFrame with the position of the first Vector3 and an orientation pointed toward the second.]==],
	setmetadata = [==[Sets custom metadata to be associated with the key.]==],
	default = [==[Default status. Used for an undefined status]==],
	autojumpenabled = [==[Sets whether the character will automatically jump when they hit an obstacle as a player on a mobile device.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	angularvelocity = [==[The angular velocity a HingeConstraint with HingeConstraint.ActuatorType set to Enum.ActuatorType will attempt to achieve. Measured in radians/second.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	force = [==[Determines the amount of force exerted on each axis relative to the part]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	mass = [==[Describes the mass of the part, the product of its density and volume]==],
	controller = [==[The SkateboardPlatform's active SkateboardController.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	backparamb = [==[Determines the second parameter for the SurfaceType on the Back face of a part (+Z direction)]==],
	enemyocclusion = [==[Occlude (hide) all enemy humanoid names.]==],
	click = [==[Fires when the user presses and releases their cursor on the button]==],
	classic = [==[Camera tracks the player but will not automatically rotate if the player walks left or right.]==],
	renderfidelity = [==[Determines the level of detail that <span class="text-nowrap">solid-modeled</span> and mesh parts will be shown in]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	rightupperarm = [==[Reference to a Humanoid's RightUpperArm.]==],
	triggered = [==[Fires when the action is triggered. This can be done by either activating the action from the Quick Access Toolbar, or by using the keyboard shortcut that was bound to it.]==],
	instance = [==[The read-only Instance property of a Tween points to the Instance whose properties are being interpolated by the tween.]==],
	min = [==[The coordinates of the top-left corner.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	strafingnophysics = [==[<em>Doesn't seem to be used. Cannot be set with Humanoid.ChangeState.</em>]==],
	getstateenabled = [==[Returns whether a Enum.HumanoidStateType is enabled for the Humanoid]==],
	animated = [==[Whether or not to animate transitions between pages.]==],
	classic = [==[Camera tracks the player but will not automatically rotate if the player walks left or right.]==],
	package = [==[The asset is a pack, for example an animation package.]==],
	left = [==[The widget will appear docked to the left of the game screen]==],
	default = [==[Default mode used by Roblox Core Scripts.]==],
	promptallowinventoryreadaccesscompleted = [==[Fires when the AvatarEditorService:PromptAllowInventoryReadAccess prompt is responded to by the user]==],
	userinputtype = [==[Describes the kind of input being performed (mouse, keyboard, gamepad, touch, etc)]==],
	minlength = [==[The minimum separation the SpringConstraint will allow if SpringConstraint.LimitsEnabled is true.]==],
	ancestrychanged = [==[Fires when the Instance.Parent property of the object or one of its ancestors is changed.]==],
	motor = [==[Makes a movable JointInstance between two parts]==],
	level = [==[The intensity of the effect.]==],
	chat = [==[Makes the local player chat the given message]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	teamcolor = [==[Determines the Team with which a Player is associated.]==],
	worldrotationaxis = [==[The unit vector direction of the rotation axis in world coordinates.]==],
	invisicam = [==[Any objects between the camera and player will become translucent locally.]==],
	maxforce = [==[Maximum magnitude of the force vector the constraint can apply.]==],
	rightinnerbrowraiser = [==[Raises the interior half of the right brow upwards]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	catalogsearchparams = [==[A container for parameters used in catalog searches.]==],
	gui = [==[Gui element data and rendering.]==],
	level21 = [==[Graphic quality level 21 - the highest quality level.]==],
	backsurfaceinput = [==[Determines the kind of input for the Back face of a part (+Z direction)]==],
	reflectionmetadataclasses = [==[An internal object which cannot be used by developers.]==],
	insertkey = [==[Adds the key passed as argument to this curve.]==],
	zoffset = [==[Offsets the SurfaceGui relative to the normal of the surface it is attached to.]==],
	robotomono = [==[<style>@import url('https://fonts.googleapis.com/css2?family=Roboto+Mono');</style>
<p class="text-nowrap" style={{fontFamily: 'Roboto Mono', fontSize: '1.45em', margin: '5px 0px'}}>The quick brown fox jumps over the lazy dog.<br />0123456789 , : ! ? # % & ( ) - + =]==],
	datasendkbps = [==[In a networked game, this describes roughly how many kilobytes of data are being sent by the current instance, per second.]==],
	touchtap = [==[Fired when a user taps their finger on a UserInputService.TouchEnabled device - such as the screen of a mobile device]==],
	renderstepped = [==[Fires every <em>frame</em> prior to the frame being rendered]==],
	touchpinch = [==[Fires when the player performs a pinch or pull gesture using two fingers on the UI element]==],
	imagerectsize = [==[Determines the size in pixels of the sub-area of an image to be displayed.]==],
	getkeyframesequence = [==[Returns a KeyframeSequence from a given asset URL.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	gripup = [==[One of the properties that specifies a Tool's orientation in a character's hand. This represents the R01, R11, and R21 values of the Grip CFrame's rotation matrix]==],
	position = [==[The position of the intersection between the ray and the part.]==],
	additem = [==[The AddItem method allows the developer to schedule the removal of the object without yielding any code.]==],
	cursorposition = [==[Determines the offset of the text cursor in bytes, or -1 if there is no cursor.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	run = [==[Runs the game’s simulation, running physics and scripts]==],
	visible = [==[Toggles the visibility of the Attachment in-game.]==],
	getvalueattime = [==[Samples the 3 FloatCurves (X, Y, Z) at the time passed as argument. Returns the 3 samples as a tuple of 3 numbers. If a channel curve is missing or no key is found in the curve the channel is evaluated as nil.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	requireslineofsight = [==[Whether the prompt is hidden if the path between the player’s Camera and object parented to the ProximityPrompt is obstructed]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	robloxversion = [==[The current client version of Roblox. Can also be retrieved by using the version() function.]==],
	strafing = [==[Fires when the Humanoid enters or leaves the <em>StrafingNoPhysics</em> Enum.HumanoidStateType]==],
	reset = [==[Erases the saved state of the UserSettings, and restores its default values.]==],
	left = [==[Left hand touchpad.]==],
	plugindragmoved = [==[Fires when the user's mouse moves within a PluginGui during a drag operation started by Plugin:StartDrag]==],
	raycast = [==[Casts a ray using an origin, direction, and optional datatype.RaycastParams, then returns a datatype.RaycastResult if an eligible object or terrain intersects the ray.]==],
	displayname = [==[The DisplayName of the UserId associated with the Player]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	loadinstance = [==[Returns an instance that was previously saved to the player with Player:SaveInstance with the same key]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	maxactivationdistance = [==[Maximum distance between a character and the ClickDetector for the character to be able to click it]==],
	theme = [==[Used to get/set current StudioTheme used by Studio]==],
	udim2 = [==[A two-dimensional value where each dimension is composed of a relative scale and an absolute offset.]==],
	x = [==[The X dimension of the UDim2.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	maxangle = [==[The max angle, in degrees, of the constraint’s limiting cone]==],
	intvalue = [==[A container object for a single integer.]==],
	random = [==[A provider of pseudorandom numbers.]==],
	bottom = [==[Whether the bottom face is included.]==],
	line = [==[The line that the breakpoint has been placed on.]==],
	datastoreinfo = [==[Object describing data store information.]==],
	white = [==[Returns the BrickColor White.]==],
	playonremove = [==[When true, the Sound will play when it is removed from the game, by parenting the Sound or one if its ancestors to nil.]==],
	closestnopath = [==[Path doesn't exist, returns path to closest point.]==],
	fillblock = [==[Fills a block of smooth terrain with a given location, rotation, size, and material]==],
	spherehandleadornment = [==[The SphereHandleAdornment is a sphere that can be adorned to a BasePart.]==],
	horizontalalignment = [==[Determines the horizontal alignment of UI elements within the parent element.]==],
	getaxis = [==[Returns the value of the Attachment's Attachment.Axis]==],
	bubble = [==[Displays chats in a bubble above the sender's head.]==],
	characterappearance = [==[The URL of the asset containing the character's appearance, clothing, and gear]==],
	delay = [==[Schedules a function to be called on the next Heartbeat after the given duration (in seconds) has passed, with throttling.]==],
	targetangle = [==[The target angle a HingeConstraint will attempt to rotate to if its HingeConstraint.ActuatorType is set to Enum.ActuatorType. Measured in degrees.]==],
	nextinteger = [==[Returns a pseudorandom integer uniformly distributed over [min, max].]==],
	playemote = [==[Plays emotes and returns if was successfully ran.]==],
	getgameplaypausednotificationenabled = [==[Returns whether or not the Player.GameplayPaused notification has been disabled by the developer]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	value = [==[Used to hold a integer value between IntConstrainedValue.MinValue and IntConstrainedValue.MaxValue.]==],
	chatted = [==[Fires when a player chats in-game using Roblox's provided chat bar.]==],
	new = [==[Creates a blank OverlapParams object.]==],
	addcustomstatus = [==[Adds a custom status to the Humanoid.]==],
	smoothplastic = [==[Applies to BasePart only.]==],
	part = [==[Sets the target of the lasso object.]==],
	manualweld = [==[Holds two parts together and functions identically to Weld]==],
	setnetworkownershipauto = [==[Lets the game engine dynamically decide who will handle the part's physics (one of the clients or the server).]==],
	rejected = [==[Text rejected by filter.]==],
	printidentity = [==[Prints "Current identity is X", where X corresponds to the current thread's security context level.]==],
	pointlight = [==[A light source that emits illumination from a single point.]==],
	new = [==[Returns a new DockWidgetPuginGuiInfo object.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	textinput = [==[Input of Text into a text-based GuiObject. Normally this is only a TextBox.]==],
	setglobal = [==[Sets the value of the variable <i>name</i> as <i>value</i> in the script's main stack.]==],
	shadows = [==[If set to true, will project shadows if light is blocked by an obstacle.]==],
	selectribbontool = [==[Activates the specified Roblox Studio tool.]==],
	showvideoad = [==[Historically used to show mobile video adverts]==],
	graphicstexture = [==[Rendering of textures in the game world.]==],
	getanglesattime = [==[Samples the 3 FloatCurves (X, Y, Z) at the time passed as argument. Returns the result as 3 Euler angles. If a channel curve is missing or no key is found in the curve the channel is evaluated as nil.]==],
	upper = [==[Returns a copy of a string with all lowercase letters changed to uppercase.]==],
	reflectionmetadataclass = [==[Registers information about a class, and its members.
Should be parented to ReflectionMetadataClasses]==],
	scrollbar = [==[The color of scrollbar handles, like those seen in the Explorer window]==],
	backparama = [==[Determines the first parameter for the SurfaceType on the Back face of a part (+Z direction)]==],
	loaded = [==[Fires when the VideoFrame.Video is loaded]==],
	loadcharacter = [==[Creates a new character for the player, removing the old one. Also clears the player's Backpack and PlayerGui]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	status = [==[An unfinished object which offers no functionality to developers.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	y = [==[Returns the FloatCurve controlling the Y channel. It is the first child instance of type FloatCurve named 'Y'. If none is found an empty FloatCurve is created.]==],
	onupdate = [==[Refers to GlobalDataStore.OnUpdate.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	rightlegcolor = [==[Sets the color of this limb, as a <a href="/api-reference/datatype/BrickColor" class="mw-redirect" title="API:BrickColor"><span>BrickColor</span></a>.]==],
	takedamage = [==[Lowers the Humanoid.Health of the Humanoid by the given <em>amount</em> if it is not protected by a ForceField]==],
	maxextents = [==[Displays the boundaries of the largest possible editable region.]==],
	floatingxsize = [==[The initial pixel width of the PluginGui when floating.]==],
	getcell = [==[Returns the closest CellMaterial from the legacy terrain engine that matches the smooth terrain voxel specified.]==],
	nosupports = [==[Truss beams do not contain supports.]==],
	yaxis = [==[A Vector2 with a value of 1 on the Y axis.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	teleportpartyasync = [==[Teleports a group of Player to the same server of the place with the given DataModel.PlaceId, returning the DataModel.JobId of the server instance they were teleported to]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	p = [==[Determines how aggressive of a force is applied in reaching the goal position]==],
	menuisopen = [==[Returns true if any menu of CoreGui is open]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	showdecompositiongeometry = [==[When set to true, the underlying collision geometry for PartOperation and MeshPart is rendered.]==],
	fromhex = [==[Returns a Color3 from the given hex value.]==],
	center = [==[The object is centered on the center of it's parent (x-axis), expanding equally to the left and right of the parent's center.]==],
	cframe = [==[The goal orientation of the AlignOrientation (the translation component is ignored).]==],
	bodyforce = [==[Applies a constant force to an object]==],
	changed = [==[Fired immediately after a property of an object changes.]==],
	constraint = [==[The base class for Constraint-based objects.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	wildwest = [==[The game's genre is set to Wild West]==],
	getordereddatastore = [==[Get an OrderedDataStore given a name and optional scope]==],
	ismotorsupported = [==[Returns true if the specified motor is available to be used with the specified Enum.UserInputType]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	p = [==[Determines how aggressive of a force is applied in reaching the goal velocity]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	desiredangle = [==[The desired angle to be reached. The motor will attempt to reach this angle.]==],
	type = [==[Returns the basic type of the provided object.]==],
	righteyeupperlidraiser = [==[Raises the right eyelid upwards to reveal more of the eye white above the iris]==],
	floatcurve = [==[A sorted list of time-value pairs (DataType.FloatCurveKey) that define a curve. Used to animate a single numerical value.]==],
	beam = [==[A Beam object connects two Attachments by drawing a texture between them.]==],
	noreverb = [==[No sound reverb. Audio is not changed from default.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	frontaccessory = [==[A comma-separated list of asset IDs that will be added as Accessory to a Humanoid rig when Humanoid:ApplyDescription, usually those attached to front of its torso (such as medals or ties)]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	torsocolor3 = [==[Sets the color of this limb, as a <a href="/api-reference/datatype/Color3" title="API:Color3"><span>Color3</span></a>.]==],
	elevatedonserver = [==[Less throttling if on the server.]==],
	statusadded = [==[Fired when a status is added to the Humanoid.]==],
	explosion = [==[An Explosion applies force to BaseParts within the explosion's Explosion.BlastRadius. This force breaks joints between parts and kills Humanoid characters not protected by a ForceField.]==],
	autobuttoncolor = [==[Determines whether the button automatically changes color when the mouse hovers over or clicks on it]==],
	event = [==[The event that is fired when BindableEvent:Fire is called]==],
	textxalignment = [==[Determines the horizontal alignment of rendered text.]==],
	twistlowerangle = [==[Sets the lower twist rotation limit of the BallSocketConstraint, as long as BallSocketConstraint.TwistLimitsEnabled is true.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	assemblymass = [==[The total mass of the part’s assembly]==],
	dialogchoiceselected = [==[Fired when a player chooses something to say, through a Dialog instance.]==],
	steer = [==[The direction of movement, tied to the keys A and D. Must be 1 (right), 0 (straight), or -1 (left). Will refresh back to 0 unless constantly set.]==],
	disabled = [==[Toggles whether the VehicleSeat is active or not.]==],
	size352x352 = [==[Thumbnail resolution is 352 pixels x 352 pixels.]==],
	lineheight = [==[Scales the spacing between lines of text in the TextButton]==],
	typeof = [==[Returns the type of the given object as a string, also supporting Roblox-specific types (e.g. Vector3).]==],
	stopped = [==[Fires whenever the AnimationTrack finishes playing.]==],
	lowerlimit = [==[The lower position limit along the x-axis of Constraint.Attachment0 for a SlidingBallConstraint if SlidingBallConstraint.LimitsEnabled is true.]==],
	vector3curve = [==[Represents a 3D vector curve, it groups 3 FloatCurve, stored as 3 FloatCurve children instances.]==],
	wetlevel = [==[The output volume of the echoed effect.]==],
	isactivatedwithexclusivemouse = [==[Returns true if this plugin is currently active with an exclusive mouse, after having been activated via the Plugin:Activate function]==],
	getcanundo = [==[Returns whether there are actions that can be undone, and, if there are, returns the last of them.]==],
	actiontext = [==[The action text shown to the user]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	arehingesdetected = [==[Displays how many hinges are detected by the VehicleSeat. Useful for debugging vehicle designs.]==],
	getentries = [==[Returns an array of dictionaries, where each dictionary represents an entry of localization data.]==],
	distance = [==[The distance between the ray origin and the intersection point.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	climbing = [==[The Humanoid is climbing (e.g. up a TrussPart or ladder). <em>This state is only found being active when stopping with climbing.</em>]==],
	gettranslatorforplayer = [==[Returns a Translator to be used for translations using the locale data loaded]==],
	recenteruserheadcframe = [==[Recenters the DataType.CFrame of the VR headset to the current orientation of the headset worn by the user]==],
	maxthrust = [==[Determines the maximum amount of thrust that will be exerted to move the part]==],
	attachment1 = [==[The Attachment the Beam ends at.]==],
	size48x48 = [==[Thumbnail resolution is 48 pixels x 48 pixels.]==],
	collectgarbage = [==[Performs the specified operation of the garbage collector.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	tweenbase = [==[Abstract base class for in-between interpolation handlers. Tween inherits from BaseTween.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	enabled = [==[Whether this prompt should be shown]==],
	getplayers = [==[Returns a table of all presently connected Player objects]==],
	x = [==[The x-coordinate of the Vector3.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	attachmentright = [==[Sets the offset position of the object on the Player.]==],
	unbindallactions = [==[Removes all functions bound. No actionNames will remain. All touch buttons will be removed.]==],
	avatarbust = [==[The returned thumbnail shows the bust (chest up) of the user's avatar.]==],
	neutral = [==[Whether or not a SpawnLocation is affiliated with a specific team. This means that any Player, of any Team, can spawn on it if this property is set to true.]==],
	massless = [==[Determines whether the part contributes to the total mass or inertia of its rigid body]==],
	transparency = [==[Determines the transparency of particles over their individual lifetimes]==],
	alphamode = [==[Determines how the alpha channel of the SurfaceAppearance.ColorMap of a SurfaceAppearance is used]==],
	getkeys = [==[Returns a copy of all the keys in the RotationCurve as a Lua array of RotationCurveKey.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	color3 = [==[A color value comprised of R, G, and B components.]==],
	isloaded = [==[This property will be true when the Sound has loaded loaded from Roblox servers and is ready to play.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	elasticity = [==[Used to control the Elasticity of the part, but it no longer does anything]==],
	easingstyle = [==[The easing style to use when performing an animation.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	getjoinmode = [==[Returns the Enum.JointCreationMode the user has set in studio under the Model tab.]==],
	bottomimage = [==[The Down image on the vertical scrollbar. Size of this is always ScrollBarThickness by ScrollBarThickness. This is also used as the image on the horizontal scroll bar.]==],
	friction = [==[The deceleration of the part when rubbing against another part.]==],
	closelate = [==[Fired immediately after the ServiceProvider.Close signal is fired.]==],
	color = [==[Changes the Atmosphere hue for subtle environmental moods.]==],
	distancestep = [==[Distance will be rounded to increments of this value]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	faceaccessory = [==[A comma-separated list of asset IDs that will be added as Accessory to a Humanoid rig when Humanoid:ApplyDescription, usually those attached to the front of its face (such as glasses)]==],
	studsbetweentextures = [==[The number of studs between each FloorWire segment.]==],
	min = [==[Returns a Vector3 where each component is the lowest among the respective components of the provided Vector3s.]==],
	d = [==[Determines the amount of dampening to use in reaching the goal BodyGyro.CFrame]==],
	leftarm = [==[The left arm BodyPart.]==],
	tan = [==[Returns the tangent of x (assumed to be in radians).]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	drylevel = [==[The output volume of the original sound.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	feature = [==[The base class for the legacy motor system.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	servomaxtorque = [==[The maximum torque a HingeConstraint with HingeConstraint.ActuatorType set to Enum.ActuatorType can apply when trying to reach its desired HingeConstraint.TargetAngle.]==],
	awardbadge = [==[Award a badge to a player given the ID of each]==],
	saveinstance = [==[Saves an instance which can be loaded again at a later time]==],
	texturemode = [==[Determines the manner in which the Beam.Texture scales and repeats.]==],
	filterstringforplayerasync = [==[Filters a string appropriate to the given player's age settings, so they see what is appropriate to them.]==],
	absolutesize = [==[Describes the actual screen size of a UI element, in pixels.]==],
	bnot = [==[Returns the bitwise negation of a given number.]==],
	heartbeat = [==[Fires every <em>frame</em> after the physics simulation has completed]==],
	radius = [==[The visualized radius of the BallSocketConstraint.]==],
	contextactionservice = [==[A service used to bind user input to contextual actions.]==],
	size = [==[Determines the blur radius]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	rightlowerleg = [==[Reference to a Humanoid's RightLowerLeg.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	loginservice = [==[An internal service whose functionality is not available to developers.]==],
	sizeincells = [==[The size of this TerrainRegion in cells.]==],
	getcharacterappearanceasync = [==[Returns a Model containing the assets which the player is wearing, excluding gear]==],
	enabled = [==[Whether ProximityPrompt are enabled, and therefore shown, in-game]==],
	format = [==[Returns a formatted version of its variable number of arguments following the description given in its first argument (which must be a string).]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	datastoreobjectversioninfo = [==[An instance describing version information for a key.]==],
	servomaxforce = [==[The maximum force a SlidingBallConstraint with SlidingBallConstraint.ActuatorType set to Enum.ActuatorType can apply when trying to reach its desired SlidingBallConstraint.Speed.]==],
	solidmodelcontentprovider = [==[An internal service which serves no functionality to developers.]==],
	vipserverownerid = [==[The Player.UserId of the account who owns the VIP server]==],
	new = [==[Returns a Region3int16 from the provided boundaries.]==],
	new = [==[Returns a Vector3int16 from the given x, y, and z components.]==],
	hole = [==[The Hole linked to this VelocityMotor.]==],
	userhasbadge = [==[Checks whether a player has the badge given the Player.UserId and the badge ID.]==],
	fireingameeconomyevent = [==[Fire an event used to track player actions pertaining to the in-game economy]==],
	replicatedfirst = [==[A container whose contents are replicated to all clients (but not back to the server) first before anything else.]==],
	playerownsasset = [==[Returns whether the given player has the given asset.]==],
	localtransparencymodifier = [==[Determines a multiplier for BasePart.Transparency that is only visible to the local client]==],
	lightinfluence = [==[Determines the degree to which the Beam is influenced by the environment's lighting.]==],
	filterdescendantsinstances = [==[An array of objects whose descendants will be used in filtering candidates.]==],
	selectedobject = [==[Sets the GuiObject currently being focused on by the GUI Navigator (used for Gamepads)]==],
	sortorder = [==[Determines the manner in which the next UI element is chosen when being laid out.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	vertexcolor = [==[Changes the hue of a mesh's texture, used with FileMesh.TextureId.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	offsetstudsv = [==[Determines the offset in studs of the rendered texture's vertical coordinate.]==],
	mousebutton2 = [==[The right mouse button.]==],
	stoneroom = [==[Sound reverb is changed to sound like the player is in a stone room.]==],
	p = [==[Determines how aggressive of a torque is applied in reaching the goal angular velocity]==],
	leftnosewrinkler = [==[Raise the left nostril, pulls the brow down slightly, and wrinkles on the side of the nose]==],
	adornee = [==[Sets the object that the SurfaceGui is adorned too. In other words, this defines which BasePart the SurfaceGui is attached to.]==],
	instance = [==[Instance is the base class for all classes in the Roblox class hierarchy.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	leftouterbrowraiser = [==[Raises the outer part of the left brow upwards]==],
	focuslost = [==[The FocusLost event fires when the client lets their focus off the TextBox.]==],
	quad = [==[Similar to Quart and Quint, but at a different speed (See animation).]==],
	speed = [==[Determines the random range of speeds a new particle will have when emit, measured in studs per second]==],
	getcreatorassetid = [==[Returns the UserId of the account who created the the creationID asset.]==],
	size8 = [==[Font size 8.]==],
	z = [==[Whether the Z axis is enabled.]==],
	clipsdescendants = [==[Determines if descendant GuiObject outside of the bounds of a parent GUI element should render]==],
	uigradient = [==[A UIComponent, that blends a color gradient to its parent GuiObject, so you can layer multiple colors into your text, UI background or other UI content.]==],
	time = [==[Returns the amount of time in seconds that has elapsed since the current game instance started running.]==],
	linkedsource = [==[Used to store a URL that points to an online script source. Binds the online code to the script's Script.Source]==],
	getinspectmenuenabled = [==[Returns whether the Inspect and Buy menu functionality is enabled]==],
	hopper = [==[Deprecated. Hopper has been replaced by StarterPack and should not be used.]==],
	runanimation = [==[When this description is Humanoid:ApplyDescription to a Humanoid, this determines the Animation.AnimationId to play when its Humanoid:GetState is enum.HumanoidStateType at a moderate speed.]==],
	inputbegan = [==[Fired when a user begins interacting via a Human-Computer Interface device - such as a mouse or gamepad]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	translateby = [==[Shifts a Model by the given Vector3 offset, preserving the Model's orientation. If another BasePart or Terrain already exists at the new position then the Model will overlap said object.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	scriptable = [==[No default behavior. Used when developers need to script custom behavior.]==],
	border = [==[The stroke is applied to the parent UI element’s border]==],
	fromunixtimestampmillis = [==[Returns a DateTime representing the given Unix timestamp in milliseconds.]==],
	hascustomstatus = [==[Returns boolean based on if custom statuses exist.]==],
	new = [==[Returns a Region3 using the provided vectors as boundaries.]==],
	sibling = [==[The ZIndex property will control the order that the GuiObject will be rendered relative to its siblings.]==],
	starterplayerscripts = [==[A container for objects to be copied to a Player's PlayerScripts when they join a game]==],
	geargenresetting = [==[Not functional. Historically described the gear permissions of the Articles.Place as set on the Roblox website]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	merriweather = [==[<style>@import url('https://fonts.googleapis.com/css2?family=Merriweather');</style>
<p class="text-nowrap" style={{fontFamily: 'Merriweather', fontSize: '1.6em', margin: '5px 0px'}}>The quick brown fox jumps over the lazy dog.<br />0123456789 , : ! ? # % & ( ) - + =]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	rshift = [==[Returns a number whose bits have been logically shifted to the right by a given displacement.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	teams = [==[The Teams service holds a game's Team objects. Team objects must be parented to the Teams service.]==],
	tweeninfo = [==[A container of parameters for Tweens.]==],
	elasticity = [==[The amount of energy retained when colliding with another part.]==],
	worldtoviewportpoint = [==[Returns the 2D screen location of a DataType.Vector3 position in the world, but does not account for the GUI inset]==],
	style = [==[Sets the GUI style of the handles. Currently there are only two types; Resize and Movement.]==],
	cframe = [==[The CFrame that will be applied to the Motor6D corresponding with the Pose. This CFrame is applied by changing the Motor6D\Transform property of the motor.]==],
	networkpeer = [==[The NetworkPeer object is the most basic class of the network objects.]==],
	jobid = [==[A unique identifier for the game server instance running. Defaults to an empty string in Roblox Studio]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	insertable = [==[Toggles whether or not this object can be inserted through the Advanced Objects menu.]==],
	receiverconnected = [==[Fires when a receiver is connected to the CustomEvent]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	pvinstance = [==[Abstract class for all objects that have a physical location in the world, specifically BasePart and Model.]==],
	spreadangle = [==[Determines the angles at which particles may be randomly emit, measured in degrees]==],
	getbutton = [==[Returns whether or not Button is being pressed.]==],
	expandtogrid = [==[Expands the Region3 to fit a grid based on the provided resolution.]==],
	settimeout = [==[Limits how long a script is allowed to run without yielding.]==],
	getmodelsize = [==[Returns the Vector3 size of the Model.]==],
	shrinkfactor = [==[Allows slight shrinking/expanding of the resulting render mesh, without affecting any other layers.]==],
	attachmentpos = [==[Sets the position of the object on the Player.]==],
	lerp = [==[Returns a UDim2 interpolated linearly between the value and the given goal.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	accelerometer = [==[The accelerometer of a mobile device.]==],
	bodytypescale = [==[Determines the factor by which the shape of a Humanoid rig is interpolated from the standard R15 body shape (0) to a taller and more slender body type (1); when Humanoid:ApplyDescription, maps to the "BodyTypeScale" NumberValue within the HumanoidDescription]==],
	getroll = [==[Returns in radians the current roll, or rotation around the Camera Z-axis, applied to the Camera using Camera:SetRoll]==],
	feedback = [==[The echo decay every time the echo plays.]==],
	colorpickerframe = [==[The background color of the color picker]==],
	rangedweapons = [==[Gear with the 'Ranged' attribute.
![<a href="/assets/blt4aaa5534850ad583/GearType_Ranged.png">Ranged Attribute</a>]==],
	x = [==[Canvas can only be scrolled along the X axis]==],
	getaccessories = [==[Returns an array of Accessory that the Humanoid parent is currently wearing]==],
	intensity = [==[Determines the opacity of the sun rays]==],
	triggerended = [==[Triggers when ProximityPrompt.KeyboardKeyCode/button is released, for longer events where the user is required to hold down the button]==],
	getnonchatstringforuserasync = [==[Returns the text in a properly filtered manner for the specified Player.UserId. This should be used in the context of non-chat text that another user can see, such as the name of a pet.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	savestring = [==[Saves a string value that can be loaded again at a later time]==],
	conversationdistance = [==[The furthest distance that I player can be from the Dialog's parent to start a conversation.]==],
	size12 = [==[Font size 12.]==],
	scrollingenabled = [==[Determines whether or not scrolling is allowed on the frame. If false, no scroll bars will be rendered.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	getmouse = [==[Returns a Mouse that can be used while the plugin is active.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	level10 = [==[Graphic quality level 10.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	color3value = [==[A container object for a single Color3 value.]==],
	flagstandservice = [==[An internal service responsible for handling the now deprecated FlagStand and Flag objects]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	atan2 = [==[Returns the arc tangent of y/x (in radians) while using the signs of both parameters to find the quadrant of the result.]==],
	rightarmcolor = [==[Sets the color of this limb, as a <a href="/api-reference/datatype/BrickColor" class="mw-redirect" title="API:BrickColor"><span>BrickColor</span></a>.]==],
	closestpoint = [==[Returns a Vector3 projected onto the ray so that it is within the Ray's line of sight.]==],
	playeradded = [==[Fires when a player enters the game.]==],
	isloaded = [==[Indicates whether the Image has finished loading from the Roblox website.]==],
	getlastforce = [==[Not implemented and will always return the 0 vector]==],
	textcolor = [==[Determines the color of text]==],
	uisizeconstraint = [==[Ensures a GuiObject does not become larger or smaller than the constraint's max size or min size.]==],
	adjustspeed = [==[This function changes the AnimationTrack.Speed of an animation.  A positive value for speed plays the animation forward, a negative one plays it backwards, and 0 pauses it.]==],
	devtouchcameramovementmode = [==[Lets developer overwrite the default camera movement mode for each player if the player is on a mobile device.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	getplayinganimationtracks = [==[Returns the list of currently playing AnimationTracks.]==],
	root = [==[The object that is being targeted for localization by this table. Localization is applied to it and all of it's descendants.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	getcolor = [==[Returns the color corresponding to the arguments provided]==],
	getdatastore = [==[Creates a GlobalDataStore instance with the provided name and scope.]==],
	datacomplexity = [==[The total amount of data currently being stored in the Player cache on the current place]==],
	curvesize0 = [==[Determines, along with Beam.Attachment0 the position of the first control point in the Beam's Bézier curve.]==],
	maxsize = [==[The largest size in pixels the object is allowed to be.]==],
	pitch = [==[Deprecated. Sets how high pitched and fast a Sound is when it is played. The greater the integer, the higher and faster the Sound is.]==],
	new = [==[Returns a blank RaycastParams.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	blastradius = [==[This property determines the radius of the Explosion, in studs. This radius determines the area of effect of the explosion, not the size of the explosion's visuals.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	checkpoint = [==[Prints "Test checkpoint: ", followed by text, to the output, in blue text.]==],
	gamepad7 = [==[Input from the 7th plugged in Gamepad.]==],
	sink = [==[If <em>functionToBind</em> from ContextActionService.BindAction returns Enum.ContextActionResult.Sink, the input event will stop at that function and no other bound actions under it will be . This is the default behavior if <em>functionToBind</em> does not return anything or yields in any way.]==],
	text = [==[Sets the text of a Message or Hint.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	walk = [==[Walk action needed to reach the next waypoint]==],
	isenabled = [==[Whether or not the breakpoint is enabled.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	jumprequest = [==[Fires whenever the client makes a request for their character to jump]==],
	upvector = [==[The up-direction component of the CFrame's orientation.]==],
	torsocolor = [==[Sets the color of this limb, as a <a href="/api-reference/datatype/BrickColor" class="mw-redirect" title="API:BrickColor"><span>BrickColor</span></a>.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	addemote = [==[Adds the emote to the description given a name and its asset ID]==],
	datetime = [==[A datatype that represents a moment in time.]==],
	acos = [==[Returns the arc cosine of x.]==],
	swimming = [==[The Humanoid is currently swimming in Terrain water.]==],
	pointtoworldspace = [==[Returns a Vector3 transformed from Object to World space.]==],
	deathanimation = [==[The asset is a death animation.]==],
	collisionfidelity = [==[Determines the level of detail the part's physics will adhere to its mesh]==],
	getrecommendedbundles = [==[Returns a list of recommended bundles for a given bundle id]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	new = [==[Returns a Ray with the given origin and direction]==],
	redo = [==[Executes the last action that was undone.]==],
	ball = [==[A ball shaped part]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	getcoreguienabled = [==[Returns whether the given Enum.CoreGuiTypeis enabled or if it has been disabled using StarterGui:SetCoreGuiEnabled]==],
	targetfilter = [==[Determines an object (and its descendants) to be ignored when determining Mouse.Hit and Mouse.Target]==],
	tintcolor = [==[Determines by how much the RGB channels of pixels are scaled]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	textsize = [==[Determine the line height of text in pixels.]==],
	recenteruserheadcframe = [==[Recenters the CFrame to the current location of the VR headset being worn by the user.]==],
	islegal = [==[Determines if a given badge is associated with the current game]==],
	cancel = [==[A special circumstance state that indicates this input is no longer relevant, particularly with ContextActionService. For example, binding two action-handling functions will cause the first to Cancel if an input was already in-progress when the second was bound.]==],
	backpack = [==[A container object that holds a Player's inventory. Any Tool in a player's Backpack will be displayed in their inventory at the bottom of their screen.]==],
	facecamera = [==[Determines whether the Beam.Segments of the Beam will always face the camera regardless of its orientation.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	new = [==[Returns a UDim from the given components.]==],
	emissiondirection = [==[Determines the face towards which particles will be emit]==],
	linevelocity = [==[Float value of the velocity when LinearVelocity.VelocityConstraintMode is set to <strong>Line</strong>.]==],
	baseurl = [==[The base URL that is used by the ContentProvider for downloading assets from the Roblox website.]==],
	zindex = [==[The ZIndex property determines the draw order of the HandleAdornment.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	thrustp = [==[Determines how aggressive of a force is applied in reaching the RocketPropulsion.Target]==],
	postasync = [==[Performs a POST request to the specified <a rel="nofollow" class="external text" href="http://api.roblox.com/docs">Roblox Web API</a>. The <i>apiUrlPath</i> parameter is prefixed by <a href="/articles/String" title="String"><span>"https://api.roblox.com/"</span></a> when the post request is made.]==],
	leftcheekpuff = [==[Puffs up the left cheek]==],
	connected = [==[The state of the RBXScriptConnection.]==],
	begin = [==[The tween is beginning to play.]==],
	mouselockswitch = [==[Similar to classic, but allows the player to toggle mouse locking, causing the camera to rotate as the player moves the mouse (without holding down a button).]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	promptpremiumpurchase = [==[Used to prompt a user to purchase Premium]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	luaheap = [==[All of the data in Lua. this includes everything happening in CoreScripts, the built-in datatypes, etc.]==],
	distancefromcharacter = [==[Returns the distance between the character's head and the given Vector3 point. Returns 0 if the player has no character.]==],
	ignorewater = [==[Determines whether the water material is considered when raycasting against Terrain.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	shouldreserveserver = [==[A flag to indicate if a reserved server should be allocated and the players should then be teleported to this allocation]==],
	edgebump = [==[Disables swipe to pan on mobile devices, and enables edge bump camera controls. It does not affect PC or Mac users.]==],
	loaded = [==[Fires on the client when the game finishes loading for the first time]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	platformstand = [==[Determines whether the Humanoid is currently in the <em>PlatformStanding</em> Enum.HumanoidStateType.]==],
	datamodel = [==[The DataModel (commonly known as <strong>game</strong> after the global variable used to access it) is the root of Roblox's parent-child hierarchy. Its direct children are services (such as the Workspace and Lighting) that act as the fundamental components of a Roblox game.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	characterautoloads = [==[Indicates whether Characters will respawn automatically.]==],
	getmouselocation = [==[Returns the current screen location of the player's Mouse relative to the top left corner of the screen]==],
	lockfirstperson = [==[Exclusively first-person camera.]==],
	contrast = [==[Determines the change in separation between the dark and light colors]==],
	udim = [==[A one-dimensional value with two components, a relative scale and an absolute offset.]==],
	zero = [==[A Vector2 with a magnitude of zero.]==],
	secondarytangentaxis = [==[The secondary axis in the plane, when LinearVelocity.VelocityConstraintMode is set to <strong>Plane</strong>.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	miter = [==[The corners are mitered (see image above)]==],
	orbital = [==[The camera has a fixed Y position, but can be rotated around the player.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	lightdirection = [==[A DataType.Vector3 representing the direction of the light source from the position 0, 0, ]==],
	teleportservice = [==[Enables transporting Player between places and servers.]==],
	linear = [==[Linear interpolation between the values of the first and second keys]==],
	inputchanged = [==[Fired when a user changes how they're interacting via a Human-Computer Interface device (Mouse button down, touch begin, keyboard button down, etc)]==],
	follow = [==[Camera tracks the player and automatically rotates if the player walks left or right.]==],
	getmessage = [==[<strong><em>[OBSOLETE]:</em></strong> This function will always return a blank string]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	reset = [==[Resets the current game to a waypoint set when RunService:Run was called]==],
	debuggeradded = [==[Fired when a new <a href="/api-reference/class/ScriptDebugger" class="mw-redirect" title="ScriptDebugger">ScriptDebugger</a> is created through the <a href="/api-reference/function/DebuggerManager/AddDebugger" class="mw-redirect" title="AddDebugger">AddDebugger</a> method.]==],
	modal = [==[If true while the GUI element is visible, the mouse will not be locked unless the right mouse button is down.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	targetradius = [==[Determines the maximum distance from the RocketPropulsion.Target the part must be in order for RocketPropulsion.ReachedTarget to be fired]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	new = [==[Returns a new FloatCurveKey from the given time and value.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	classic = [==[Allows the camera to be moved by clicking and dragging with the right mouse button.]==],
	saveselectedtoroblox = [==[Opens an upload window for the user's current selection.]==],
	throttleadjusttime = [==[If the PhysicsSettings.PhysicsEnvironmentalThrottle is set to <i>DefaultAuto</i>, this specifies the maximum time that the physics environmental throttle has to wait before it is allowed to automatically change.]==],
	loadcharacterblocking = [==[Functions similar to Player:LoadCharacter, but the request is processed synchronously instead of asynchronously.]==],
	manual = [==[Network ownership is set manually by the developer.]==],
	mode = [==[The way the constraint determines its goal.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	registeractivekeyframesequence = [==[Generates a temporary asset ID from a KeyframeSequence that can be used for localized testing of an animation. Generates an <em>active://</em> URL.]==],
	pants = [==[Displays a Pants texture from the Roblox website to display on a Humanoid rig]==],
	played = [==[Fires whenever the Sound is played using the Sound:Play function.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	clickdetector = [==[An object that provides user input on in-world BasePart and Model]==],
	left = [==[Alignment starts at the left side of the GUI object.]==],
	devtouchmovementmode = [==[Lets developer overwrite the player's movement mode if the player is on a touch device.]==],
	receiveage = [==[Time since last recorded physics update]==],
	breakpointadded = [==[Fired when a breakpoint is added to the script.]==],
	gamepad8 = [==[Input from the 8th plugged in Gamepad.]==],
	movingprimitivescount = [==[A measurement of how many physically simulated components are currently moving in the game world.]==],
	centerofmass = [==[Describes the world position in which a part's center of mass is located.]==],
	padding = [==[Determines the empty space between cells.]==],
	webos = [==[The client is running on WebOS.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	scrollbarimagetransparency = [==[Determines the transparency of the rendered scroll bar image]==],
	motor6d = [==[Creates an animatable joint between two BaseParts]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	playing = [==[The tween is currently in progress.]==],
	reactionforceenabled = [==[Enables an equal and opposite reaction force on the parent of Attachment1.]==],
	promptgamepasspurchase = [==[Used to prompt a user to purchase a game pass with the given assetId.]==],
	undo = [==[Undos the last action taken, for which there exists a waypoint.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	reactiontorqueenabled = [==[When true the constraint will apply torque on both Attachments to achieve the goal.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	viewportframe = [==[GuiObject that can display children 3D objects]==],
	classic = [==[Displays chats in the chat user interface at the top-left corner of the screen.]==],
	controllinghumanoid = [==[The Humanoid that is controlling the SkateboardPlatform.]==],
	cframe = [==[The DataType.CFrame of the Camera, defining its position and orientation in the 3D world]==],
	clickableprompt = [==[Whether the prompt can be activated by clicking/tapping on the prompt UI]==],
	g = [==[The green value of the color.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	default = [==[Default priority]==],
	offset = [==[Determines the scalar translation of the gradient from the center of the parent GuiObject.]==],
	displayname = [==[Sets the text of a Humanoid, displayed above their head.]==],
	assemblylinearvelocity = [==[The linear velocity of the part’s assembly]==],
	cubic = [==[Cubic interpolation of first key value and its right tangent and second key value and its left tangent.]==],
	goodbyedialog = [==[Sets the sentence that the dialog will show to the player when the chat ends]==],
	fallanimation = [==[The asset is a fall animation.]==],
	face = [==[Sets what face of the brick the object appears on.]==],
	button1up = [==[Simulates the user releasing the left mouse button.]==],
	new = [==[Returns a ColorSequenceKeypoint from the given time and color.]==],
	touched = [==[Fires when one of the Humanoid limbs come in contact with another BasePart]==],
	textureid = [==[The texture icon that is displayed for a tool in the Player's backpack.]==],
	premium = [==[The player has an active <a href="https://www.roblox.com/premium/membership" target="_new">Premium</a> membership.]==],
	enabled = [==[Determines whether flame particles are emit]==],
	risevelocity = [==[Determines the velocity of the smoke particles]==],
	high = [==[High priority]==],
	done = [==[Prints Testing Done to the output, in blue text.]==],
	pointtoobjectspace = [==[Returns a Vector3 transformed from World to Object space.]==],
	removetargetlocale = [==[Removes all translations from the LocalizationTable with the specified localeId.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	addaccessory = [==[Attaches the specified Accessory to the Humanoid parent]==],
	chat = [==[Fires the Chat.Chatted event with the parameters specified in this method.]==],
	textscaled = [==[Changes whether text is resized to fit within the TextButton.]==],
	zindex = [==[Determines the rendering order when multiple Decals are assigned the same face]==],
	maxforce = [==[The maximum force the SpringConstraint can apply on its Attachment.]==],
	getvalue = [==[Returns the StatsItem's value.]==],
	requestqueuesize = [==[RequestQueueSize gives the number of items in ContentProvider's request queue that need to be loaded.]==],
	timerservice = [==[An internal service responsible for scheduling timed events. It is used by the Debris class. Its functionality can not be accessed by developers.]==],
	promptbuttonholdbegan = [==[Triggered when a player begins holding down the ProximityPrompt.KeyboardKeyCode/button connected to a prompt with a non-zero ProximityPrompt.HoldDuration]==],
	respawntime = [==[Controls the amount of time taken for a players character to respawn]==],
	keypoints = [==[An array of keypoints within the NumberSequence.]==],
	depth = [==[Controls how much the volume will raise and lower.]==],
	tooltip = [==[Controls the message displayed when the player's mouse hovers over the tool in their backpack]==],
	findservice = [==[Returns the service specified by the given className if it's already created, errors for an invalid name.]==],
	lineheight = [==[Scales the spacing between lines of text in the TextLabel]==],
	cross = [==[Returns the cross product of the two vectors.]==],
	leftleg = [==[If the limb is a part of the Humanoid's Torso. <em>This includes UpperLeftLeg and LowerLeftLeg for R16 rigs.</em>]==],
	p = [==[Determines how aggressive of a torque is applied in reaching the goal orientation]==],
	restitution = [==[How elastic Attachment connected by a SlidingBallConstraint will be when they reach the end of the range specified by SlidingBallConstraint.UpperLimit and SlidingBallConstraint.LowerLimit when SlidingBallConstraint.LimitsEnabled is set to true. Constrained between 0 and 1.]==],
	fillwedge = [==[Fills a wedge-shaped volume of Terrain with the given enum.Material and the area's CFrame and Size.]==],
	rightnosewrinkler = [==[Raises the right nostril, pulls the brow down slightly, and wrinkles on the side of the nose]==],
	pathwaypoint = [==[A description of the steps required to reach the next waypoint in a path.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	skyboxdn = [==[The URL asset link to a picture for the Bottom surface of the sky.]==],
	angle = [==[The angle of which the light is shone from the SurfaceLight.]==],
	getdebuggers = [==[Returns a list of ScriptDebugger present in the game.]==],
	lowerlipsuck = [==[Rolls the lower lip up over the teeth]==],
	getasync = [==[Send an HTTP GET request]==],
	rightleg = [==[A reference to the humanoid's <em>Right Leg</em> part.]==],
	tohex = [==[Returns the hex code of the Color3.]==],
	flooded = [==[Too many teleport requests have been made recently.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	pvadornment = [==[The PVAdornment class is an abstract class of which the inheritors can be adorned to objects of the PVInstance class.]==],
	pointsawarded = [==[Fires when points have been successfully awarded to a player, whilst also passing along the updated balance of points the player has in the current game and all games.]==],
	fireclient = [==[Fires RemoteEvent.OnClientEvent for the specified player.]==],
	script = [==[The script object this debugger is linked to.]==],
	serviceadded = [==[Fired when a service is created.]==],
	active = [==[Determines whether a UI element sinks input]==],
	region3int16 = [==[A Region3 stored as two boundaries as opposed to position and size components.]==],
	getkeyspressed = [==[Returns an array of InputObject associated with the Enum.KeyCode currently being pressed down]==],
	getplayerplaceinstanceasync = [==[Returns the DataModel.PlaceId and DataMode.lJobId of the server the user with the given Player.UserId is in provided it is in the same game as the current place]==],
	getkeyatindex = [==[Returns a copy of a key at a given index.]==],
	tweeninfo = [==[A container of parameters for Tweens.]==],
	inputholdbegin = [==[Fires a signal indicating that the user began pressing the prompt GUI button]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	dockwidgetpluginguiinfo = [==[DockWidgetPluginGuiInfo** is a datatype used to describe details for a DockWidgetPluginGui.]==],
	depthoffieldeffect = [==[Simulates a camera lens by blurring parts of a scene not in focus]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	pirate = [==[The game's genre is set to Pirate.]==],
	linedirection = [==[The normalized datatype.Vector3 direction for constraining the velocity along a line, when LinearVelocity.VelocityConstraintMode is set to <strong>Line</strong>.]==],
	clear = [==[Clears the segments of the trail.]==],
	currenteditor = [==[The <a href="/api-reference/class/Player" class="mw-redirect" title="Player">Player</a> who is currently editing this script. This property is only used when in <a href="/articles/Team-Create" title="Team Create">Team Create</a> mode.]==],
	gamepassservice = [==[A service associated with the legacy game pass system. Use MarketplaceService for all new work]==],
	promptsetfavorite = [==[Prompts the Players.LocalPlayer to favorite or unfavorite the given asset or bundle]==],
	playing = [==[Indicates whether the VideoFrame.Video is currently playing. It can be set to start or pause playback]==],
	setprimarypartcframe = [==[Sets the BasePart.CFrame of the Model's Model.PrimaryPart. All other parts in the model will also be moved and will maintain their orientation and offset respective to the Model.PrimaryPart.]==],
	developmentlanguage = [==[The default IETF tag to use if the ''languageKey'' parameter is excluded from the LocalizationTable:GetString method.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	cosh = [==[Returns the hyperbolic cosine of x.]==],
	angularvelocity = [==[Determines the axis of rotation (direction) and the rotational velocity (magnitude) in radians/s]==],
	brightness = [==[Determines the factor by which the GUI's light is scaled when BillboardGui.LightInfluence is 0.]==],
	rootlocalizationtable = [==[A reference to a LocalizationTable to be used to apply automated localization to this ProximityPrompt’s ProximityPrompt.ActionText and ProximityPrompt.ObjectText]==],
	default = [==[The mouse moves freely around the user's screen.]==],
	ispaused = [==[This read-only property will return true when the Sound is not playing.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	classic = [==[Default mode used by Roblox Core Scripts.]==],
	listversionsasync = [==[Enumerates all versions of a key.]==],
	setminutesaftermidnight = [==[Sets Lighting.TimeOfDay and Lighting.ClockTime to the given number of minutes after midnight]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	skyboxft = [==[The URL link to a picture for the front surface of the skybox.]==],
	inversesquarelaw = [==[When true, the force magnitude is multiplied by the inverse square of the distance.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	transparency = [==[Sets the transparency of the Trail's segments over the trail's Trail.Lifetime.]==],
	lockcurrentposition = [==[The mouse is locked, and cannot move from, it's current position on the user's screen at the time of locking.]==],
	create = [==[Returns a new table populated with many instances of the specified value.]==],
	genericreverb = [==[Sound reverb is changed to a generic reverb effect.]==],
	move = [==[Moves the specified range of elements from one table to another.]==],
	revoke = [==[A player revokes (cancels) a previously invoked (sent) friend request.]==],
	numbersequence = [==[A series of floats across a period of time.]==],
	headshot = [==[The returned thumbnail shows just the headshot (head and up) of the user's avatar.]==],
	animator = [==[The main class responsible for the playback and replication of Animation]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	tooltip = [==[The background color of tooltips, like those seen when hovering over buttons on the ribbon bar or properties in the Properties window]==],
	cleartextonfocus = [==[Determines whether clicking on the TextBox will clear its TextBox.Text property]==],
	new = [==[Creates a new Axes using list of axes and/or faces. NormalIds (faces) are converted to the corresponding axes.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	transparency = [==[Sets the stroke opacity independently of the parent object’s GuiObject.BackgroundTransparency or TextLabel.TextTransparency]==],
	fromlocaltime = [==[Returns a DateTime using the given units from a local time.]==],
	currentangle = [==[Displays the angle that the motor is at in radians.]==],
	icon = [==[The content ID of the image used as the Mouse's icon.]==],
	cframe = [==[The position and rotation of the object relative to its PVAdornment.Adornee.]==],
	beos = [==[The client is running on BeOS.]==],
	bottom = [==[The object is below its parent.]==],
	getactor = [==[Returns the Actor associated with the Instance, usually the first Actor ancestor]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	waitingforserver = [==[The client is waiting for the server to respond to the teleport request.]==],
	archivable = [==[Determines if an Instance can be cloned using Instance:Clone or saved to file.]==],
	getapplieddescription = [==[Returns back a copy of the Humanoid cached HumanoidDescription, which describes its current look]==],
	x = [==[Automatically resize element along X-axis to fit child contents]==],
	currentangle = [==[Displays the current rotation of the motor in radians.]==],
	button2up = [==[Simulates the user releasing the right mouse button.]==],
	ouya = [==[The client is running on an Ouya Operating System (Android-Based).]==],
	teleportasync = [==[The all encompassing method to teleport a player or group of players from one server to another.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	reflectionmetadatafunctions = [==[Acts as a Folder containing information about functions for a ReflectionMetadataClass, and should be parented to it.
ReflectionMetadataMembers that are parented to this object will be perceived as functions under the class this is parented to.]==],
	luawebservice = [==[An internal service, which is responsible for retrieving HTTP data from websites. Used by a range of services, including MarketplaceService, InsertService and HttpService. Its functions cannot be accessed by developers.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	back = [==[The back face of a Part.]==],
	characterjumppower = [==[Determines the starting value of Humanoid.JumpPower for Player.Character]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	flagcaptured = [==[Fires when a player bearing an opposing flag, and having the same Player.TeamColor as the stand, touches the FlagStand.]==],
	replicatedstorage = [==[A container service for objects that are replicated to all game clients.]==],
	motor = [==[Acts the same as a Hinge, but has a grey ring around it and automatically rotates any part connected to it.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	headcolor = [==[Determines the BodyColors.HeadColor3 of a Humanoid when Humanoid:ApplyDescription]==],
	lowerangle = [==[Lower limit for the angle (in degrees) between the reference axis and the SecondaryAxis of Attachment1 around the rotation axis. Value in [-180, 180].]==],
	righttrigger = [==[Right motor trigger.]==],
	getnetworkowner = [==[Returns the current player who is the network owner of this part, or nil in case of the server.]==],
	chinraiserupperlip = [==[Moves the upper lip when ChinRaiser is engaged and touching the upper lip]==],
	celestialbodiesshown = [==[Sets whether the Sun, Moon, and stars will show.]==],
	gridsize = [==[Determines the distance in studs by which studio's drag and move tools move objects each tick]==],
	jumpanimation = [==[The asset is a jump animation.]==],
	getgameplacesasync = [==[Returns a StandardPages object which contains the name and placeId of places within the current 'Game' (otherwise known as a 'Universe').]==],
	removetag = [==[Remove a tag from an object]==],
	health = [==[The CoreGui displaying a player's health.]==],
	sand = [==[Applies to BasePart and Terrain.]==],
	died = [==[Fires when the Humanoid dies]==],
	getcomponents = [==[Returns the values: x, y, z, R00, R01, R02, R10, R11, R12, R20, R21, R22, where R00-R22 represent the 3x3 rotation matrix of the CFrame, and xyz represent the position of the CFrame.]==],
	backpack = [==[The CoreGui displaying a player's backpack (containing a player's tools, gear, etc.).]==],
	graphicstexturecharacter = [==[Rendering of texture composition maps that are generated for Humanoids.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	getcamerayinvertvalue = [==[Returns the camera's Y-invert value.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	environmentdiffusescale = [==[Ambient light that is derived from the environment]==],
	length = [==[A read only property that returns the length (in seconds) of an AnimationTrack. This will return 0 until the animation has fully loaded and thus may not be immediately available.]==],
	change = [==[Occurs each frame an InputObject has already begun interacting with the game and part of its state is changing. For example, a movement of the mouse position, a gamepad thumbstick, gamepad trigger button, or screen touch point.]==],
	r = [==[The red component of the BrickColor (between 0 and 1).]==],
	mud = [==[Applies to Terrain only.]==],
	pyramid = [==[The mesh is a pyramid.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	hasstatus = [==[Returns a boolean based on if a status exists.]==],
	statechanged = [==[Fired when the state of the Humanoid is changed]==],
	steppingmotor = [==[Functions identically to a motor. It may have functioned differently in the past, but that functionality no longer seems to exist]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	isfrozen = [==[Returns true if the given table is frozen and false if it isn't frozen.]==],
	r15 = [==[The R15 character rig.]==],
	text = [==[Determines the string rendered by the UI element.]==],
	menuopened = [==[Fires when the user <b>opens</b> the Roblox coregui escape menu.]==],
	cameraminzoomdistance = [==[The minimum distance the player's camera is allowed to zoom in.]==],
	teleportasyncresult = [==[The return structure of the TeleportAsync function call]==],
	applyimpulse = [==[Apply an impulse to the assembly at the assembly’s BasePart.AssemblyCenterOfMass]==],
	scrollbarimagecolor3 = [==[Determines how a rendered scroll bar image will be colorized]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	topbartransparencychangedsignal = [==[Fires when the transparency of the Topbar CoreGui changes.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	video = [==[The content ID of the video file a VideoFrame object is associated with.]==],
	applyjointvelocities = [==[Computes relative velocities between parts and apply them to Motor6D.Part1. These relative velocity calculations and assignments happen in the order provided.]==],
	internal = [==[General data that doesn't have any categorization. This could be due to either internal reasons, or because it simply isn't being tracked categorically.]==],
	hostwidgetwasrestored = [==[Describes whether the previous state of this DockWidgetPluginGui was restored when it was created.]==],
	volume = [==[Indicates how loud the VideoFrame.Video is currently playing back]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	automatic = [==[The quality level of graphics is determined automatically depending on the client's setting for either game performance or graphic quality.]==],
	timelength = [==[Indicates the length of the VideoFrame.Video in seconds]==],
	slidingballconstraint = [==[A currently unfinished and unavailable type of constraint.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	one = [==[A Vector3 with a value of 1 on every axis.]==],
	clearcomputermovementmodes = [==[Unregisters all ComputerMovementMode enums from the game settings menu.]==],
	resumed = [==[Fires when the Sound is resumed using Sound:Resume.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	palette = [==[Constructs a BrickColor from its palette index.]==],
	failure = [==[The teleport failed for an unknown reason!]==],
	rightparamb = [==[Determines the second parameter for the SurfaceType on the Right face of a part (-X direction)]==],
	getaccessories = [==[Returns a table of an avatar’s current accessories.]==],
	bindtoclose = [==[Binds a function to be called before the game shuts down. The game will wait for all functions bound to complete before shutting down]==],
	cross = [==[Returns the cross product of the two vectors.]==],
	getfriendsonline = [==[Returns a dictionary of online friends]==],
	fromisodate = [==[Returns a DateTime from an ISO 8601 date-time string (in UTC).]==],
	running = [==[Currently running while physics of parts in range are being calculated (e.g. After a jump, close to other players, ...).]==],
	analyticsservice = [==[An internal service used by Roblox to collect analytics from CoreScripts.]==],
	leftleg = [==[Determines the asset ID of the LeftLeg to be applied to the Humanoid]==],
	faceid = [==[Sets what side of the Parent the object is on.]==],
	getpartsobscuringtarget = [==[Returns an array of BasePart that are obscuring the lines of sight between the Camera Camera.CFrame and the <em>castPoints</em>]==],
	game = [==[Member must have no security permissions in order to be shown.]==],
	y = [==[Automatically resize element along Y-axis to fit child contents. Text Objects will only resize along the Y-axis if TextWrapped is enabled]==],
	bindablefunction = [==[An object used to expose one function to other scripts]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	characterleft = [==[The player moved left.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	localscript = [==[An object that runs Lua code on the client (player's computer) instead of the server.]==],
	enabledebugging = [==[Enables the DebuggerManager.]==],
	unbindactivate = [==[Unbind a Enum.KeyCode with a specific Enum.UserInputType from triggering Tool.Activation when bound with ContextActionService:BindActivate]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	overlapparams = [==[A container for parameters used in boundary-querying functions.]==],
	setimage = [==[If <i>actionName</i> key contains a bound action, then <i>image</i> is set as the image of the touch button.]==],
	head = [==[Determines the asset ID of the Head to be applied to the Humanoid]==],
	tongueup = [==[Bends the tongue up]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	size = [==[The size of the file on disk, in bytes]==],
	mouseclick = [==[Fires when a player left clicks on the ClickDetector]==],
	head = [==[The CFrame of the user's head.]==],
	reflectionmetadataenumitem = [==[Contains information about a specific EnumItem embedded within an Enum]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	allowsleep = [==[When set to true, physically simulated objects will stop being simulated if they have little to no motion for a set period of time.]==],
	testservice = [==[A service used by Roblox to run controlled tests of the engine. 
It is available for developers to use, to a limited degree.]==],
	textstrokecolor3 = [==[Determines the color of the text stroke (outline).]==],
	localtransparencymodifier = [==[Acts as a multiplier for the Decal's Decal.Transparency property. The effects are only visible to the local player.]==],
	order = [==[Controls the composition order for layered clothing.]==],
	ninja = [==[The game's genre is set to Ninja.]==],
	math = [==[A library of math functions.]==],
	band = [==[Returns the bitwise <em>and</em> of its operands.]==],
	rightlipstretcher = [==[Stretches the corners of the mouth apart]==],
	frontsurfaceinput = [==[Determines the kind of input for the Front face of a part (-Z direction)]==],
	linethickness = [==[Determines the thickness of the boxes outlines, in studs]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	size = [==[The visualized size of the SlidingBallConstraint.]==],
	density = [==[The mass per unit volume of the part.]==],
	getwatchvalue = [==[Returns the current value of a variable being watched by a DebuggerWatch.]==],
	quart = [==[Similar to Quad and Quint, but at a different speed (See animation).]==],
	bordercolor3 = [==[Determines the color of a GuiObject border]==],
	angularresponsiveness = [==[Specifies the sharpness of the angular servo motor in reaching the CylindricalConstraint.TargetAngle.]==],
	purchasegranted = [==[The purchase has been processed and granted to the user who initiated the purchase request.]==],
	rotation = [==[Determines the range of rotations in degrees for a newly emit particles]==],
	playertohidefrom = [==[Allows you to define a player who is unable to see the BillboardGui.]==],
	specificgravity = [==[The ratio of the part's density to the density of water determined by the BasePart.Material]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	getrecommendedassets = [==[Returns a list of recommendations based on the given Enum.AssetType]==],
	fire = [==[Causes the rocket to fly towards Target.]==],
	getnamefromuseridasync = [==[Sends a query to the Roblox website for the username of an account with a given Player.UserId]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	getconnectedparts = [==[Returns a table of parts connected to the the object by any kind of rigid joint.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	getjoints = [==[Return all Joints or Constraints that is connected to this Part.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	room = [==[Sound reverb is changed to sound like the player is in a room.]==],
	emotesmenu = [==[Allows the Emotes Menu to be disabled using the existing StarterGui.SetCoreGuiEnabled API. Disabling all CoreGui types using /Enum/CoreGuiType/All would also disable the Emotes Menu.]==],
	sit = [==[Forces the character with the specified <a href="/api-reference/class/Humanoid" class="mw-redirect" title="Humanoid">Humanoid</a> to sit in the Seat.]==],
	getmetadata = [==[Gets the custom metadata set with this DataStoreIncrementOptions instance.]==],
	colorcorrectioneffect = [==[Adjusts color-related properties of the rendered world like saturation, tint, brightness, and contrast]==],
	windowfocusreleased = [==[Fires when the user stops interacting with the window of the PluginGui.]==],
	privateserverownerid = [==[Describes the Player.UserId of the Player that owns the Articles/Creating a VIP Server on Roblox|VIP server, if the server is a VIP server]==],
	freefall = [==[The Humanoid is currently freefalling (jumped from a height).]==],
	setaxis = [==[Sets the value of the Attachment's Attachment.Axis]==],
	unbindaction = [==[Unbind an action from input given its name.]==],
	distance = [==[Returns the distance between the given point and the closest point on the Ray.]==],
	model = [==[The asset is a model.]==],
	stop = [==[Stops the Sound. Sets Sound.Playing to false then sets Sound.TimePosition to 0.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	gettagged = [==[Returns a table of objects in the game with a given tag]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	menuclosed = [==[Fires when the user <b>closes</b> the Roblox coregui escape menu.]==],
	left = [==[The user swiped left.]==],
	tonguedown = [==[Bends the tongue down]==],
	deactivate = [==[Simulates the deactivation of a Tool]==],
	getwaypoints = [==[Returns an array of points in the path.]==],
	textboxfocused = [==[Fired when the client focuses on a TextBox]==],
	overlaytextureid = [==[The assetId of the overlay texture. The overlay covers Shirts, Pants, T-Shirts, and the CharacterMesh.BaseTextureId.]==],
	boolvalue = [==[A container object for a single boolean value.]==],
	incrementasync = [==[Increments the value of a key by the provided amount (both must be integers).]==],
	force = [==[The strength and direction of the force.]==],
	torso = [==[A reference to a humanoid's root driving part.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	getcurrentpage = [==[Returns the items on the current page. The keys in the item are determined by the source of this object.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	texturelength = [==[Sets length of texture if Trail.TextureMode is <em>Wrap</em> or <em>Static</em>. If mode is <em>Stretch</em> sets number of times texture will repeat.]==],
	binarystringvalue = [==[An internal type of StringValue object, that stores a BinaryString value.]==],
	statustip = [==[The description of the action, when viewing it from the keyboard shortcuts window in Roblox Studio.]==],
	cornerradius = [==[Determines the radius, in pixels, of the UICorner UIComponent]==],
	datastorekeypages = [==[A special type of Pages object whose pages contain DataStoreKey instances.]==],
	enabled = [==[Toggles the visibility of the LayerCollector.]==],
	surfacegui = [==[Container for GuiObjects that are rendered on the surface of a part]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	cancollidewith = [==[Returns whether the parts can collide with each other.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	size = [==[The 3D size of the Region3.]==],
	enums = [==[A root access point of all datatype.Enums.]==],
	opacity = [==[Determines how opaque smoke particles render]==],
	all = [==[A global message that everyone can receive.]==],
	density = [==[Controls the particulate density of clouds.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	textsize = [==[Determine the line height of text in pixels.]==],
	ubuntu = [==[<style>@import url('https://fonts.googleapis.com/css2?family=Ubuntu');</style>
<p class="text-nowrap" style={{fontFamily: 'Ubuntu', fontSize: '1.65em', margin: '5px 0px'}}>The quick brown fox jumps over the lazy dog.<br />0123456789 , : ! ? # % & ( ) - + =]==],
	padding = [==[Determines the amount of free space between each element.]==],
	fillball = [==[Fills a ball of smooth terrain in a given space]==],
	targetposition = [==[The target position a SlidingBallConstraint will attempt to translate to if its SlidingBallConstraint.ActuatorType is set to Enum.ActuatorType. Measured in studs.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	fireplayerprogressionevent = [==[Fire an event used to track player progression through the game]==],
	audio = [==[The asset is an audio clip.]==],
	angularspeed = [==[The desired angular speed a HingeConstraint with HingeConstraint.ActuatorType set to Enum.ActuatorType will attempt to maintain while rotating towards its HingeConstraint.TargetAngle. Measured in radians/second.]==],
	overridestarterscript = [==[Describes a path to a .lua file that will be ran in place of the default StarterScript.]==],
	assemblyrootpart = [==[A reference to the root part of the assembly]==],
	robotocondensed = [==[<style>@import url('https://fonts.googleapis.com/css2?family=Roboto+Condensed');</style>
<p class="text-nowrap" style={{fontFamily: 'Roboto Condensed', fontSize: '1.65em', margin: '5px 0px'}}>The quick brown fox jumps over the lazy dog.<br />0123456789 , : ! ? # % & ( ) - + =]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	categoryfilter = [==[The category to filter the search by.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	inclinationangle = [==[Direction of the rotation axis as an angle from the x-axis in the xy-plane of Attachment0. Value in [-180, 180].]==],
	localizedtext = [==[Sets whether a TextButton should be GuiBase2d.Localize or not.]==],
	responsedialog = [==[Sets what the NPC will say when the player chooses this DialogChoice.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	forcefield = [==[A ForceField protects a Humanoid from taking damage using the Humanoid:TakeDamage function, and protects BaseParts from having their joints broken due to an Explosion.]==],
	ray = [==[A line with a starting point that casts infinitely in a specific direction.]==],
	badgeservice = [==[Provides information on badges and awards them]==],
	unit = [==[A normalized copy of the vector.]==],
	rightsurface = [==[Determines the type of surface for the Right face of a part (+X direction)]==],
	leftright = [==[Controls whether the feature is shifted to the left, center, or right on the surface.]==],
	gettiltspeed = [==[Returns the current ‘tilt’ speed of the Camera]==],
	mousebutton2down = [==[Fired when the mouse is in the right mouse down state on the GUI object]==],
	maxplayersinternal = [==[Players.MaxPlayers for internal use.]==],
	graphicsparts = [==[Rendering of regular parts.]==],
	datastorelistingpages = [==[A special type of Pages object whose pages contain DataStoreInfo instances.]==],
	capturefocus = [==[Forces the client to focus on the TextBox.]==],
	keyname = [==[The name of the key.]==],
	headlocked = [==[Toggles whether the Camera will automatically track the head motion of a player using a VR device]==],
	usepartcolor = [==[Sets whether the PartOperation can be recolored using the BrickColor property.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	arialbold = [==[<p class="text-nowrap" style={{fontFamily: 'Arial', fontSize: '1.5em', fontWeight: 'bold', margin: '5px 0px'}}>The quick brown fox jumps over the lazy dog.<br />0123456789 , : ! ? # % & ( ) - + =]==],
	timeout = [==[The maximum amount of time that tests are allowed to run for.]==],
	angularrestitution = [==[Restitution of the two limits, or how elastic they are. Value in [0, 1].]==],
	vector3 = [==[A 3D value representing a direction and magnitude.]==],
	scriptable = [==[The player will not respond to default controls; any character movement must be defined in custom scripts.]==],
	fireevent = [==[Report a custom event to PlayFab]==],
	rate = [==[How frequently the pitch variation changes.]==],
	aremechanismsshown = [==[When set to true, every individual mechanism of parts is given a unique color.]==],
	blockmesh = [==[The BlockMesh object applies a 'brick' mesh to the BasePart it is parented to. It behaves identically to a SpecialMesh with SpecialMesh.MeshType set to 'Brick'.]==],
	surfacetransparency = [==[Determines the transparency of the sphere's surface, similar to BasePart.Transparency]==],
	timeposition = [==[Shows the progress in seconds of the Sound. Can be changed to move the playback position of the Sound both before and during playback.]==],
	part0 = [==[The first part connected by the constraint.]==],
	abort = [==[Causes the Rocket to stop moving towards its target, making it fall.]==],
	leftsurface = [==[Determines the type of surface for the Left face of a part (-X direction)]==],
	moveto = [==[Moves the Model.PrimaryPart to the given position. If a primary part has not been specified then the root part of the model will be used.]==],
	aligntype = [==[The constraint's axis alignment type (parallel or perpendicular).]==],
	x = [==[Returns the FloatCurve controlling the X Euler angle channel. It is the first child instance of type FloatCurve named X. If none is found an empty FloatCurve is created.]==],
	len = [==[Returns the length of a string.]==],
	isa = [==[Returns true if an Instance's class matches or inherits from a given class]==],
	outerbox = [==[Dynamically sized collision boxes based on mesh sizes]==],
	ambientreverb = [==[The ambient sound environment preset used by SoundService.]==],
	negateoperation = [==[Creates a CSG part that can be removed from other part via solid modeling]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	childremoved = [==[Fires when a child is removed from this Instance.]==],
	collisiongroup = [==[The CollisionGroup used for the operation.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	lrotate = [==[Returns a number after its bits have been rotated to the left by a given number of times.]==],
	getfvariable = [==[Returns the value of an FVariable, if it exists.]==],
	getprimarypartcframe = [==[Returns the CFrame of the Model's Model.PrimaryPart. This function will throw an error if no primary part exists for the Model.]==],
	characterwalkspeed = [==[Determines the starting value of Humanoid.WalkSpeed for Player.Character]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	filemesh = [==[The FileMesh object applies a mesh to a BasePart when parented to it.  Its properties are inherited by the SpecialMesh object.]==],
	maxvelocity = [==[The maximum amount of velocity able to be reached.]==],
	raycastresult = [==[A container for results from a raycast operation.]==],
	level09 = [==[Graphic quality level 9.]==],
	replacematerial = [==[Replaces the terrain of a material within a region with another material]==],
	videocaptureenabled = [==[Toggles whether or not video capture is enabled.]==],
	onclose = [==[Invoked before the game is shut down. When this callback returns, or the timeout period is hit, the game finishes shutting down.]==],
	computermovementmode = [==[The movement type in-use by the client via Computer input.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	streamingminradius = [==[Minimum distance that content will be streamed to players with high priority]==],
	gettotalmemoryusagemb = [==[Returns the total amount of memory being consumed by the current game session, in megabytes.]==],
	veryfast = [==[0.1 seconds per cycle]==],
	sidechain = [==[Applies a <a rel="nofollow" class="external text" href="https://en.wikipedia.org/wiki/Ducking">ducking</a> effect to the compressor sound effect.<br />
The behavior of the sidechain depends on the `Sound` or `SoundGroup` linked to it.
]==],
	angles = [==[Equivalent to fromEulerAnglesXYZ.]==],
	underwater = [==[Sound reverb makes it sound like the player is under water.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	memorystorequeue = [==[Provides access to a queue within MemoryStore.]==],
	physicssendkbps = [==[In a networked game, this describes roughly how many kilobytes of physics data are being sent by the current instance, per second.]==],
	numplayers = [==[Returns the number of people in the server at the current time]==],
	fire = [==[Fires the BindableEvent, which fires the BindableEvent.Event event]==],
	renamecollisiongroup = [==[Renames specified collision group.]==],
	savedata = [==[Used by an ancient data persistence method to save the user's data]==],
	cancollide = [==[Determines whether a part may collide with other parts.]==],
	addtag = [==[Assign a tag to an object]==],
	fireserver = [==[Fires the RemoteEvent.OnServerEvent event on the server using the arguments specified with an additional player argument at the beginning.]==],
	guilabel = [==[An abstract class for non-interactive 2D user interface elements]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	mousebutton1up = [==[Fired when the left mouse button is released on one of the GUI handles.]==],
	dynamicthumbstick = [==[Change the movement controller to the dynamic thumbstick.]==],
	shoulderaccessory = [==[The asset is a shoulder accessory.]==],
	fieldofview = [==[Sets the angle of the Camera vertical field of view]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	meshcachesize = [==[The size in bytes of the mesh cache.
Defaults to 32 MBs.
]==],
	one = [==[A Vector2 with a value of 1 on every axis.]==],
	getanimations = [==[This function returns an InventoryPages object which can be used to iterate over animations owned by a specific user.]==],
	preloadasync = [==[Yields until all of the assets associated with the given Instance have loaded]==],
	guibase2d = [==[GuiBase2d is an abstract class inherited by 2D GUI Objects.]==],
	getstudiouserid = [==[Returns the studio user’s userId if they're logged in, otherwise returns 0.]==],
	eyeslookright = [==[Moves gaze right]==],
	lefthand = [==[The CFrame of the user's left hand.]==],
	triggeroffset = [==[Sets the offset of the dialog relative to the dialog's parent.]==],
	panunits = [==[Pans the Camera around the Camera.Focus in 45 degree increments around the Y axis]==],
	ldexp = [==[Returns x*2^e (e should be an integer).]==],
	timeofday = [==[A 24 hour string representation of the current time of day used by Lighting.]==],
	lua = [==[The asset is Lua code, for example a ModuleScript.]==],
	partoperation = [==[An abstract class that all parts based on solid modeling inherit from.]==],
	surfacecolor = [==[A BrickColor version of SelectionSphere.SurfaceColor3.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	gravity = [==[Determines the acceleration due to gravity applied to falling BaseParts.]==],
	fillemptyspacerows = [==[Determines whether cells are sized such that they occupy the vertical space of the parent UI element.]==],
	enabled = [==[Toggles whether or not this Constraint is enabled.]==],
	contenttext = [==[A copy of TextLabel.Text that contains exactly what is being rendered by the TextLabel.]==],
	jawleft = [==[Moves mouth and jaw to the left (character left)]==],
	surfacelight = [==[A light source that emits illumination of a specified color and brightness from a face for a specified range.]==],
	color3 = [==[A color value comprised of R, G, and B components.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	limitsenabled = [==[Sets whether the HingeConstraint will limit the range of rotation.]==],
	g = [==[The green component of the BrickColor (between 0 and 1).]==],
	physicsenvironmentalthrottle = [==[Controls the throttle rate of Roblox's physics engine.]==],
	cover = [==[Defines the cloud cover within the overall skyscape layer.]==],
	stateenabledchanged = [==[Fires when Humanoid:SetStateEnabled is called on the Humanoid]==],
	gettimeofkeyframe = [==[Returns the time position of the first Keyframe of the given name in an AnimationTrack.]==],
	delaytime = [==[The amount of time that elapses before tween starts in seconds.]==],
	inout = [==[Controls how the Feature is positioned on it's parent's surface, in correspondence to the Feature's Feature.LeftRight and Feature.TopBottom properties.]==],
	walktopoint = [==[The position that a humanoid is trying to reach, after a call to Humanoid:MoveTo is made.]==],
	changestate = [==[Set the Humanoid to enter the given Enum.HumanoidStateType]==],
	x = [==[Returns the FloatCurve controlling the X channel. It is the first child instance of type FloatCurve named X. If none is found an empty FloatCurve is created.]==],
	size48 = [==[Font size 48.]==],
	reflectionmetadataevents = [==[Acts as a Folder containing information about events for a ReflectionMetadataClass, and should be parented to it.
ReflectionMetadataMembers that are parented to this object will be perceived as events under the class this is parented to.]==],
	decoration = [==[Enables or disables terrain decoration.]==],
	arepartstouchingothers = [==[Returns true if any of the given BasePart are touching any other parts]==],
	findpathasync = [==[Finds a Path between the two provided points]==],
	lineforce = [==[A constraint used to apply a force along a line between two points]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	none = [==[Unknown UserInputType.]==],
	lightinfluence = [==[Determines how much particles are influenced by the the environment light]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	random = [==[Returns a random BrickColor.]==],
	setaccessories = [==[Accepts a table that sets the accessories and related properties for an avatar.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	worldorientation = [==[Describes the orientation (in degrees) of the Attachment relative to the world, rather than the parent of the Attachment.]==],
	createjoinaftermovejoints = [==[Updates all visible joints for the parts assigned by the JointsService:SetJoinAfterMoveTarget and JointsService:SetJoinAfterMoveInstance methods.]==],
	datastoreservice = [==[A game service that gives access to persistent data storage across places in a game]==],
	mousemove = [==[Tries to move the currently dragged part to the point where MouseRay hits another part.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	minvalue = [==[The lowest number that the DoubleConstrainedValue.Value property can be]==],
	decal = [==[The asset is a decal (image).]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	get = [==[Returns an array of currently selected Instances in Roblox Studio.]==],
	head = [==[If the limb is a part of the Humanoid's Head.]==],
	none = [==[The mouse icon behavior is not overridden - default behavior is used.]==],
	customstatusadded = [==[Fired when a status is added to the Humanoid.]==],
	parallelramp = [==[The mesh is a parallel ramp.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	depth = [==[The intensity of the effect.]==],
	toeuleranglesxyz = [==[Returns approximate angles that could be used to generate the CFrame, if angles were applied in Z, Y, X order.]==],
	buttonchanged = [==[Fired when the pressed state of a bound button is changed. This event can be used in conjunction with Controller:GetButton to see whether a bound button is being pressed down or not.]==],
	depth = [==[Controls how intense the effect is.]==],
	animationcontroller = [==[An object which allows animations to be loaded and applied to a character or model in place of a Humanoid when a Humanoid is not needed]==],
	sparklecolor = [==[Determines the color of the sparkle particles.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	quint = [==[Similar to Quad and Quart, but at a different speed (See animation).]==],
	updateasync = [==[Updates a key's value with a new value from the specified callback function.]==],
	brightness = [==[The intensity of illumination in the place.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	height = [==[The Y axis.]==],
	replicationfocus = [==[Sets the part to focus replication around]==],
	transformedcframe = [==[Describes the combined Attachment.CFrame offset of the bone and the current animation offset in the bone local space.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	spread = [==[Determines how wide the sun rays will spread out]==],
	fogstart = [==[The depth from the Workspace.CurrentCamera, in studs, at which fog begins to show.]==],
	floatcurvekey = [==[A time-value pair used with FloatCurve instances.]==],
	encounteredbreak = [==[Fired when a breakpoint is encountered by the script.]==],
	saveplaceasync = [==[Saves the state of the current place.]==],
	tweensizeandposition = [==[Smoothly moves a GUI to a new size and position]==],
	rad = [==[Returns the angle x (given in degrees) in radians.]==],
	farintensity = [==[Intensity of the far field blur]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	create = [==[Creates a new coroutine, with body f. f must be a Lua function.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	gameinvitepromptclosed = [==[Fires when a player closes a game invite prompt]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	sourcesanssemibold = [==[<style>@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:ital,wght@0,300;0,400;0,600;0,700;1,400');</style>
<p class="text-nowrap" style={{fontFamily: 'Source Sans Pro', fontSize: '1.7em', fontWeight: 600, margin: '5px 0px'}}>The quick brown fox jumps over the lazy dog.<br />0123456789 , : ! ? # % & ( ) - + =]==],
	screenorientation = [==[Sets the default Enum.ScreenOrientation for users with mobile devices]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	applyspecificimpulse = [==[Adds ''impulseWorld'' to the SkateboardPlatform's BasePart.Velocity.]==],
	experimentalsolverisenabled = [==[Returns true if the game has the PGS Physics solver enabled.]==],
	sit = [==[Forces the character with the specified <a href="/api-reference/class/Humanoid" class="mw-redirect" title="Humanoid">Humanoid</a> to sit in the VehicleSeat.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	getteleportdata = [==[Returns the teleport data stored in the TeleportOptions instance by TeleportOptions:SetTeleportData]==],
	getboundactioninfo = [==[Get a table of information about a bound action given its name originally passed to ContextActionService:BindAction]==],
	glare = [==[When used with increased Atmosphere.Haze, specifies the glow/glare of the Atmosphere around the sun. More glare results in an increased effect of sunlight cast onto the sky and world.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	fromeuleranglesyxz = [==[Returns a rotated CFrame using angles (rx, ry, rz) in radians. Rotations are applied in Y, X, Z order.]==],
	touchenabled = [==[Describes whether the user’s current device has a touch-screen available]==],
	guibase3d = [==[An abstract class for 3D GUI elements that are rendered in the world.]==],
	getteams = [==[Returns a table containing the game's Team objects. Will only return Team objects that are parented to the Teams service.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	slicecenter = [==[Sets the slice boundaries of a 9-sliced image.]==],
	advanceddragger = [==[An unfinished advanced variant of the Dragger class.]==],
	topparama = [==[Determines the first parameter for the SurfaceType on the Top face of a part (+Y direction)]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	dockwidgetpluginguiinfo = [==[DockWidgetPluginGuiInfo** is a datatype used to describe details for a DockWidgetPluginGui.]==],
	schedulerrate = [==[The current average rate of the task scheduler.]==],
	placeid = [==[Describes the ID of the Articles.Place running on the server]==],
	cframe = [==[A datatype that represents both a 3D position and orientation.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	getnonchatstringforbroadcastasync = [==[Returns the text in a properly filtered manner for all users.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	setmetadata = [==[Sets custom metadata to be associated with the key.]==],
	script = [==[All memory being manipulated and referenced by scripts.]==],
	fast = [==[Compute time using a faster, but less precise method.]==],
	fast = [==[0.25 seconds per cycle]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	inputfieldbackground = [==[The background color of input fields, like those found in the Explorer window]==],
	findfirstancestorwhichisa = [==[Returns the first ancestor of the Instance for whom Instance:IsA returns true for the given className.]==],
	playerconnecting = [==[Fired when a player is connecting to the game.]==],
	streamingsounds = [==[Playback of sounds in-game.]==],
	y = [==[The y-coordinate of the Vector2int16.]==],
	maxdistance = [==[Sets the maximum distance a billboard can be from the camera and still be drawn.]==],
	movedirection = [==[Describes the direction that the Humanoid is walking in, as a unit vector along the X/Z axis.]==],
	updateasync = [==[Refers to GlobalDataStore.UpdateAsync.]==],
	fullscreenchanged = [==[Fires if the user's full screen mode is changed.]==],
	value = [==[Holds a reference to an instance.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	neutral = [==[Causes the dialog to have a blue bar on its left-hand side.]==],
	neckaccessory = [==[The asset is a neck accessory.]==],
	viewer = [==[Name and healthbar will be displayed based on the distance settings of the humanoid viewing them.]==],
	angularvelocity = [==[A DataType.Vector3 force applied to achieve and maintain an angular velocity for the body]==],
	visible = [==[This property determines whether or not the visual effect of an Explosion is shown or not.]==],
	robux = [==[Use Robux.]==],
	x = [==[Whether the X axis is enabled.]==],
	getplayinganimationtracks = [==[Returns an array of all AnimationTrack that are currently being played by the AnimationController.]==],
	stretch = [==[The image is stretched to fit within the element.]==],
	fromnormalid = [==[Returns a Vector3 in the given direction.]==],
	mouseleave = [==[Fired when the mouse leaves the GUI handle.]==],
	limitsenabled = [==[Sets whether the SpringConstraint enforces a minimum and maximum length.]==],
	disconnected = [==[The client is disconnected.]==],
	worldaxis = [==[Represents the direction of the Attachment Attachment.Axis relative to the world, as a unit DataType.Vector3 with a length of ]==],
	createtoolbar = [==[Creates a new PluginToolbar with the given name.]==],
	isscriptstacktracingenabled = [==[Whether or not a stacktrace is displayed in the output for an error.]==],
	computerawpathasync = [==[Computes and returns a Path between two DataType.Vector3. If the given MaxDistance is greater than 512, an error will be thrown. (MaxDistance is too large).]==],
	f1 = [==[Determines the face of a Glue.]==],
	richtext = [==[Determines whether the TextButton renders the TextButton.Text string using rich text formatting.]==],
	zoom = [==[Camera will zoom in until there is nothing between the player and camera.]==],
	value = [==[Used to hold a double value.]==],
	getservice = [==[Returns the service with the requested class name, creating it if it does not exist.]==],
	r15 = [==[Indicates that a character is using the new R15 rig.]==],
	fromeuleranglesxyz = [==[Returns a rotated CFrame using angles (rx, ry, rz) in radians. Rotations are applied in Z, Y, X order.]==],
	tremolosoundeffect = [==[Creates a trembling effect on a sound by varying the volume of the sound up and down.]==],
	preferredplayers = [==[The preferred amount of players for this server.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	delay = [==[The amount of time between echoes.]==],
	getlastinputtype = [==[Returns the Enum.UserInputType associated with the user’s most recent input]==],
	headcolor3 = [==[Sets the color of this limb, as a <a href="/api-reference/datatype/Color3" title="API:Color3"><span>Color3</span></a>.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	texture = [==[A Texture object applies a repeating texture to the face of a BasePart.]==],
	alignposition = [==[A constraint used to apply a force towards a location]==],
	texttransparency = [==[Determines the transparency of rendered text.]==],
	relativexy = [==[The scale of X and Y are independent.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	touchrotate = [==[Fires when a user rotates two fingers on a UserInputService.TouchEnabled device - such as the screen of a mobile device]==],
	addwatch = [==[Adds a watch with the given expression.]==],
	tone = [==[Sets the color of the NPC's speech bubble.]==],
	registerchatcallback = [==[Register a function to be called upon the invocation of some chat system event (Chat:InvokeChatCallback)]==],
	areawakepartshighlighted = [==[When set to true, parts that are actively being physically simulated will have a red outline.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	moontextureid = [==[The texture of the moon while using this skybox.]==],
	value = [==[The Color3 value of the keypoint.]==],
	sourcelocaleid = [==[The locale of source strings]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	size9 = [==[Font size 9.]==],
	userheadcframe = [==[Describes the orientation and position of a user's head, if they are actively using a virtual reality headset]==],
	privateserverid = [==[The private server id of the reserved server that the players are being teleported to]==],
	idled = [==[Usually fired two minutes after the game engine classes the player as idle. Time is the amount of seconds since this point.]==],
	mousebutton1down = [==[Fired when the left mouse button goes down on one of the GUI handles.]==],
	texture = [==[The ContentId of the image to be applied by the Decal.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	getdescendants = [==[Returns an array containing all of the descendants of the instance]==],
	bottom = [==[Alignment starts at the bottom of the GUI object.]==],
	abs = [==[Returns the absolute value of x.]==],
	jointooutsiders = [==[Creates joints between the specified BasePart and any touching parts depending on the parts' surfaces and the specified joint creation mode.]==],
	getemotes = [==[Returns a dictionary of emotes that have been HumanoidDescription:AddEmote or HumanoidDescription:SetEmotes to this description]==],
	radius = [==[The radius of the sphere adornment.]==],
	updatedtime = [==[The date and time the object was last updated.]==],
	toinstance = [==[The teleport destination is an instance of a place.]==],
	jumpanimation = [==[When this description is Humanoid:ApplyDescription to a Humanoid, this determines the Animation.AnimationId to play when its Humanoid:GetState is enum.HumanoidStateType]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	insert = [==[Inserts Instance into Workspace]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	none = [==[Permission data is not available for the current user or group roleset.]==],
	reflectionmetadataproperties = [==[Acts as a Folder containing information about properties for a ReflectionMetadataClass, and should be parented to it.
ReflectionMetadataMembers that are parented to this object will be perceived as properties under the class this is parented to.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	texttransparency = [==[Determines the transparency of rendered text.]==],
	mouse = [==[Legacy object that contains members useful for pointer input]==],
	flatpucker = [==[Also known as lip tightener; brings the corners of the mouth inward and pressing the lips back against the teeth]==],
	plugindragdropped = [==[Fires when the user releases their mouse when hovering over a PluginGui during a drag operation started by Plugin:StartDrag]==],
	devicerotationchanged = [==[Fired when a user rotates a device that has a gyroscope]==],
	frictionweight = [==[The importance of the part's friction when calculating the friction with the colliding part.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	datacost = [==[The cost of saving the instance using data persistence.]==],
	mode = [==[The way the constraint determines its goal orientation.]==],
	level20 = [==[Graphic quality level 20.]==],
	autolocalize = [==[Whether the prompt’s ProximityPrompt.ActionText and ProximityPrompt.ObjectText will be localized according to the ProximityPrompt.RootLocalizationTable]==],
	getdeviceacceleration = [==[Returns an InputObject that describes the device's current acceleration]==],
	datastorekey = [==[Object representing a key on a DataStoreKeyPages object.]==],
	quarry = [==[Sound reverb is changed to sound like the player is in a quarry.]==],
	breakjoints = [==[Goes through all BaseParts given, breaking any joints connected to these parts.]==],
	enablemouselockoption = [==[Determines if a player can toggle mouse lock by default.]==],
	getusercframe = [==[Returns a DataType.CFrame describing the position and orientation of a specified virtual reality device]==],
	zaxis = [==[A Vector3 with a value of 1 on the Z axis.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	leftlipstretcher = [==[Stretches the corners of the mouth apart]==],
	color = [==[The color of the constraint.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	alternatingsupports = [==[Truss beams contain alternating supports.]==],
	maxforce = [==[Maximum absolute force that can be applied.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	enabled = [==[Sets whether or not the SpawnLocation is enabled. When disabled players cannot spawn at the SpawnLocation and the AllowTeamChangeOnTouch functionality is disabled.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	middle = [==[As GuiObject.BorderSizePixel increases, the border grows evenly inward and outward. The dimensions of the GuiObject's contents are reduced at a 1:1 ratio.]==],
	played = [==[Fires whenever the VideoFrame.Video is played using the VideoFrame:Play function or by setting VideoFrame.Playing to true]==],
	rotation = [==[The rotation of the part in degrees for the three axes]==],
	gettouchingparts = [==[Returns a table of all BasePart.CanCollide true parts that intersect with this part]==],
	leftupperlipraiser = [==[Raises the left upper lip away from the lower lip revealing the upper teeth]==],
	bottomparamb = [==[Determines the second parameter for the SurfaceType on the Bottom face of a part (-Y direction)]==],
	remove = [==[Removes the specified element from the array, shifting later elements down to fill in the empty space if possible.]==],
	air = [==[Applies to Terrain only.]==],
	woodplanks = [==[Applies to BasePart and Terrain.]==],
	getmarkerreachedsignal = [==[This function returns an DataType.RBXScriptSignal that fires when a specified KeyframeMarker has been hit in an Animation]==],
	filterdescendantsinstances = [==[An array of objects whose descendants will be used in filtering raycasting candidates.]==],
	max = [==[Returns a Vector3 where each component is the highest among the respective components of the provided Vector3s.]==],
	faces = [==[Sets which sides the GUI handles will appear.]==],
	enabled = [==[Determines whether sparkles are emit]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	rightarmcolor = [==[Determines the BodyColors.RightArmColor3 of a Humanoid when applied]==],
	shownativeinput = [==[If set to true, input native to the platform is used instead of Roblox's built-in keyboard.]==],
	didloop = [==[This event fires when an AnimationTrack loops on the next update following the end of the previous animation loop.]==],
	require = [==[Returns the value that was returned by the given ModuleScript, running it if it has not been run yet.]==],
	getmoonphase = [==[Returns the moon's current phase]==],
	transparency = [==[Determines how much a part can be seen through (the inverse of part opacity)]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	permissionlevelshown = [==[Sets the highest permission level that APIs have to have in order to be shown in the Object Browser.
See Enum.PermissionLevelShown for more info.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	transform = [==[Determines the current animated offset of the bone in its local space]==],
	controller = [==[The base class for controller objects, such as the HumanoidController object.]==],
	size100x100 = [==[Thumbnail resolution is 100 pixels x 100 pixels.]==],
	getfreedecals = [==[Retrieves a list of Free Decals from the Catalog]==],
	rightsurfaceinput = [==[Determines the kind of input for the Right face of a part (-X direction)]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	getusersets = [==[Returns an array of dictionaries, containing information about sets owned by the user.]==],
	frommatrix = [==[Returns a CFrame from a translation and the columns of a rotation matrix.]==],
	serverscriptservice = [==[A container service for server-only Script objects.]==],
	snow = [==[Applies to Terrain only.]==],
	connectionfailed = [==[Fired if the client fails to connect to the server.]==],
	placeholdercolor3 = [==[Sets the text color that gets used when no text has been entered into the TextBox yet.]==],
	maxtorque = [==[The maximum torque the constraint can use to reach its goal.]==],
	steer = [==[The direction of movement, tied to the keys A and D. Must be one of 1 (right), 0 (straight), or -1 (left). Will refresh back to 0 unless constantly set.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	enabled = [==[Toggles rendering of the Clouds object.]==],
	baseplayergui = [==[The BasePlayerGui is an abstract class which the GUI drawing storage classes inherit from]==],
	localizedtext = [==[Sets whether a TextLabel should be GuiBase2d.Localize or not.]==],
	collisiongroup = [==[The CollisionGroup used for the operation.]==],
	setplaceid = [==[Sets the DataModel.PlaceId of the current game instance to the given <em>placeId</em>]==],
	arejointcoordinatesshown = [==[When set to true, XYZ axes are rendered at the BasePart.CFrame of every part.]==],
	crackedlava = [==[Applies to Terrain only.]==],
	play = [==[The Play function starts the playback of its Tween. Note that if a tween has already begun calling Play will have no effect unless the tween has finished or has been stopped (either by TweenBase:Cancel or TweenBase:Pause).]==],
	attack = [==[The time the effect takes to become active after its Threshold has be reached.]==],
	region3 = [==[A datatype that describes a rectangular volume in 3D space.]==],
	colorsequence = [==[A gradient of color values comprised of datatype.ColorSequenceKeypoints.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	size = [==[Determines the radius of the bloom in pixels]==],
	clone = [==[Returns a new Random object with the same state as the original.]==],
	limitsenabled = [==[Determines whether RodConstraint.LimitAngle0 and RodConstraint.LimitAngle1 control the angles between the rod and the respective attachments]==],
	frontaccessory = [==[The asset is a front accessory.]==],
	darkgray = [==[Returns the BrickColor Dark stone grey.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	physicsreceivekbps = [==[In a networked game, this describes roughly how many kilobytes of physics data are being received by the current instance, per second.]==],
	gettouchpadmode = [==[Returns the VRTouchpadMode indicating the mode of a specified VRTouchpad.]==],
	getnetworkping = [==[Returns the engine-calculated latency in seconds]==],
	maxtorque = [==[Determines how much force can be applied to each axis]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	ikmoveto = [==[Moves the specified part to the specified location via inverse kinematics rather than moving it there directly, to ensure any joints, constraints, or collisions that part is participating in remain physically satisfied]==],
	adornee = [==[The <a href="/api-reference/class/PVInstance" class="mw-redirect" title="PVInstance">PVInstance</a> the PVAdornment is attached to.]==],
	debuggingenabled = [==[Whether the debugger is enabled or disabled.]==],
	pants = [==[The asset is a pants item.]==],
	httpcache = [==[A cache of HTTP responses.]==],
	setcell = [==[Sets the occupancy and material of a specific terrain voxel.]==],
	statusbar = [==[The color of the status bar shown at the bottom of Studio, if it is visible]==],
	maxangularvelocity = [==[The maximum angular velocity the constraint can use to reach its goal.]==],
	removekeyatindex = [==[Removes a given number of Keys starting from a given index. Returns the number of keys that were removed.]==],
	y = [==[Canvas can only be scrolled along the Y axis]==],
	localizationtable = [==[A LocalizationTable is a database of translations. It contains source strings and translations for various languages.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	r = [==[The red value of the color.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	attachment0 = [==[Determines where the Trail will start drawing its segments.]==],
	glue = [==[Glue is a type of joint that can break when enough force is applied]==],
	colorsequencekeypoint = [==[A color and time value that represents a keypoint in a datatype.ColorSequence.]==],
	bottom = [==[Whether the bottom face is included.]==],
	autojumpenabled = [==[Determines whether the character of a player using a mobile device will automatically jump upon hitting an obstacle.]==],
	ambient = [==[The lighting hue applied to the area within the ViewportFrame]==],
	motormaxangularacceleration = [==[The maximum angular acceleration of the motor in radians per second squared. Value in [0, inf).]==],
	image = [==[The image to draw for the adornment.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	modalenabled = [==[Toggles whether Roblox's mobile controls are hidden on mobile devices]==],
	responsiveness = [==[Controls how quickly the constraint reaches its goal. Higher values will cause the attachment(s) to align more rapidly. Value can be between 5 and 200.]==],
	imagecolor3 = [==[Determines how a rendered image will be colorized]==],
	activate = [==[Sets the state of the calling plugin to activated]==],
	studio = [==[Member must have security permissions &lt;= <strong>LocalUserSecurity</strong> to be shown.]==],
	select = [==[Returns all arguments after the given index.]==],
	backaccessory = [==[A comma-separated list of asset IDs that will be added as Accessory to a Humanoid rig when Humanoid:ApplyDescription, usually those attached to its back (such as capes)]==],
	blureffect = [==[Applies a blur to the entire game world]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	layercollector = [==[An abstract class inherited by 2D Gui Objects which render GuiObject in layers.]==],
	getgamepadstate = [==[Returns an array of InputObject for all available inputs on the given gamepad, representing each input’s last input state]==],
	gamepaddisconnected = [==[Fires when a gamepad is disconnected from the client. Passes the Enum.UserInputType of the gamepad that was disconnected]==],
	camerasubject = [==[The Humanoid or BasePart that is the Camera subject]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	animation = [==[An object that references an animation asset (AnimationId) which can be loaded by a Humanoid or AnimationController]==],
	starterpack = [==[A service-level container whose contents are copied into each Player's Backpack when the player spawns. It is generally used to hold Tools, but is sometimes used to hold LocalScripts to ensure that each player gets a copy.]==],
	accessorytype = [==[Specifies the AccessoryType of the Accessory (eg. Hat, Tshirt, Waist).]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	rightarm = [==[Determines the asset ID of the RightArm to be applied to the Humanoid]==],
	intensity = [==[Determines the additive blending intensity]==],
	uicorner = [==[A UIComponent that will apply deformation to shapes of corners of its parent GuiObject]==],
	texteditable = [==[Determines whether the user can change the TextBox.Text.]==],
	fmod = [==[Returns the remainder of the division of x by y that rounds the quotient towards zero.]==],
	videoadclosed = [==[Historically fired when an `AdService video closed]==],
	reservedserveraccesscode = [==[The reserved server access code that indicates the reserved server that the teleport should be to]==],
	keyframesequenceprovider = [==[The KeyframeSequenceProvider is a service that is used to load and preview KeyframeSequences. It includes a number of functions that are useful when working with Animations.]==],
	customphysicalproperties = [==[Determines several physical properties of a part]==],
	gripforward = [==[One of the properties that specifies a Tool's orientation in a character's hand. This represents the R02, R12, and R22 values of the Grip CFrame's rotation matrix]==],
	size14 = [==[Font size 14.]==],
	coils = [==[The number of coils visualized on the SpringConstraint. This can only be set between 0 and 8.]==],
	setkeys = [==[Resets this curve keys using the RotationCurveKey array passed as argument.]==],
	allowinsertfreemodels = [==[Indicates whether ''Free Models'' can be inserted into the game]==],
	right = [==[The right face of a Part.]==],
	identity = [==[An identity CFrame, one with no translation or rotation.]==],
	rolloffscale = [==[Sets how fast 3D Sound volume attenuates, or 'rolls off'.]==],
	origin = [==[A DataType.CFrame positioned at the Workspace.CurrentCamera and oriented toward the Mouse's 3D position.]==],
	fredokaone = [==[<style>@import url('https://fonts.googleapis.com/css2?family=Fredoka+One');</style>
<p class="text-nowrap" style={{fontFamily: 'Fredoka One', fontSize: '1.6em', margin: '5px 0px'}}>The quick brown fox jumps over the lazy dog.<br />0123456789 , : ! ? # % & ( ) - + =]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	z = [==[The z-coordinate of the Vector3.]==],
	locked = [==[Determines whether a part is selectable in Studio.]==],
	getpointcoordinates = [==[Returns a table of Path instances]==],
	completed = [==[The Tween has successfully completed.]==],
	jobcount = [==[Returns the number of internal DataModel jobs actively being processed.]==],
	townandcity = [==[The game's genre is set to Town and City.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	climbanimation = [==[When this description is Humanoid:ApplyDescription to a Humanoid, this determines the Animation.AnimationId to play when its Humanoid:GetState is enum.HumanoidStateType]==],
	tab = [==[The color of tabs on the tab bar, like the ones opened when the script editor is opened]==],
	resume = [==[Resumes the Lua Debugger if it paused.]==],
	amaticsc = [==[<style>@import url('https://fonts.googleapis.com/css2?family=Amatic+SC');</style>
<p class="text-nowrap" style={{fontFamily: 'Amatic SC', fontSize: '1.9em', margin: '5px 0px'}}>The quick brown fox jumps over the lazy dog.<br />0123456789 , : ! ? # % & ( ) - + =]==],
	grenzegotisch = [==[<style>@import url('https://fonts.googleapis.com/css2?family=Grenze+Gotisch');</style>
<p class="text-nowrap" style={{fontFamily: 'Grenze Gotisch', fontSize: '1.95em', margin: '5px 0px'}}>The quick brown fox jumps over the lazy dog.<br />0123456789 , : ! ? # % & ( ) - + =]==],
	shadowcolor = [==[This is supposed to change the color of player shadows, but currently doesn't do anything.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	gridsize = [==[Returns the grid size the user has set in studio under the Model tab.]==],
	thirdpartypurchasefinished = [==[Fires when a third-party purchase has been completed.]==],
	warncount = [==[Measures how many warning calls have been recorded in the test session.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	touchrotate = [==[Fires when the player performs a rotation gesture using two fingers on the UI element]==],
	label = [==[The name of the navigation area inside or on top of the Part volume]==],
	jura = [==[<style>@import url('https://fonts.googleapis.com/css2?family= Jura');</style>
<p class="text-nowrap" style={{fontFamily: 'Jura', fontSize: '1.75em', margin: '5px 0px'}}>The quick brown fox jumps over the lazy dog.<br />0123456789 , : ! ? # % & ( ) - + =]==],
	datastoreversionpages = [==[A special type of Pages object whose pages contain DataStoreObjectVersionInfo instances.]==],
	selected = [==[A boolean property which indicates whether the object has been selected]==],
	devcomputermovementmode = [==[Determines player's character movement mode when using a desktop version of Roblox.]==],
	clickablewhenviewporthidden = [==[Determines whether the button can be clicked when the game viewport is hidden, such as while editing a script in a different Studio tab]==],
	findpartonray = [==[Returns the first BasePart or Terrain cell intersecting with the given DataType.Ray]==],
	skin = [==[Historically changed the colors of body parts to match the Skin.SkinColor property. Superceded by the BodyColors class.]==],
	basalt = [==[Applies to Terrain only.]==],
	arecontactpointsshown = [==[When set to true, sphere adorns will be drawn at the contact points of each part where physics interactions are occurring.]==],
	userownsgamepassasync = [==[Returns true if the player with the given Player.UserId owns the game pass with the given game pass ID.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	ribbonbutton = [==[The background color of buttons on the ribbon menu]==],
	onscreenkeyboardvisible = [==[Describes  whether an on-screen keyboard is currently visible on the user's screen]==],
	worldtocell = [==[Returns the grid cell location that contains the point <b>position</b>.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	title = [==[The text to be displayed when used as a sub menu]==],
	rightlipcornerpuller = [==[Raises the corners of the mouth upwards in a smile]==],
	maxtorque = [==[Maximum allowable torque provided by the spring]==],
	maxforce = [==[Maximum force the constraint can apply to achieve its goal. Only used if RigidityEnabled is false.]==],
	marketplaceservice = [==[The game service responsible for in-game transactions]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	maxvisiblegraphemes = [==[The maximum number of graphemes the TextLabel can show.]==],
	enabled = [==[Determines whether the two constrained parts will collide with each other]==],
	righthand = [==[Right hand.]==],
	cellpadding = [==[Determines how much space there is between elements in the grid.]==],
	mousebutton1up = [==[Fired when the left mouse button is released on one of the GUI handles.]==],
	geometry = [==[An internal Roblox service which cannot be used by developers.]==],
	navigationenhancers = [==[Gear with the 'Navigation' attribute.
<img alt="Navigation Attribute" src="/assets/bltb4bbcb97611d3ab5/GearType_Navigation.png" />]==],
	elasticbehavior = [==[Determines how elastic scrolling behaves for touch input]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	gyroscopeenabled = [==[Describes whether the user's device has a gyroscope]==],
	scriptsdisabled = [==[Sets whether BaseScript objects run their code. Scripts that are already running won't stop running.]==],
	blue = [==[Blue chat color.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	verticalscrollbarposition = [==[Indicates the side that the vertical scrollbar will be located at.]==],
	constant = [==[The value of the first key]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	enabled = [==[Determines whether the stroke in visible]==],
	new = [==[Returns a PathWaypoint object from the position and action provided.]==],
	leftarmcolor = [==[Determines the BodyColors.LeftArmColor3 of a Humanoid when applied]==],
	autolocalize = [==[When set to true, localization will be applied to this GuiBase2d and its descendants based on the GuiBase2d.RootLocalizationTable specified for this GuiBase2d.]==],
	releasefocus = [==[Forces the client to unfocus the TextBox.]==],
	vectorvelocity = [==[datatype.Vector3 velocity value when LinearVelocity.VelocityConstraintMode is set to <strong>Vector</strong>.]==],
	linkedsource = [==[The content ID of an uploaded script. When set binds the uploaded code to the script's Script.Source.]==],
	salt = [==[Applies to Terrain only.]==],
	textstroketransparency = [==[Determines the transparency of the text stroke (outline).]==],
	mousemoved = [==[Fires whenever a user moves their mouse while it is inside a GUI element]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	envelope = [==[The amount of variance allowed from the value.]==],
	max = [==[Returns a Vector2 where each component is the highest among the respective components of the provided Vector2s.]==],
	texture = [==[Sets the texture to be displayed on the FloorWire.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	vulkan = [==[Vulkan (Khronos Group)]==],
	dot = [==[Returns a scalar dot product of the two vectors.]==],
	canceled = [==[The tween was cancelled before completion]==],
	settings = [==[Returns the GlobalSettings object, which can be used to access settings objects that configure Roblox Studio's behavior.]==],
	numbersequencekeypoint = [==[A keypoint within a NumberSequence with a particular time, value, and envelope size.]==],
	vector3value = [==[A container object for a single Vector3 value.]==],
	leftleg = [==[A reference to the humanoid's <em>Left Leg</em> part.]==],
	usecsgv2 = [==[If set to true, version 2 of Roblox's CSG solver will be used instead of version 1.]==],
	followuserid = [==[Describes the user ID of the player who was followed into a game by a player.]==],
	restitution = [==[The restitution coefficient of the cone constraint]==],
	devtouchmovementmode = [==[Determines player's character movement mode when using a touch device.]==],
	debuggerbreakpoint = [==[Represents a breakpoint in Roblox's Lua Debugger.
This object cannot be created, but it can be retrieved from the ScriptDebugger class.]==],
	back = [==[Whether the back face is included.]==],
	red = [==[Red chat color.]==],
	textscaled = [==[Changes whether text is resized to fit the GUI object that renders it.]==],
	lippresser = [==[Presses the lips together]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	getmaxcollisiongroups = [==[Returns the maximum number of collision groups.]==],
	invoke = [==[Calls the BindableFunction.OnInvoke callback of the BindableFunction, returning any values if there were any]==],
	createplaceasync = [==[Clones a place with placeId equal to given templatePlaceId.]==],
	value = [==[Used to hold a <a href="/api-reference/datatype/BrickColor" title="BrickColor">BrickColor</a> value.]==],
	minsize = [==[The smallest size in pixels the object is allowed to be.]==],
	diamondplate = [==[Applies to BasePart only.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	sourcesansitalic = [==[<style>@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:ital,wght@0,300;0,400;0,600;0,700;1,400');</style>
<p class="text-nowrap" style={{fontFamily: 'Source Sans Pro', fontSize: '1.7em', margin: '5px 0px'}}><i>The quick brown fox jumps over the lazy dog.<br />0123456789 , : ! ? # % & ( ) - + =</i>]==],
	value = [==[The value of this key.]==],
	alwaysontop = [==[Determines whether the BillboardGui will always be rendered on top of other objects.]==],
	singleplayer = [==[Only one player can interact with this dialog at a time. The conversation between the player and dialog can be seen by all players.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	maxvelocity = [==[Maximum speed the Attachment can move when converging. Only used if RigidityEnabled is false.]==],
	registertouchcameramovementmode = [==[Registers that a touch camera movement mode is available to be selected from the game menu.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	isplaying = [==[A read only property that returns true when the AnimationTrack is playing.]==],
	firelogevent = [==[Fire a log event used to track errors and warnings experienced by players]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	explorerimageindex = [==[A number index, which refers to a specific class icon.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	elasticityweight = [==[The importance of the part's elasticity when calculating the elasticity with the colliding part.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	systemlocaleid = [==[The locale id that the local player has set for their operating system.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	rightmouseclick = [==[Fires when a player right clicks on the ClickDetector]==],
	playerhaspass = [==[Returns <em>true</em> if the Player has the specified legacy game pass. Does not work with new game passes]==],
	showboundingboxes = [==[If set to true, renders bounding boxes around each individual rendered entity in the scene.]==],
	size32 = [==[Font size 32.]==],
	inset = [==[The object's located is inset from its parent's location.]==],
	createdtime = [==[The date and time the object was created.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	textyalignment = [==[Determines the vertical alignment of rendered text.]==],
	camera = [==[A class which defines a view of the 3D game world.]==],
	fire = [==[A particle emitter with the visual aesthetic of fire]==],
	name = [==[The name associated with the BrickColor.]==],
	offsetstudsu = [==[Determines the offset in studs of the rendered texture's horizontal coordinate.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	level03 = [==[Graphic quality level 3.]==],
	characterusejumppower = [==[Determines the starting state of Humanoid.UseJumpPower for Player.Character]==],
	haze = [==[Defines the haziness of the Atmosphere with a visible effect both above the horizon and into the distance.]==],
	istreeshown = [==[When set to true, the joint connections of each part, and the states of their underlying primitive components are visualized as a spanning tree.]==],
	frontparamb = [==[Determines the second parameter for the SurfaceType on the Front face of a part (-Z direction)]==],
	r6 = [==[Indicates that a character is using the legacy R6 rig.]==],
	namedisplaydistance = [==[Sets the distance at which this player will see other Humanoid’s names. If set to 0, names are hidden.]==],
	animationplayed = [==[Fires when an AnimationTrack begins playing on the Humanoid]==],
	stats = [==[Returns the Stats service.]==],
	pluginmanager = [==[Refers to the PluginManager, a deprecated singleton that was previously required to create plugins.]==],
	velocity = [==[Determines a part's change in position over time]==],
	keyup = [==[Fires when a Key is released]==],
	debuggermanager = [==[Refers to the DebuggerManager, which acts as an interface for the Lua debugger feature.]==],
	leftlowerleg = [==[Reference to a Humanoid's LeftLowerLeg.]==],
	signals = [==[Events, signals, connections, etc.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	tostring = [==[Returns the provided value converted to a string, or nil if impossible.]==],
	scrollbar = [==[The ScrollingFrame will only be insetted if this scrollbar is being shown.]==],
	received = [==[Fired when the server has finished replicating the world to the client.]==],
	max = [==[The maximum value of the NumberRange.]==],
	color = [==[Determines the color of the smoke particles]==],
	getawardablepoints = [==[Returns the number of points the current game has available to award to players]==],
	areunalignedpartsshown = [==[When set to true, parts that aren't aligned on the 1x1x1 grid will be outlined yellow.]==],
	maxactivationdistance = [==[The maximum distance a Player’s Player.Character can be from the ProximityPrompt for the prompt to appear]==],
	touchinputenabled = [==[Controls touch scrolling, in case this is a non-interactive layout. Defaults to true.]==],
	actuatortype = [==[Sets whether the translation of the PrismaticConstraint is actuated and, if so, what kind of actuation.]==],
	mouseenter = [==[Fired when a mouse "enters" the GUI handle.]==],
	print = [==[Prints all provided values to the output.]==],
	allowedgeartypechanged = [==[Fires when SetGearSettings is called with a different value for <em>allowedGenres</em>]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	characterremoving = [==[Fired right before a player's character is removed.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	loadstring = [==[Returns the provided code as a function that can be executed.]==],
	uwp = [==[The client is running on UWP.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	error = [==[Halts thread execution and throws an error.]==],
	stopping = [==[Skateboard is stopping, but still moving.]==],
	getuserinfosbyuseridsasync = [==[Returns an array of user information including user name and display name.]==],
	right = [==[Whether the right face is included.]==],
	arebodytypesshown = [==[When set to true, Part will be outlined with a specific color, depending on the state of its root simulation body.]==],
	lerp = [==[Returns a Vector3 linearly interpolated between this Vector3 and the given goal by the given alpha.]==],
	tilesize = [==[Sets the tiling scale of the ImageButton.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	spawn = [==[Calls/resumes a function/coroutine immediately through the engine scheduler.]==],
	blacklist = [==[Every BasePart in the game will be considered <strong>except</strong> those that are descendants of objects in the filter list.]==],
	issmooth = [==[Returns true if the current game is using the smooth terrain system.]==],
	doubleconstrainedvalue = [==[An instance which is used to create a number value which can never be less than the MinValue or more than the MaxValue]==],
	requireshandle = [==[Determines whether a tool functions without a handle]==],
	canuserchatasync = [==[Will return false if the player with the specified Player.UserId is not allowed to chat because of their account settings.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	topsurfaceinput = [==[Determines the kind of input for the Top face of a part (+Y direction)]==],
	meshid = [==[The <strong>MeshId</strong> is the content ID of the mesh that is to be displayed on the MeshPart]==],
	getn = [==[Returns the number of elements in the table passed.]==],
	processreceipt = [==[A callback to process receipts of product purchases.]==],
	lineheight = [==[Scales the spacing between lines of text in the TextBox]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	applyatcenterofmass = [==[When set to false, the force will be applied to the part at the Attachment0’s location. This means that if the attachment is not at the center of the part, it can create a torque on the part]==],
	rect = [==[A value that represents a two-dimensional rectangle.]==],
	freeze = [==[Makes the given table read-only.]==],
	classname = [==[A read-only string representing the class this Instance belongs to]==],
	foreach = [==[Iterates over the provided table, passing the key and value of each iteration over to the provided function.]==],
	find = [==[Returns the index of the first occurrence of needle within haystack starting from init.]==],
	getlargestcutoffdistance = [==[Returns how much the Camera needs to be pushed towards its Camera.Focus in order to make sure there is no obstructions between the Camera.Focus and Camera.CFrame]==],
	concat = [==[Returns the given range of table elements as a string where each element is separated by the given separator.]==],
	packageid = [==[The id of the asset this package corresponds to.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	fontsize = [==[Determines the height in pixels of one line of text]==],
	cansetnetworkownership = [==[Checks whether you can set a BasePart network ownership]==],
	touchpadmodechanged = [==[Fires if the VRTouchpadMode of a VRTouchpad is changed.]==],
	clear = [==[Sets all keys in the given table to nil.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	instance = [==[Holds the constructor for Instances.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	split = [==[Splits a string into parts based on the defined separator character(s), returning a table of ordered results.]==],
	physicalproperties = [==[A container for properties that affect the physical behavior of BaseParts.]==],
	cellsize = [==[Determines the size of each element in the grid.]==],
	match = [==[Looks for the first match of pattern in the string s. If a match is found, it is returned; otherwise, it returns nil. A third, optional numerical argument, init, specifies where to start the search.]==],
	rawget = [==[Gets the real value of table[index], bypassing any metamethods.]==],
	leftleg = [==[The left leg BodyPart.]==],
	removeasync = [==[Removes the specified key while also retaining an accessible version.]==],
	attachment1 = [==[Determines where the Trail will start drawing its segments.]==],
	textbox = [==[A 2D user interface element that displays player-editable text]==],
	linux = [==[The client is running on a Linux Operating System (desktop).]==],
	plate = [==[Increases by a rate of 1 along the x- and z- axes, 0.4 along the y-axis.]==],
	backgroundcolor3 = [==[Determines aGuiObject background color]==],
	new = [==[Creates a new TweenInfo from the provided parameters.]==],
	play = [==[Sets VideoFrame.Playing to true, playing the VideoFrame.Video from the current Video.TimePosition]==],
	lower = [==[Returns a copy of a string with all uppercase letters changed to lowercase.]==],
	color = [==[The color of the emitted light.]==],
	brick = [==[Applies to BasePart and Terrain.]==],
	gmatch = [==[Returns an iterator function that returns the next captures from pattern over the string s each time it's called.]==],
	isloaded = [==[Indicates whether the Image has finished loading from the Roblox website.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	autoassignable = [==[This property determines whether Players will be automatically placed onto the Team when joining. If multiple teams have this property set to true, Roblox will attempt to even the teams out when Players are added.]==],
	selectionsphere = [==[Renders a 3D sphere around its PVAdornment.Adornee]==],
	rawset = [==[Sets the real value of table[index], bypassing any metamethods.]==],
	byte = [==[Returns the internal numerical codes of the characters s[i], s[i+1], ..., s[j]. The default value for i is 1; the default value for j is i. These indices are corrected following the same rules of function string.sub.]==],
	char = [==[Converts zero or more codepoints to UTF-8 byte sequences.]==],
	clock = [==[Returns a high-precision amount of CPU time used by Lua in seconds, intended for use in benchmarking.]==],
	date = [==[Formats the given string with date/time information based on the given time (or if not provided, the value returned by os.time).]==],
	toobjectspace = [==[Returns a CFrame transformed from World to Object space.]==],
	os = [==[This library provides time and date related functions.]==],
	tanh = [==[Returns the hyperbolic tangent of x.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	round = [==[Returns the integer with the smallest difference between it and the given number.]==],
	addpose = [==[This function adds a Pose to the Keyframe by parenting it to the keyframe.]==],
	getallboundactioninfo = [==[Get a table of information about all bound actions (key is the name passed to ContextActionService:BindAction, value is a table from ContextActionService:GetBoundActionInfo when called with the key)]==],
	pow = [==[Returns x^y.]==],
	disabled = [==[No change to gameplay due to streaming region availability]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	compatibility = [==[An approximation of Legacy rendering using newer Future is Bright technology. <a href="https://devforum.roblox.com/t/deprecating-lighting-legacy-introducing-lighting-compatibility/232667">More details</a>
<img alt="Compatibility" src="/assets/bltb74b240924f43951/Technology.Compatibility.jpg" />]==],
	attach = [==[Camera moves with the subject at a fixed offset and will rotate as the subject rotates.]==],
	face = [==[Sets the side of the parent that the SurfaceLight comes from.]==],
	tickcountpreciseoverride = [==[Sets the internal sampling method used to measure elapsed time with consistency across platforms.]==],
	log10 = [==[Returns the base-10 logarithm of x.]==],
	max = [==[The upper bound of the Region3int16.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	floor = [==[Returns the largest integer smaller than or equal to x.]==],
	tick = [==[Returns the amount of time in seconds since the Unix epoch according to this device's time.]==],
	velocityspread = [==[Determines how offset a particle can be fired from the local emitter direction of its parent]==],
	linejoinmode = [==[Determines how corners are interpreted]==],
	soundeffect = [==[SoundEffect is the base class that all other sound effects derive from. A SoundEffect can be applied to either a Sound or SoundGroup by being parented to either.]==],
	level07 = [==[Graphic quality level 7.]==],
	uibase = [==[UIBase is the base class for UI layout and constraint classes.]==],
	deg = [==[Returns the angle x (given in radians) in degrees.]==],
	time = [==[The relative time at which the keypoint is located.]==],
	dynamicrotate = [==[The base class for classic motor joints.]==],
	precise = [==[Specifically set a solid-modeled and mesh part’s level of detail regardless of its distance from the camera (lowest, medium, or highest)]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	enabled = [==[Toggles the constraint on and off.]==],
	rightarm = [==[The asset is a right arm.]==],
	atan = [==[Returns the arc tangent of x (in radians).]==],
	lightingchanged = [==[This event fires when a Lighting property is changed or a Sky is added or removed from Lighting.]==],
	bodygyro = [==[Applies a torque to maintain a constant orientation]==],
	play = [==[Plays the AnimationTrack. Once called an AnimationTrack will play with the specified fadeTime, weight and speed.]==],
	gameplaypaused = [==[Whether player client-side gameplay is currently paused]==],
	promptpurchase = [==[Used to prompt a user to purchase an item with the given assetId.]==],
	applicationurlencoded = [==[The HTTP request data is URL encoded]==],
	getitemdetails = [==[Returns the item details for the given item]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	assettypes = [==[An array containing enum.AssetType values to filter the search by.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	resetmemorycategory = [==[Resets the tag assigned by debug.setmemorycategory to the automatically assigned value (typically, the script name).]==],
	maxslopeangle = [==[The maximum slope angle that a humanoid can walk on without slipping]==],
	setmemorycategory = [==[Assign a custom tag to the current thread's memory category in the Developer Console.]==],
	profileend = [==[Stops profiling for the most recent MicroProfiler label as opened by debug.profilebegin.]==],
	invokeserver = [==[Calls the method bound to the RemoteFunction by RemoteFunction.OnServerInvoke. Use from a LocalScript. Returns what RemoteFunction.OnServerInvoke returns.]==],
	unixtimestamp = [==[The number of seconds between January 1st, 1970 at 00:00 UTC (the Unix epoch).]==],
	automatic = [==[Dynamically control a solid-modeled and mesh part’s level of detail depending on its distance from the camera (see table above)]==],
	planevelocity = [==[datatype.Vector2 value of the velocity in each tangent direction of the plane, when LinearVelocity.VelocityConstraintMode is set to <strong>Plane</strong>.]==],
	debug = [==[This library provides functions useful for debugging and profiling code.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	default = [==[The current default is <b>Fixed</b>.]==],
	yield = [==[Suspends execution of the coroutine.]==],
	animation = [==[The Animation object that was used to create this AnimationTrack.]==],
	status = [==[Returns the status of coroutine co as a string.]==],
	mainbackground = [==[The primary background color used by the ribbon bar and windows]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	waitforchild = [==[Returns the child of the Instance with the given name. If the child does not exist, it will yield the current thread until it does.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	terrain = [==[A reference to the Terrain object parented to the Workspace]==],
	offset = [==[Returns the position (in bytes) where the encoding of the n-th codepoint of s (counting from byte position i)
starts.]==],
	extract = [==[Extract a range of bits from a number and return them as an unsigned number.]==],
	cylindermesh = [==[The CylinderMesh object applies a 'cylinder' mesh to the BasePart it is parented to]==],
	throttle = [==[The direction of movement, tied to the keys W and S. Must be an integer 1 (forward), 0 (null), or -1 (reverse). Will refresh back to 0 unless constantly set.]==],
	usersettings = [==[Returns the UserSettings object, which is used to read information from the current user's game menu settings.]==],
	weld = [==[Makes the side appear with thick diagonal "X"s]==],
	paddingright = [==[The padding to apply on the right side relative to the parent's normal size.]==],
	targetangle = [==[Target angle (in degrees) between the reference axis and the secondary axis of Attachment1 around the rotation axis. Value in [-180, 180].]==],
	segments = [==[Sets how many straight segments the Beam is made up of.]==],
	pivotto = [==[Transforms the PVInstance along with all of its descendant PVInstance such that the pivot is now located at the specified datatype.CFrame.]==],
	attachment1 = [==[The Attachment that is connected to Constraint.Attachment]==],
	listkeysasync = [==[Returns a DataStoreKeyPages object for enumerating through keys of a data store.]==],
	touch = [==[The touchpad is treated as ButtonB if it is the left touchpad, or ButtonA if it is the right touchpad.]==],
	right = [==[The grid is placed starting along the left edge of the parent, extending to the left according to the size of the grid relative to the x-axis.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	touch = [==[A tap on the screen from a mobile device.]==],
	lefttrigger = [==[Left motor trigger.]==],
	small = [==[Small motor.]==],
	right = [==[Right side of the ScrollingFrame.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	bottom = [==[Bottom of the grid.]==],
	size36 = [==[Font size 36.]==],
	vector = [==[Sets the LinearVelocity object to constrain its velocity to a vector.]==],
	plane = [==[Sets the LinearVelocity object to constrain its velocity to a plane.]==],
	line = [==[Sets the LinearVelocity object to constrain its velocity to a line.]==],
	gamepad6 = [==[Input from the 6th plugged in Gamepad.]==],
	gamepad1 = [==[Input from the 1st plugged in Gamepad.]==],
	mousewheel = [==[The mouse wheel.]==],
	mousebutton3 = [==[The middle mouse button.]==],
	pgsisenabled = [==[Returns true if the game has the PGS Physics solver enabled.]==],
	uigridstylelayout = [==[The base class for grid style UI layouts.]==],
	lowgain = [==[The output volume of frequencies lower than 400 Hz.]==],
	accept = [==[A player accepts a friend request.]==],
	worldposition = [==[Describes the position of the attachment relative to the world, rather than the parent of the Attachment]==],
	shouldersaccessory = [==[A comma-separated list of asset IDs that will be added as Accessory to a Humanoid rig when Humanoid:ApplyDescription, usually those attached to its shoulders (such as shoulder-mounted critters)]==],
	size24 = [==[Font size 24.]==],
	funny = [==[The game's genre is set to Funny.]==],
	uimessageinfo = [==[The message info.]==],
	dpad = [==[Change the movement controller to the DPad.]==],
	physicalproperties = [==[A container for properties that affect the physical behavior of BaseParts.]==],
	smoothingangle = [==[An angle in degrees which affects the smooth shading of a solid modeled part.]==],
	steer = [==[The direction of movement, tied to the keys A and D. Must be 1 (right), 0 (straight), or -1 (left). Will refresh back to 0 unless constantly set.]==],
	avatarthumbnail = [==[The returned thumbnail shows the entire body of the user's avatar.]==],
	size150x150 = [==[Thumbnail resolution is 150 pixels x 150 pixels.]==],
	lastinputtypechanged = [==[Fires when the client's Enum.UserInputType is changed]==],
	gettopbartransparency = [==[Returns the transparency of the Topbar.]==],
	center = [==[Aligned starts at the center of the GUI object and spreads equally left and right.]==],
	wrap = [==[The texture will be tiled as the length of the trail changes, but the textures will remain stationary relative to their attachments.
<img alt="The Wrap TextureMode" src="/assets/bltc03da7a8d8b16fb1/Enum_TextureMode_Wrap.gif" />]==],
	stretch = [==[The texture will be stretched out based on the lifetime of the trail, and will shrink inwards if the trail stops moving.
<img alt="The Stretch TextureMode" src="/assets/bltf90e4251e486066f/Enum_TextureMode_Stretch.gif" />]==],
	brickcolor = [==[A data type that provides a predefined list of named colors.]==],
	toreservedserver = [==[The destination of the teleport is a reserved server (a place instance that is reserved for a select group of players).]==],
	autorotate = [==[AutoRotate sets whether or not the Humanoid will automatically rotate to face in the direction they are moving in.]==],
	toplace = [==[The teleport destination is a place (no specific instance).]==],
	goodbyechoiceactive = [==[Toggles whether the goodbye option will be displayed.]==],
	dragger = [==[A helper object used to create tools that can drag parts]==],
	default = [==[Standard throttling.]==],
	failed = [==[The teleport failed.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	requestedfromserver = [==[The server has requested that the client teleport.]==],
	success = [==[The teleport was successful!]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	top = [==[The widget will appear docked above the game screen]==],
	exposurecompensation = [==[The exposure compensation value]==],
	color = [==[Sets color used for the debug rendering. See WrapTarget.DebugMode]==],
	voxel = [==[Future-Is-Bright lighting features. Shadows are created using a 4x4x4 voxel map.
<img alt="Voxel" src="/assets/blt87d45df6d6aacbdc/Technology.Voxel.jpg" />]==],
	righthand = [==[Reference to a Humanoid's RightHand.]==],
	up = [==[The user swiped up.]==],
	policyservice = [==[Helps you build gameplay components for international compliance.]==],
	smoothnooutlines = [==[Same as Smooth, but removes the <em>outlines</em> of the surface]==],
	motor = [==[Acts the same as a Hinge, but has a grey ring around it and automatically rotates any part connected to it, however, using HingeConstraint to join parts is preferred]==],
	hinge = [==[Makes the side appear with a yellow hinge. Any part connected to this hinge will stick to the side and rotate using physics, however, using HingeConstraint to join parts is preferred]==],
	righttangent = [==[The tangent to the right of this key.]==],
	maxplayers = [==[The maximum amount of players that can be in this server.]==],
	corrodedmetal = [==[Applies to BasePart only.]==],
	textyalignment = [==[Determines the vertical alignment of rendered text.]==],
	touchswipe = [==[Fired when a user swipes their fingers on a UserInputService.TouchEnabled device - such as the screen of a mobile device]==],
	teleporttoprivateserver = [==[Teleport a group of Player to a reserved server created using TeleportService:ReserveServer]==],
	smooth = [==[Makes the side appear without any surface detail (except for <em>outlines</em>)]==],
	interpolationfinished = [==[Fired when the Camera has finished interpolating usingCamera:Interpolate]==],
	steppingmotor = [==[Functions identically to a motor. It may have functioned differently in the past, but that functionality no longer seems to exist.]==],
	bridgestylesupports = [==[Truss beams contain bridge style supports.]==],
	part1 = [==[The first BasePart that the constraint connects]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	horizontal = [==[Scrolling along the X-axis (fixed Y-Axis).]==],
	skyboxbk = [==[The URL link to a picture for the back surface of the sky.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	schedulenotification = [==[<b>(UNIMPLEMENTED)</b>]==],
	steerfloat = [==[Functions identically to VehicleSeat.Steer, but the value is not an integer.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	removeemote = [==[Removes any emotes that have been added under the given name]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	promptshown = [==[Triggers client-side when a prompt becomes visible]==],
	character = [==[This should run after Camera]==],
	draggable = [==[Determines whether a GuiObject (and its descendants) can be dragged around the screen]==],
	y = [==[The Y axis]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	getguiobjectsatposition = [==[Returns a list of visible GuiObject occupying the given point on the screen]==],
	enabled = [==[Sets whether the joint is active or not]==],
	arial = [==[<p class="text-nowrap" style={{fontFamily: 'Arial', fontSize: '1.5em', margin: '5px 0px'}}>The quick brown fox jumps over the lazy dog.<br />0123456789 , : ! ? # % & ( ) - + =]==],
	emulatorbar = [==[The color of the bar shown when the mobile emulator is active]==],
	gamesettingstooltip = [==[The color of tooltips in the game settings window]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	rotspeed = [==[Determines the range of angular speeds emitted particles, measured in degrees per second]==],
	head = [==[The mesh is the default Humanoid head mesh.]==],
	promptcreateoutfitcompleted = [==[Fires when the PromptSaveOutfit operation is completed]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	setposition = [==[Given the name of a bound action with a touch button, sets the position of the button within the ContextButtonFrame.]==],
	frontsurface = [==[Determines the type of surface for the Front face of a part (-Z direction)]==],
	issleepallowed = [==[Sets whether or not physics objects will be allowed to fall asleep while the test simulation is running.]==],
	active = [==[Indicates if the WeldConstraint is currently active in the world]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	neon = [==[Applies to BasePart only.]==],
	filtertype = [==[Determines how the FilterDescendantsInstances list will be used.]==],
	stepout = [==[Performs a <a href="/articles/Lua-debugger" class="mw-redirect" title="Lua Debugger">step out</a> operation on the Lua Debugger.]==],
	cancelallnotification = [==[<b>(UNIMPLEMENTED)</b>]==],
	wait = [==[Yields the current thread until the specified amount of time in seconds have elapsed, with throttling.]==],
	begin = [==[Indicates the beginning of progression]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	nextselectiondown = [==[Sets the GuiObject which will be selected when the Gamepad selector is moved in this direction]==],
	bottomright = [==[Grid starts in bottom right corner.]==],
	linearsquare = [==[Volume attenuates between Sound.EmitterSize and Sound.MaxDistance with a linear squared relationship]==],
	studsoffsetworldspace = [==[Determines how the BillboardGui is offset from its BillboardGui.Adornee, relative to the global axes and units in studs.]==],
	maxvelocity = [==[The maximum velocity the motor can use to reach Motor.DesiredAngle measured in radians per physics frame (1/60th of a second).]==],
	promptallowinventoryreadaccess = [==[Prompts the Players.LocalPlayer to allow the developer to read what items the user has in their inventory and other avatar editor related information]==],
	layoutorder = [==[Elements will be ordered by LayoutOrder in ascending order (e.g. 0 will be placed before 1).]==],
	sunrayseffect = [==[Renders dynamic rays from the sun]==],
	position = [==[Determines the goal position towards which force will be applied]==],
	foil = [==[Applies to BasePart only.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	name = [==[Elements will be ordered by their name in alphabetical order (e.g. Apple will be placed before Banana).]==],
	setjoinaftermoveinstance = [==[Sets the PVInstance that will be connected with the target PVInstance specified by JointsService:SetJoinAfterMoveTarget.]==],
	xy = [==[Canvas can be scrolled along both X and Y axes]==],
	getrootpart = [==[Returns the base part of an assembly of parts]==],
	bxor = [==[Returns the bitwise exclusive or of its operands.]==],
	elastic = [==[Moves as if the GUI element is attached to a rubber band (See animation).]==],
	setnavigationgamepad = [==[Sets whether or not the specified Enum.UserInputType can move the GuiObject navigator]==],
	landscapeleft = [==[A preference where the game is displayed landscape (horizontally) with the bottom of the device on the left side of the screen.]==],
	crop = [==[The image is cropped to fit within the element.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	fit = [==[The image is scaled fit within the element X or Y dimension (whichever fits first).]==],
	tile = [==[The image is is tiled to fit within the element. For example, if the element is twice the X dimension of the image, the image will appear twice (2 tiles).]==],
	slice = [==[The part of the image contained within the ImageLabel.SliceCenter or ImageButton.SliceCenter maintains its aspect ratio within the element, while everything outside is stretched and used as borders.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	watchremoved = [==[Fired when an expression watch is removed from this script debugger.]==],
	inversetapered = [==[Volume attenuates between Sound.EmitterSize and Sound.MaxDistance with a linear relationship]==],
	linear = [==[A hybrid model. Follows the Inverse model when close to Sound.EmitterSize and the Linear Square model when close to Sound.MaxDistance]==],
	behaviortype = [==[Sets whether the Dialog can be used by multiple players at once.]==],
	actuatortype = [==[Sets whether the rotation of the HingeConstraint is actuated and, if so, what kind of actuation.]==],
	now = [==[Returns a DateTime representing the current moment in time.]==],
	colormap = [==[Determines the color and opacity of the surface]==],
	motormaxtorque = [==[The maximum torque the motor can apply to achieve the target angular velocity. The units are mass * studs^2 / second^2. Value in [0, inf).]==],
	defaultscriptfiledir = [==[Specifies the default prompt directory that will be opened when the user activates the <i>Execute Script</i> button in Roblox Studio.]==],
	chatred = [==[Causes the frame to appear similar to a Dialog with its Tone property set to "Enemy." Like "ChatBlue" and "ChatGreen" this has a padding of fifteen pixels on all sides.]==],
	sewerpipe = [==[Sound reverb is changed to sound like the player is in a sewer pipe.]==],
	city = [==[Sound reverb is changed to sound like the player is in city.]==],
	forest = [==[Sound reverb is changed to sound like the player is in a forest.]==],
	stonecorridor = [==[Sound reverb is changed to sound like the player is a stone corridor.]==],
	hallway = [==[Sound reverb is changed to sound like the player is in a hallway.]==],
	arena = [==[Sound reverb is changed to sound like the player is in an arena.]==],
	applyangularimpulse = [==[Apply an angular impulse to the assembly]==],
	cave = [==[Sound reverb is changed to sound like the player is in a cave.]==],
	nfcnormalize = [==[Converts the input string to Normal Form C.]==],
	manualsurfacejointinstance = [==[ManualSurfaceJointInstance is the base class for ManualGlue and ManualWeld.]==],
	createlocalplayer = [==[Used by the game to create the Player.LocalPlayer]==],
	clearallchildren = [==[This function destroys all of an Instance's children.]==],
	isvibrationsupported = [==[Returns true if the specified Enum.UserInputType supports haptic feedback]==],
	performance = [==[Push performance as much as possible, trying to maintain quality if possible, and discarding appearance if that's necessary to reach performance. This means that the performance will always be excellent, but mesh visuals may be affected negatively]==],
	benchmark = [==[Dynamically decide between using ''Fast'' and ''Precise'' depending on performance.]==],
	whitelist = [==[Only BasePart which are descendants of objects in the filter list will be considered in the raycast operation.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	level19 = [==[Graphic quality level 19.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	loadcharacterwithhumanoiddescription = [==[Spawns an avatar so it has everything equipped in the passed in HumanoidDescription]==],
	level17 = [==[Graphic quality level 17.]==],
	level15 = [==[Graphic quality level 15.]==],
	userchoice = [==[The player's character will moved based on the user's settings.]==],
	level12 = [==[Graphic quality level 12.]==],
	textwrap = [==[Determines if text wraps to multiple lines within the UI element space, truncating excess text]==],
	level08 = [==[Graphic quality level 8.]==],
	playerremoved = [==[Fires whenever a Player is removed from a Team. This can be due to the Player leaving the game, Player.Neutral being set to true or the Player joining a different team.]==],
	level05 = [==[Graphic quality level 5.]==],
	level01 = [==[Graphic quality level 1 - the lowest quality level.]==],
	custom = [==[Custom prompt UI style as set by the developer. For more information, see ProximityPrompt.Style]==],
	rightvector = [==[The right-direction component of the CFrame's orientation.]==],
	alwaysshow = [==[This prompt will always show when in range and visible]==],
	r6 = [==[The R6 character rig.]==],
	oneperbutton = [==[Only one prompt will be shown with this setting]==],
	close = [==[Fires when the current place is exited.]==],
	jumpheight = [==[Provides control over the force with which a Humanoid jumps]==],
	getpartsinpart = [==[Returns an array of parts whose occupied space is shared with the given part]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	positionalignmentmode = [==[The PositionAlignmentMode Enum is used to select the number of Attachments used in an alignment.]==],
	folder = [==[A simple container used to hold and organize Roblox objects. Unlike other container classes like Model, it offers no additional functionality]==],
	twoattachment = [==[Use two attachments.]==],
	oneattachment = [==[Use one attachment.]==],
	style = [==[Sets what the frame looks like from a selection of pre-determined styles.]==],
	logservice = [==[A service that allows you to read outputted text]==],
	ratio = [==[The ratio between the CompressorSoundEffect.SideChain sound effect, and this sound effect.]==],
	attachmentpoint = [==[The exact CFrame of the Accoutrement.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	whisper = [==[A whispered message only the person it's whispered to can receive.]==],
	datastorepages = [==[A Pages object that allows iteration through OrderedDataStore key/value pairs.]==],
	delayed = [==[The tween is delayed.]==],
	steamos = [==[The client is running on Steam.]==],
	noocclusion = [==[Do not occlude (hide) any humanoid names.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	delay = [==[Schedules a function/coroutine to be called/resumed on the next Heartbeat after the given duration (in seconds) has passed, without throttling.]==],
	wiiu = [==[The client is running on a Wii U (console).]==],
	xbox360 = [==[The client is running on an XBox 360 (console).]==],
	ps4 = [==[The client is running on a PS4 (console).]==],
	deprecated = [==[Whether or not this item is deprecated.]==],
	setwatercell = [==[Sets the specified terrain voxel's material to ''Water'' and sets its occupancy to 1.]==],
	load = [==[Loads a Roblox Place File from a URL.]==],
	loadanimation = [==[Loads an Animation onto an Animator, returning an AnimationTrack. Used to load animations on locally controlled models (such as player characters) from the server.]==],
	world = [==[The constraint is expressed relative to the game world]==],
	rotationcurve = [==[A sorted list of RotationCurveKeys]==],
	localeid = [==[The locale of translated strings]==],
	adaptive = [==[The engine attempts to assign optimal simulation rates for individual assemblies of either 240&nbsp;Hz, 120&nbsp;Hz, or 60&nbsp;Hz. This setting is optimized for performance.]==],
	loadcharacterappearance = [==[Whether or not the appearance of a player's character should be loaded.]==],
	teamcolor = [==[The Team that owns the FlagStand. Corresponds with the TeamColors in the Teams service.]==],
	roblox = [==[Member is shown no matter what security it has.]==],
	instudiomode = [==[Returns true if the client's game session is in Roblox Studio.]==],
	robloxscript = [==[Member must have security permissions &lt;= <strong>RobloxScriptSecurity</strong> to be shown.]==],
	httpservice = [==[Allows sending HTTP requests and provides various web-related functions, including JSON functions]==],
	jump = [==[Jump action needed to reach the next waypoint]==],
	closestoutofrange = [==[Goal is out of MaxDistance range, returns path to closest point you can reach within MaxDistance.]==],
	userinputservice = [==[The UserInputService is a service used to detect the type of input available on a user's device via the use of a LocalScript. The service is also used to detect input events]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	fabric = [==[Applies to BasePart only.]==],
	runservice = [==[Game service responsible for all run-time activity and progression of time]==],
	characterjumpheight = [==[Determines the starting value of Humanoid.JumpHeight for Player.Character]==],
	playerscripts = [==[A container for LocalScripts to be run on the client]==],
	globalshadows = [==[Toggles voxel-based dynamic lighting for the game]==],
	getcurrentvalue = [==[Returns the current value of the reciever's CustomEventReciever.Source property.]==],
	backgroundcolor = [==[Determines the color of a GuiObject background]==],
	mintextsize = [==[The smallest size in pixels the font is allowed to be]==],
	metal = [==[Metal (Apple)]==],
	selection = [==[The Selection service controls the Instances that are selected in Roblox Studio.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	revoked = [==[The current user's or group roleset's permission is revoked.]==],
	arcade = [==[<img src="/assets/blt78f78804de9600d9/Font-Face-Sample-Arcade.png" class="img-fluid half-sized" />]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	leftarm = [==[The asset is a left arm.]==],
	twoattachment = [==[Use two attachments.]==],
	flyweightservice = [==[Internal service with no functionality available to developers.]==],
	oneattachment = [==[Use one attachment.]==],
	currentposition = [==[The current offset between the SlidingBallConstraint's Attachment.]==],
	bottom = [==[The bottom face of a Part.]==],
	serviceremoving = [==[Fired when a service is about to be removed.]==],
	desiredangle = [==[The desired angle to turn the motor to in radians.]==],
	oncontact = [==[The first player to touch a part is given ownership of that part for the server (network). Ownership will not change if another player touches that part unless network ownership has been released by the owner.]==],
	bindoffset = [==[datatype.CFrame is used to adjust a binding point for clothing item mesh. Could be used to move and rotate clothing items. This property is intended for fine-tuning only and it is heavily optional.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	airfree = [==[Skateboard is in the air.]==],
	arepartcoordsshown = [==[An ancient property that hasn't worked correctly since late 2007.
It's supposed to render a large XYZ axis in the center of each BasePart, but the axis rendering component doesn't work correctly.]==],
	cameramode = [==[Changes the default camera's mode to either first or third person.]==],
	occupant = [==[The humanoid that is sitting in the seat]==],
	saveboolean = [==[Used to save a boolean value that can be loaded again at a later time using Player:LoadBoolean]==],
	color = [==[Determines the stroke color]==],
	front = [==[The front face of a Part.]==],
	cornerwedge = [==[The mesh is a corner wedge.]==],
	rightangleramp = [==[The mesh is a right angle ramp.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	prism = [==[The mesh is a prism.]==],
	startdrag = [==[Starts a drag action given a dictionary of parameters]==],
	button = [==[The background color of clickable buttons]==],
	mainbutton = [==[The background color of clickable buttons that are the primary action]==],
	collisionenabled = [==[Returns whether the user enabled <i>Collisions</i> in studio under the Model tab.]==],
	buildersclub = [==[(no longer available)]==],
	water = [==[Applies to Terrain only.]==],
	resuming = [==[Fired when the game is resumed after being paused by a breakpoint.]==],
	glacier = [==[Applies to Terrain only.]==],
	ice = [==[Applies to BasePart and Terrain.]==],
	promptpremiumpurchasefinished = [==[Fires when the Premium purchase modal closes]==],
	asphalt = [==[Applies to Terrain only.]==],
	ground = [==[Applies to Terrain only.]==],
	grass = [==[Applies to BasePart and Terrain.]==],
	veryslow = [==[2 seconds per cycle]==],
	inlet = [==[Makes the side appear with holes where studs would be]==],
	sandstone = [==[Applies to Terrain only.]==],
	follow = [==[Camera tracks the player and automatically rotates if the player walks left or right.]==],
	left = [==[The grid is placed starting along the left edge of the parent, extending to the right according to the size of the grid relative to the x-axis.]==],
	granite = [==[Applies to BasePart only.]==],
	limestone = [==[Applies to Terrain only.]==],
	visit = [==[The Visit service is a backend service used by Roblox. Its functions are not accessible to developers in any form.]==],
	slicecenter = [==[Sets the slice boundaries of a 9-sliced image.]==],
	tool = [==[An object, such as a weapon, that can be equipped by a Humanoid]==],
	fallingdown = [==[The Humanoid has been tripped, and will attempt to get up in a few moments.]==],
	inputended = [==[Fired when a user stops interacting via a Human-Computer Interface device (Mouse button down, touch begin, keyboard button down, etc)]==],
	vertical = [==[Scrolling along the Y-axis (fixed X-Axis).]==],
	unknown = [==[If a part is not a limb (e.g. running the Humanoid.GetLimb function on a BasePart child of a Humanoid will return this Enum).]==],
	leftarm = [==[If the limb is a part of the Humanoid's Torso. <em>This includes UpperLeftArm and LowerLeftArm for R16 rigs.</em>]==],
	cageorigin = [==[Cage mesh offset relative to parent MeshPart.]==],
	right = [==[The object is on the right side of it's parent (x-axis).]==],
	table = [==[A library of table functions.]==],
	legacynamingscheme = [==[Determines whether data stores use a new improved naming scheme]==],
	highgain = [==[The output volume of frequencies greater than 4000 Hz.]==],
	zoffset = [==[The distance, in studs, the Beams display is offset by relative to the Workspace.CurrentCamera.]==],
	hoverimage = [==[A textureId that will be used when ImageButton is being hovered]==],
	widthscale = [==[Determines by what factor the width (left-to-right distance) of a Humanoid is scaled; when Humanoid:ApplyDescription, maps to the "BodyWidthScale" NumberValue within the Humanoid]==],
	instancecount = [==[A measurement of how many Instance are currently in memory.]==],
	displaywhendamaged = [==[The humanoid's health is only visible when the humanoid is damaged - and not at full health. The display is not visible when the humanoid is at full health.]==],
	border = [==[The color of borders, like those found in the Properties window]==],
	setbreakpoint = [==[Sets the specified line of the script as a breakpoint. Returns a DebuggerBreakpoint that you can use to manage the breakpoint.]==],
	lighting = [==[Refers to the game's Lighting service]==],
	sorttype = [==[The order in which to sort the results.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	torso = [==[The mesh is the default Humanoid torso mesh.]==],
	clearjoinaftermovejoints = [==[Will remove any 'create joints' that were made visible via the JointsService:ShowPermissibleJoints method.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	bottomparama = [==[Determines the first parameter for the SurfaceType on the Bottom face of a part (-Y direction)]==],
	assemblyangularvelocity = [==[The angular velocity of the part’s assembly]==],
	leftbrowlowerer = [==[Lowers the left brow down]==],
	width1 = [==[The width in studs of the Beam at its end.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	csgdictionaryservice = [==[CSGDictionaryService is an internal service that stores a cache of BinaryStringValue objects, each value representing a unique data set for solid modeling data.]==],
	enabled = [==[Whether the gradient is enabled or not.]==],
	cancel = [==[The Cancel function halts playback of its Tween and resets the tween variables. If TweenBase:Play is called again the Tween's properties will resume interpolating towards their destination but, as the tween variables have been reset, take the full length of the animation to do so.]==],
	button1down = [==[Simulates the user holding the left mouse button down.]==],
	twistlimitsenabled = [==[Sets whether the BallSocketConstraint sets a limit on twist rotation based on BallSocketConstraint.TwistUpperAngle and BallSocketConstraint.TwistLowerAngle.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	messagingservice = [==[MessagingService allows game servers in the same game to communicate with each other]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	whenscrollable = [==[The scrollbar will be elastic when there is content to be scrolled to]==],
	leftlowerlipdepressor = [==[Lowers the lower lip down away from the upper lip revealing the lower teeth]==],
	paddingtop = [==[The padding to apply on the top side relative to the parent's normal size.]==],
	btest = [==[Returns a boolean describing whether the bitwise and of its operands is different from zero.]==],
	parallel = [==[Two parallel axes]==],
	itemadded = [==[Fires when a Configuration, CustomEvent, CustomEventReceiver, Dialog, or VehicleSeat is added to the DataModel]==],
	adventure = [==[The game's genre is set to Adventure.]==],
	outrageousbuildersclub = [==[(no longer available)]==],
	leftarm = [==[Determines the asset ID of the LeftArm to be applied to the Humanoid]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	uselocalspace = [==[Determines whether studio tools will use local space of an object or global space.]==],
	touchstarted = [==[Fired when a user places their finger on a TouchEnabled device - such as the screen of an Apple iPad or iPhone or a Google Android phone]==],
	mouthright = [==[Moves the mouth right]==],
	playlocalsound = [==[Plays a Sound locally, meaning the sound will only be heard by the client calling this function, regardless of where it's parented to.]==],
	loadstringenabled = [==[Toggles whether or not the loadstring function can be used by server scripts. Defaults to false.]==],
	visible = [==[Determines whether a GuiObject.GUI and its descendants will be rendered]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	players = [==[A game service that contains presently connected Player objects.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	height = [==[The height of the Rect.]==],
	datastoresetoptions = [==[Specifies additional parameters for a GlobalDataStore:SetAsync call.]==],
	color3 = [==[Sets the color of a GUI object.]==],
	jump = [==[The Jump button]==],
	useview = [==[The current user or group roleset can download a copy of the package from Roblox.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	primitivescount = [==[A measurement of how many physically simulated components currently exist in the game world.]==],
	outline = [==[As GuiObject.BorderSizePixel increases, the border grows outward. The dimensions of the GuiObject's contents do not change.]==],
	mouseenter = [==[Fires when a user moves their mouse into a GUI element]==],
	graphemes = [==[Returns an iterator function that iterates over the grapheme clusters of a given string.]==],
	none = [==[Joints are never created, no matter what]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	all = [==[Joints are created between any kind of surface. Functions identically to Surface]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	scrollbarbackground = [==[The background color of scrollbars, like those seen in the Explorer window]==],
	denkone = [==[<style>@import url('https://fonts.googleapis.com/css2?family=Denk+One');</style>
<p class="text-nowrap" style={{fontFamily: 'Denk One', fontSize: '1.7em', margin: '5px 0px'}}>The quick brown fox jumps over the lazy dog.<br />0123456789 , : ! ? # % & ( ) - + =]==],
	nameocclusion = [==[Controls whether a Humanoid name can be seen behind walls or other objects.]==],
	rightparama = [==[Determines the first parameter for the SurfaceType on the Right face of a part (-X direction)]==],
	contextual = [==[The stroke is applied to the parent UI element’s text]==],
	viewportpointtoray = [==[Creates a unit DataType.Ray from a position on the viewport (in pixels), at a given depth from the Camera orientated in the Camera direction. Does not account for the GUI inset]==],
	noinput = [==[Behaves like a weld, and does absolutely nothing.]==],
	center = [==[The object's location is centered on it's parent.]==],
	canbedropped = [==[Controls whether the player can drop the tool]==],
	edge = [==[The object is located along an edge of its parent.]==],
	right = [==[The widget will appear docked to the right of the game screen]==],
	product = [==[Product format type - the product is a produce (e.g. Developer product).]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	seated = [==[The Humanoid is currently sitting. Check the Humanoid.Sit property.]==],
	landed = [==[The Humanoid touched the ground after a freefall. <em>This state lasts only briefly.</em>]==],
	jumping = [==[The Humanoid just jumped. (Check Humanoid.Jump). <em>This state lasts only briefly.</em>]==],
	ragdoll = [==[The Humanoid has been hit by a fast moving object (uncontrolled falling). <em>The Humanoid can recover from this.</em>]==],
	runningnophysics = [==[Currently running while no physics are being calculated.]==],
	alwaysoff = [==[The humanoid's health display is never visible.]==],
	none = [==[Name and healthbar will not be displayed under any circumstance.]==],
	cameraminzoomdistance = [==[The minimum distance in studs the player's default camera is allowed to zoom in.]==],
	innerbox = [==[Fixed size collision boxes, similar to the classic avatar collision]==],
	teamcolor = [==[Sets what team the SpawnLocation is affiliated to. If SpawnLocation.Neutral property is false, only Players with the same Player.TeamColor as the spawn's TeamColor will be able to spawn there.]==],
	cframe = [==[The center location and rotation of the Region3.]==],
	textxml = [==[The HTTP request data isformatted in plain text Xml]==],
	idleanimation = [==[The asset is an idle animation.]==],
	eyeslookdown = [==[Moves gaze down]==],
	dead = [==[The Humanoid died. Changing a Humanoid's state to this one will kill it.]==],
	applicationxml = [==[The HTTP request data is encoded in application Xml]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	subtractasync = [==[Creates a new UnionOperation which occupies the same space as the part minus the space(s) occupied by the parts in the given array.]==],
	isreceiveageshown = [==[This property is supposed to show the BasePart.ReceiveAge of a part, but it does not work correctly.]==],
	nfdnormalize = [==[Converts the input string to Normal Form D.]==],
	rightfoot = [==[Reference to a Humanoid's RightFoot.]==],
	teamchat = [==[Makes the LocalPlayer chat the given message, which will only be viewable by users on the same team]==],
	direction = [==[The direction vector of the Ray.]==],
	slow = [==[1 second per cycle]==],
	none = [==[Text is not truncated.]==],
	publishasync = [==[Invokes the supplied callback whenever a message is pushed to the topic]==],
	slate = [==[Applies to BasePart and Terrain.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	nographics = [==[Game will not be rendered, and instead a <em>Diagnostics</em> window is rendered on screen.]==],
	opengl = [==[OpenGL (Khronos Group)]==],
	rotvelocity = [==[Determines a part's change in orientation over time]==],
	tutorial = [==[The game's genre is set to Tutorial.]==],
	skatepark = [==[The game's genre is set to Skate Park.]==],
	war = [==[The game's genre is set to War.]==],
	scary = [==[The game's genre is set to Scary.]==],
	corrugator = [==[Brings the left and right brows inward together]==],
	scifi = [==[The game's genre is set to SciFi (Science Fiction).]==],
	fantasy = [==[The game's genre is set to Fantasy.]==],
	sin = [==[Returns the sine of x (assumed to be in radians).]==],
	socialitems = [==[Gear with the 'Social' attribute.
<img alt="Social Attribute" src="/assets/bltd3ac42c4659a2371/GearType_Social.png" />]==],
	findfirstchildofclass = [==[Returns the first child of the Instance whose Instance.ClassName is equal to the given className.]==],
	versionnumber = [==[Refers to a revision of a specific package.]==],
	responsiveness = [==[Controls how quickly the constraint will reach its goal. Higher values will cause the attachment to align quicker. Value can be between 5 and 200.]==],
	changed = [==[Fired whenever the NumberValue.Value is changed]==],
	uitablelayout = [==[Lays out sibling UI elements and their child UI elements as rows/columns and cells in a table.]==],
	transparency = [==[Overlays the SurfaceAppearance.ColorMap on top of the underlying part Part.Color3 color based on the ColorMap’s alpha channel
<img alt="AlphaMode Transparency" src="/assets/bltd194e7f5a88d1fdd/fern-overlay.png" />]==],
	characterappearance = [==[The base class for objects that change the character's appearance, such as the BodyColors, CharacterMesh, ShirtGraphic, Pants and Shirt objects.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	playerchoice = [==[The rig (either R6 or R15) determined by a player's character settings set on the website in the 'Edit Avatar' page.]==],
	c1 = [==[Is subtracted from the JointInstance.C0 property to create an offset point for JointInstance.Part1.]==],
	removecustomstatus = [==[Removes the defined custom status from the Status model in the Humanoid..]==],
	friend = [==[Two players are friends.]==],
	notfriend = [==[Two players are not friends.]==],
	axes = [==[Axes is a datatype used for the ArcHandles class to control what rotation axes are currently enabled]==],
	changed = [==[Fires if the BinaryStringValue's value is changed.]==],
	fixed = [==[All simulated assemblies inside the workspace will advance forward at 240&nbsp;Hz. This option is best for optimal stability and simulation accuracy.]==],
	virtualuser = [==[VirtualUser is a service that allows you to record the inputs of a user, and then play it back to a limited extent.]==],
	setteleportdata = [==[Setter function for data to be passed to the destination place]==],
	unknown = [==[The friendship status of two players is unknown.]==],
	errorcount = [==[Measures how many errors have been recorded in the test session.]==],
	registertouchmovementmode = [==[Registers that a touch movement mode is available to be selected from the game menu.]==],
	getlimb = [==[Returns the Enum.Limb enum that is associated with the given Part]==],
	issue = [==[A player invokes (sends) a friend request.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	studspertileu = [==[Sets the horizontal size, in studs, of the tiled image applied by the Texture.]==],
	dropshadow = [==[Causes the frame to appear as a translucent gray rectangle with blurred sides. The blur is more apparent on the bottom edge. It has a padding of eight pixels on all sides.]==],
	dynamicthumbstick = [==[The player's character is controlled with one hand while holding their device in portrait mode.]==],
	httprbxapiservice = [==[An internal service whose functionality is not available to developers.]==],
	chatgreen = [==[Causes the frame to appear similar to a Dialog with its Tone property set to "Friendly." Like "ChatBlue" this has a padding of fifteen pixels on all sides.]==],
	robloxsquare = [==[Causes the frame to appear as a translucent dark gray rectangle with a padding of five pixels on all sides.]==],
	chatblue = [==[Causes the frame to appear similar to a Dialog with its Dialog.Tone property set to Enum.DialogTone neutral. This has a padding of fifteen pixels on all sides.]==],
	rotateincrement = [==[Determines the degrees by which studio's rotation tool will rotate selected objects each tick]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	gamepad4 = [==[Input from the 4th plugged in Gamepad.]==],
	value = [==[Used to hold a number value between DoubleConstrainedValue.MinValue and DoubleConstrainedValue.MaxValue]==],
	currentdistance = [==[The current distance between the RodConstraint's two Attachment.]==],
	pushing = [==[Skateboard is being pushed (speeding up).]==],
	brick = [==[Increases by a rate of 1 along the x- and z- axes, 1.2 along the y-axis.]==],
	resizeablefaces = [==[Describes the faces on which a part may be resized]==],
	size96 = [==[Font size 96.]==],
	size42 = [==[Font size 42.]==],
	size18 = [==[Font size 18.]==],
	titilliumweb = [==[<style>@import url('https://fonts.googleapis.com/css2?family=Titillium+Web');</style>
<p class="text-nowrap" style={{fontFamily: 'Titillium Web', fontSize: '1.75em', margin: '5px 0px'}}>The quick brown fox jumps over the lazy dog.<br />0123456789 , : ! ? # % & ( ) - + =]==],
	specialelite = [==[<style>@import url('https://fonts.googleapis.com/css2?family=Special+Elite');</style>
<p class="text-nowrap" style={{fontFamily: 'Special Elite', fontSize: '1.6em', margin: '5px 0px'}}>The quick brown fox jumps over the lazy dog.<br />0123456789 , : ! ? # % & ( ) - + =]==],
	roboto = [==[<style>@import url('https://fonts.googleapis.com/css2?family=Roboto');</style>
<p class="text-nowrap" style={{fontFamily: 'Roboto', fontSize: '1.55em', margin: '5px 0px'}}>The quick brown fox jumps over the lazy dog.<br />0123456789 , : ! ? # % & ( ) - + =]==],
	permanentmarker = [==[<style>@import url('https://fonts.googleapis.com/css2?family=Permanent+Marker');</style>
<p class="text-nowrap" style={{fontFamily: 'Permanent Marker', fontSize: '1.6em', margin: '5px 0px'}}>The quick brown fox jumps over the lazy dog.<br />0123456789 , : ! ? # % & ( ) - + =]==],
	patrickhand = [==[<style>@import url('https://fonts.googleapis.com/css2?family=Patrick+Hand');</style>
<p class="text-nowrap" style={{fontFamily: 'Patrick Hand', fontSize: '1.8em', margin: '5px 0px'}}>The quick brown fox jumps over the lazy dog.<br />0123456789 , : ! ? # % & ( ) - + =]==],
	oswald = [==[<style>@import url('https://fonts.googleapis.com/css2?family=Oswald');</style>
<p class="text-nowrap" style={{fontFamily: 'Oswald', fontSize: '1.65em', margin: '5px 0px'}}>The quick brown fox jumps over the lazy dog.<br />0123456789 , : ! ? # % & ( ) - + =]==],
	getdebugid = [==[Returns a coded string of the Instances DebugId used internally by Roblox.]==],
	nunito = [==[<style>@import url('https://fonts.googleapis.com/css2?family=Nunito');</style>
<p class="text-nowrap" style={{fontFamily: 'Nunito', fontSize: '1.65em', margin: '5px 0px'}}>The quick brown fox jumps over the lazy dog.<br />0123456789 , : ! ? # % & ( ) - + =]==],
	axes = [==[Axes is a datatype used for the ArcHandles class to control what rotation axes are currently enabled]==],
	bangers = [==[<style>@import url('https://fonts.googleapis.com/css2?family=Bangers');</style>
<p class="text-nowrap" style={{fontFamily: 'Bangers', fontSize: '1.65em', margin: '5px 0px'}}>The quick brown fox jumps over the lazy dog.<br />0123456789 , : ! ? # % & ( ) - + =]==],
	collisiongroupsarecollidable = [==[Returns whether the two groups will collide.]==],
	packageassetname = [==[The asset name of the package.]==],
	gothamblack = [==[<img src="/assets/bltf60cc0f4a55f6f4f/Font-Face-Sample-Gotham-Black.png" class="img-fluid half-sized" />]==],
	areanchorsshown = [==[When set to true, parts that are BasePart.Anchored will show a gray surface outline on the surface of the part's bounding box that is currently facing the ground.]==],
	highway = [==[<img src="/assets/bltc15592366af3c398/Font-Face-Sample-Highway.png" class="img-fluid half-sized" />]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	getpointbalance = [==[Returns the total number of points the given player has across all games]==],
	garamond = [==[<style>@import url('https://fonts.googleapis.com/css2?family=EB+Garamond');</style>
<p class="text-nowrap" style={{fontFamily: 'EB Garamond', fontSize: '1.85em', margin: '5px 0px'}}>The quick brown fox jumps over the lazy dog.<br />0123456789 , : ! ? # % & ( ) - + =]==],
	bodoni = [==[<img src="/assets/blt375ece24cc357f23/Font-Face-Sample-Bodoni.png" class="img-fluid half-sized" />]==],
	x = [==[The x-coordinate of the position.]==],
	sourcesansbold = [==[<style>@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:ital,wght@0,300;0,400;0,600;0,700;1,400');</style>
<p class="text-nowrap" class="text-nowrap" style={{fontFamily: 'Source Sans Pro', fontSize: '1.7em', fontWeight: 700, margin: '5px 0px', minWidth: '540px'}}>The quick brown fox jumps over the lazy dog.<br />0123456789 , : ! ? # % & ( ) - + =]==],
	sourcesans = [==[<style>@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro');</style>
<p class="text-nowrap" style={{fontFamily: 'Source Sans Pro', fontSize: '1.7em', margin: '5px 0px'}}>The quick brown fox jumps over the lazy dog.<br />0123456789 , : ! ? # % & ( ) - + =]==],
	vertical = [==[Fill in the top to bottom direction.]==],
	horizontal = [==[Fill in the left to right direction.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	craters = [==[Explosion generates craters.]==],
	value = [==[The stored <a href="/api-reference/datatype/Color3" title="Color3">Color3</a>.]==],
	magnitude = [==[The magnitude of the force.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	gamepadenabled = [==[Describes whether the device being used by a user has an available gamepad]==],
	size = [==[The size of the adornment.]==],
	always = [==[The scrollbar will always have elastic scrolling available, even when there isn't content available to scroll to]==],
	playermouse = [==[The PlayerMouse behaves identically to the Mouse object that is obtained using Tool.Equipped. It can be accessed from LocalScripts using the local player's Player:GetMouse method.]==],
	gettranslatorforlocaleasync = [==[Yields until the cloud localization asset for the argument locale has been loaded - if available. Returns a Translator to be used for translations using the locale data loaded]==],
	bounce = [==[Moves as if the start or end position of the tween is bouncy (See animation).]==],
	createdockwidgetplugingui = [==[Creates a DockWidgetPluginGui given a DataType.DockWidgetPluginGuiInfo]==],
	instancecount = [==[The number of instances active in the simulation.]==],
	sine = [==[Movement speed is determined by a sine wave (See animation).]==],
	linear = [==[Moves at a constant speed (See animation).]==],
	surfacecolor3 = [==[Determines the color of the box's surfaces]==],
	cancelled = [==[The tween was cancelled before completion.]==],
	failed = [==[Prints a red message to the output, prefixed by <em>"TestService: "</em>.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	classicchat = [==[Indicates whether or not classic chat is enabled; set by the Players:SetChatStyle method.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	addsubpose = [==[This function adds a sub Pose to the Pose by parenting it to it.]==],
	studspertilev = [==[Sets the vertical size, in studs, of the tiled image applied by the Texture.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	rightarm = [==[The right arm BodyPart.]==],
	quest = [==[Shows an exclamation point ('''!''').]==],
	y = [==[Describes the Y (vertical) component of the mouse’s screen position]==],
	mix = [==[Percentage of the original sound that will be applied to the filter.]==],
	multipleplayers = [==[Multiple players can simultaneously interact with this dialog. The conversation between the player and the dialog cannot be seen by other players.]==],
	thumbpad = [==[The player's character is controlled with a virtual thumbpad that stays stationary as the player's finger moves. Jumping is controlled with a separate button.]==],
	eventconnected = [==[Fires when the receiver is attached to a different CustomEvent, when the CustomEventReciever.Source property is changed.]==],
	skyboxlf = [==[The URL link to a picture for the left surface of the sky.]==],
	getattributechangedsignal = [==[Returns an event that fires when the given attribute changes]==],
	robloxgame = [==[Member must have security permissions &lt;= <strong>RobloxPlaceSecurity</strong> to be shown.]==],
	userchoice = [==[The camera will move based on the player's settings.]==],
	version = [==[Uniquely identifies a particular version of the key.]==],
	navigation = [==[Pathfinding for Humanoids via the PathfindingService.]==],
	animation = [==[Playback of Animations on Humanoids and AnimationControllers.]==],
	waistaccessory = [==[A comma-separated list of asset IDs that will be added as Accessory to a Humanoid rig when Humanoid:ApplyDescription, usually those attached to its waist (such as belts)]==],
	sounds = [==[Data of sounds in-game.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	getsetting = [==[Retrieves a previously stored value with the given key, or nil if the given key doesn't exist.]==],
	dropdown = [==[The color of dropdown menus, like those found in the Properties window]==],
	fromorientation = [==[Equivalent to fromEulerAnglesYXZ.]==],
	graphicsmeshparts = [==[Rendering of mesh parts.]==],
	physicsparts = [==[Physics bodies and the components that control their behavior.]==],
	promptbuttonholdended = [==[Triggers when the user stops holding down the ProximityPrompt.KeyboardKeyCode/button on a prompt with a non-zero ProximityPrompt.HoldDuration]==],
	clicktomove = [==[The player can right click in the game world and the character will move there. Player can also control character with mouse and keyboard.]==],
	keyboardmouse = [==[The player's character will be controlled using the keyboard and mouse.]==],
	pages = [==[An abstract class for pages objects.]==],
	touchlongpress = [==[Fired when a user holds at least one finger for a short amount of time on the same screen position on a TouchEnabled device - such as the screen of a mobile device]==],
	setincrementsortedasync = [==[Refers to GlobalDataStore.SetAsync and GlobalDataStore.IncrementAsync while using an OrderedDataStore.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	attachmentup = [==[Sets the offset position of the object on the Player.]==],
	classic = [==[Camera tracks the player but will not automatically rotate if the player walks left or right]==],
	follow = [==[Camera tracks the player and automatically rotates if the player walks left or right]==],
	default = [==[The default camera mode is classic]==],
	user = [==[The place is owned by a single user]==],
	playbackspeed = [==[Determines the speed at which a Sound will play, with higher values causing the sound to play faster and at a higher pitch.]==],
	all = [==[Refers to all available CoreGuis.]==],
	removepose = [==[This function removes a Pose from the Keyframe by setting its Instance.Parent to nil.]==],
	static = [==[The texture will be rolled out as the attachments move, and they will remain in place until their lifetime is met.
<img alt="The Static TextureMode" src="/assets/blt4e6854cd4a39d272/Enum_TextureMode_Static.gif" />]==],
	findpartonraywithwhitelist = [==[Returns the first BasePart or Terrain cell intersecting with the given DataType.Ray that is in, or is a descendant of an object in, the given whitelist]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	filteringenabled = [==[Determines whether changes made from the client will replicate to the server or not.]==],
	leftupperleg = [==[Reference to a Humanoid's LeftUpperLeg.]==],
	getwatercell = [==[Returns if the cell is a water cell.]==],
	focus = [==[Sets the area in 3D space that is prioritized by Roblox's graphical systems]==],
	chromecast = [==[The client is running on Chromecast.]==],
	showactiveanimationasset = [==[When set to true, a label will be shown above each Player's head, showing the current animation being played by the Player's Humanoid, if any.]==],
	inverse = [==[Returns the inverse of the CFrame.]==],
	displaydistancetype = [==[Controls the distance behavior of the Humanoid's name and health display.]==],
	bodyangularvelocity = [==[Applies a torque to maintain a constant angular velocity]==],
	getclassicon = [==[Provides a dictionary that allows the display of a class' Explorer window icon]==],
	apikey = [==[PlayFab API key. Must be set in order to use AnalyticsService:FireEvent.]==],
	keyboardmouse = [==[The player's character is controlled using the keyboard and mouse.]==],
	resume = [==[Resumes the Sound. Sets Sound.Playing to true. Does not alter Sound.TimePosition and thus can be used to resume the playback of a sound stopped using Sound:Pause.]==],
	reloadassets = [==[When set to true, Roblox Studio will automatically reload changes that are made to files in Roblox's content folder.]==],
	follow = [==[Camera tracks the player and automatically rotates if the player walks left or right.]==],
	enum = [==[A datatype that represents an individual enum.]==],
	textsize = [==[Determine the line height of text in pixels.]==],
	default = [==[The default camera movement mode is classic.]==],
	removecharacter = [==[Removes the player's character.]==],
	box = [==[Collision models behave using a box that corresponds to the union's selection box]==],
	shop = [==[Shows a dollar sign ('''$''').]==],
	friends = [==[A player can only chat with users in a game that are on their friends list.]==],
	name = [==[The name of the EnumItem.]==],
	stepanimations = [==[Increments the AnimationTrack.TimePosition of all playing AnimationTracks that are loaded onto the Animator, applying the offsets to the model associated with the Animator. For use in the command bar or by plugins only.]==],
	noone = [==[A player cannot chat with any other users in a game.]==],
	allusers = [==[A player can chat with all users in a game.]==],
	gyro = [==[The Gyroscope of a mobile device.]==],
	getinstanceremovedsignal = [==[Get a signal that fires when a given tag is removed from an object]==],
	white = [==[White chat color.]==],
	green = [==[Green chat color.]==],
	resize = [==[Changes the size of an object just like using the Studio resize tool.]==],
	allscopes = [==[Whether the GlobalDataStore should work with all scopes.]==],
	graphicsspatialhash = [==[Spatial hash lookup tables of the game world that are used for rendering.]==],
	inspectplayerfromuserid = [==[Allows the Inspect Menu to appear showing the user that has the given Player.UserId]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	addseparator = [==[Adds a separator between items in the menu]==],
	mousebutton1up = [==[Fired when the left mouse has released the GUI object]==],
	gamepad5 = [==[Input from the 5th plugged in Gamepad]==],
	distributedgametime = [==[The amount of time, in seconds, that the game has been running.]==],
	grip = [==[Stores the Tool's Grip properties as one CFrame]==],
	plain = [==[Sound reverb is changed to sound like the player is an open plain.]==],
	touchinputservice = [==[An internal service responsible for touch inputs on mobile devices.]==],
	fixed = [==[Camera is stationary.]==],
	enabled = [==[Determines whether the button is clickable in general]==],
	brickcolorvalue = [==[A container object for a single BrickColor value]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	gothambold = [==[<img src="/assets/blta607a446fad08015/Font-Face-Sample-Gotham-Bold.png" class="img-fluid half-sized" />]==],
	rootpart = [==[Reference to a Humanoid's HumanoidRootPart.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	isloaded = [==[Returns true if the client has finished loading the game for the first time]==],
	rightlowerarm = [==[Reference to a Humanoid's RightLowerArm.]==],
	leftupperarm = [==[Reference to a Humanoid's LeftUpperArm.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	rightupperleg = [==[Reference to a Humanoid's RightUpperLeg.]==],
	block = [==[A block shaped part]==],
	leftfoot = [==[Reference to a Humanoid's LeftFoot.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	uppertorso = [==[Reference to a Humanoid's UpperTorso.]==],
	imagetransparency = [==[Determines the transparency of the rendered image.]==],
	pucker = [==[Makes a kiss-like shape with the mouth]==],
	rightleg = [==[The right left BodyPart.]==],
	out = [==[The easing style is applied in a reverse direction. (See animation)]==],
	range = [==[The distance from the SurfaceLight's face that will illuminate.]==],
	android = [==[The client is running on Android (Google mobile).]==],
	shirt = [==[The asset is a shirt.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	z = [==[The Z axis]==],
	error = [==[Prints a red message to the output.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	x = [==[The X axis]==],
	playbackloudness = [==[A number between 0 and 1000 indicating how loud the Sound is currently playing back.]==],
	drag = [==[Determines the rate at which particles will lose half their speed through exponential decay]==],
	axes = [==[Sets the current Axes ArcHandles will show.]==],
	setmotor = [==[Sets the vibration intensity of the specified <a href="/api-reference/property/InputObject/UserInputType" class="mw-redirect" title="UserInputType">UserInputType</a> and <a href="/api-reference/enum/VibrationMotor" class="mw-redirect" title="VibrationMotor">VibrationMotor</a>.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	relativeto = [==[The <a href="/api-reference/datatype/CFrame" title="CFrame">CFrame</a> in which the Torque is expressed.]==],
	len = [==[Returns the number of UTF-8 codepoints in a given string.]==],
	y = [==[The y-coordinate of the Vector3.]==],
	setteleportgui = [==[Sets the custom ScreenGui that will be shown to the local user during teleportation, prior to the teleport being invoked]==],
	accountage = [==[Describes the player's account age in days.]==],
	fromaxis = [==[Returns a Vector3 on a particular axis.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	activate = [==[Simulates a click on a Tool]==],
	circular = [==[Whether or not the page layout wraps around at the ends.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	avatarshop = [==[Item is purchasable only in the Avatar Shop.]==],
	timelength = [==[The length of the Sound in seconds. If the Sound is not loaded, this value will be 0.]==],
	rightlegcolor3 = [==[Sets the color of this limb, as a <a href="/api-reference/datatype/Color3" title="API:Color3"><span>Color3</span></a>.]==],
	getkeys = [==[Returns a copy of all the keys in the FloatCurve as a Lua array of FloatCurveKey]==],
	nearintensity = [==[Intensity of the near field blur]==],
	exportplace = [==[Exports the place to an .OBJ file that is saved to the path chosen by the user in a file save dialogue (the filePath argument is ignored).]==],
	getminutesaftermidnight = [==[Returns the number of minutes that have passed after midnight for the purposes of lighting.]==],
	pluginmenu = [==[A context menu that can be shown in Studio. Displays a list of PluginActions and supports submenus]==],
	clickbutton2 = [==[Simulates the user clicking the right mouse button.]==],
	rightouterbrowraiser = [==[Raises the outer part of the right brow upwards]==],
	layoutorder = [==[Controls the sort order of a GuiObject when used with a UIGridStyleLayout]==],
	wireradius = [==[The radius of the wire.]==],
	poseanimation = [==[The asset is a pose animation.]==],
	center = [==[The grid is placed at the center of its parent (x-direction), extending equally to the left and right of the center according to the size of the grid relative to the x-axis.]==],
	puffiness = [==[Controls how much underlying clothing items inflate the current clothing item.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	converttosmooth = [==[Transforms the legacy terrain engine into the new terrain engine.]==],
	runanimation = [==[The asset is a run animation.]==],
	waistaccessory = [==[The asset is a waist accessory.]==],
	backaccessory = [==[The asset is a back accessory.]==],
	minvalue = [==[The lowest number that the IntConstrainedValue.Value property can be.]==],
	uiconstraint = [==[The base class for UI constraint classes.]==],
	faceaccessory = [==[The asset is a face accessory.]==],
	plugin = [==[The asset is a plugin.]==],
	gamepass = [==[The asset is a GamePass.]==],
	rightleg = [==[The asset is a right leg.]==],
	leftleg = [==[The asset is a left leg.]==],
	level02 = [==[Graphic quality level 2.]==],
	getposes = [==[This function returns an array containing all Poses that have been added to a Keyframe]==],
	torso = [==[The asset is a torso.]==],
	promptbundlepurchase = [==[Used to prompt a user to purchase a bundle with the given bundleId]==],
	face = [==[The asset is a face.]==],
	applyimpulseatposition = [==[Apply an impulse to the assembly at specified position]==],
	head = [==[The asset is a head.]==],
	down = [==[The user swiped down.]==],
	mesh = [==[The asset is a mesh.]==],
	fitwithinmaxsize = [==[Makes the element the maximum size it can be within the current possible AbsoluteSize of the element while maintaining the aspect ratio]==],
	bottom = [==[The widget will appear docked below the game screen]==],
	ribbontabtopbar = [==[The background color of the ribbon menu]==],
	clicktomove = [==[The player's character will attempt to move to a location in the world when the player taps a location.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	mindistance = [==[The minimum distance at which a 3D Sound (direct child of a BasePart or Attachment) will begin to attenuate. Effectively, the emitter size.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	bottomsurfaceinput = [==[Determines the kind of input for the Bottom face of a part (-Y direction)]==],
	removekey = [==[Deprecated in favor of LocalizationTable:RemoveEntry.
Calling RemoveKey is the same as making the following call to RemoveEntry:

<div><div><div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><pre class="prettyprint linenums lang-lua">LocalizationTable:RemoveEntry(key,"","")</pre></div></div></div>]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	action = [==[(1) - Highest priority]==],
	cellcentertoworld = [==[Returns the world position of the center of the terrain cell (x, y, z).]==],
	gameid = [==[Describes the ID of the Articles/Multi Place Games|game the Articles.Place running on the server belongs to]==],
	camera = [==[This should run after Input]==],
	abandon = [==[Indicates the progression abandoned]==],
	error = [==[When functionality is unavailable or expectations broken]==],
	warning = [==[Used for warning]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	lighting = [==[The Lighting service controls the environmental lighting in a game. It includes a range of adjustable properties that can be used to change how lighting appears and interacts with other objects.]==],
	debug = [==[Used for debugging]==],
	viewportsize = [==[Describes the dimensions, in pixels, of the client's viewport]==],
	automatic = [==[Network ownership is determined automatically by the server.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	customstatusremoved = [==[Fired when a status is removed from the Humanoid.]==],
	objectvalue = [==[A container object for a reference to another instance.]==],
	matchinggenreonly = [==[Only gear genres matching the allowed genres specified in a place's configuration settings.]==],
	fromuniversaltime = [==[Returns a DateTime using the given units from a UTC time.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	enabled = [==[Allows for disabling of the WrapLayer object as if it does not exist.]==],
	osx = [==[The client is running on OSX (Apple desktop).]==],
	attachment1 = [==[The constraint is expressed relative to Attatchment]==],
	unit = [==[A normalized copy of the Vector3.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	checkocclusionasync = [==[Checks if a path is blocked starting at a specific waypoint]==],
	attachment0 = [==[The constraint is expressed relative to Attatchment]==],
	rrotate = [==[Returns a number after its bits have been rotated to the right by a given number of times.]==],
	assert = [==[throws an error if the provided value resolves to false or nil.]==],
	setincrementasync = [==[Refers to GlobalDataStore.SetAsync and GlobalDataStore.IncrementAsync.]==],
	atmosphere = [==[The <strong>Atmosphere</strong> object pushes Roblox closer toward realistic environments where sunlight scatters in different ways depending on density and other air particle properties]==],
	getsundirection = [==[Returns a DataType.Vector3 representing the direction of the sun from the position 0, 0, 0.]==],
	hastag = [==[Check whether an object has a given tag]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	reflectionmetadatamember = [==[An internal object which cannot be used by developers.]==],
	fillcylinder = [==[Fills a cylinder of smooth terrain in a given space.]==],
	chat = [==[The CoreGui used to display and send in-game chat message with other players.]==],
	tiltunits = [==[Tilts the Camera around its Camera.Focus in 10 degree increments around the Camera X axis]==],
	color = [==[Sets color used for the debug rendering. See WrapTarget.DebugMode]==],
	referenceoriginworld = [==[Reference mesh offset relative to parent MeshPart (in the world space)
Note: this property is set up automatically by the FBX importer]==],
	dpad = [==[The player's character is controlled with a virtual dpad. The dpad consists of directional buttons with a jump button in the middle.]==],
	spend = [==[Indicates the spending or loss of an in game resource. For example, a player spends virtual currency to acquire a new item]==],
	debugmode = [==[Allows switching between different debugging visualization modes for cage meshes.]==],
	wraplayer = [==[The WrapLayer object defines a 3D accessory’s inner and outer surfaces and other properties related to layering accessories. These surfaces, or the Inner Cage and Outer Cage, are similar to collision boxes, and describe the surfaces of which other 3D accessories can be placed without clipping or breaking.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	min = [==[Returns the minimum value among the numbers passed to the function.]==],
	name = [==[A non-unique identifier of the Instance]==],
	isregion3empty = [==[Returns a bool indicating whether there are no BaseParts within the given DataType.Region3.]==],
	textstrokecolor3 = [==[Determines the color of the text stroke (outline).]==],
	deny = [==[A player denies a friend request.]==],
	right = [==[Whether the right face is included.]==],
	transparency = [==[A mixed property of BackgroundTransparency and TextTransparency]==],
	menu = [==[The player is restricted to chatting via a menu of chat messages.]==],
	hit = [==[Fires when the Explosion hits a BasePart within its Explosion.BlastRadius. Returns the part hit along with the distance of the part from Explosion.Position.]==],
	left = [==[Left side of the ScrollingFrame.]==],
	getpartboundsinbox = [==[Returns an array of parts whose <em>bounding boxes</em> overlap a given box]==],
	nearplanez = [==[Describes the negative z-offset, in studs, of the Camera near clipping plane]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	serverstorage = [==[A container whose contents are only accessible on the server. Objects descending from ServerStorage will not replicate to the client and will not be accessible from LocalScripts.]==],
	gamepad3 = [==[Input from the 3rd plugged in Gamepad.]==],
	classic = [==[Enables swipe and pan on mobile devices, and disables edge bump camera controls. Default.]==],
	f3 = [==[Determines the face of a Glue.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	adjustweight = [==[Changes the weight of an animation, with the optional fadeTime parameter determining how long it takes for AnimationTrack.WeightCurrent to reach AnimationTrack.WeightTarget.]==],
	bulkmoveto = [==[Moves a table of Part to DataType.CFrame in a table of CFrames, without firing property changed events]==],
	moonangularsize = [==[The perceived angular size of the moon while using this skybox, in degrees.]==],
	zoomtoextents = [==[Positions and zooms the Workspace.CurrentCamera to show the extent of BaseParts currently in the Workspace.]==],
	none = [==[A state that should never be seen in a game, essentially just marks the end of the enum.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	makejoints = [==[Goes through all BaseParts given. If any part's side has a Enum.SurfaceType that can make a joint it will create a joint with any adjacent parts.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	mouseenabled = [==[Describes whether the user’s device has a mouse available]==],
	enabled = [==[Relates to whether or not the tool can be used]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	top = [==[Whether the top face is included.]==],
	size60 = [==[Font size 60.]==],
	areownersshown = [==[When set to true, each Player's character is outlined with a unique color, and each part that the player has network ownership over is outlined with the same color.]==],
	rate = [==[Determines the number of particles emit per second]==],
	stopped = [==[Skateboard is stopped (not moving).]==],
	allowthirdpartysales = [==[Determines whether assets created by other uses can be sold in the game.]==],
	workspace = [==[The Workspace is the service in which any objects that are to be rendered in the 3D world exist. Objects not descending from Workspace will not be rendered or physically interact with the world]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	navigationrequested = [==[Fired when navigation is requested from the VRService.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	settouchpadmode = [==[Sets the mode of the specified VRTouchpad to the specified VRTouchpadMode.]==],
	char = [==[Receives zero or more integers and returns a string with length equal to the number of arguments that has each character has the internal numerical code equal to its corresponding argument.]==],
	worldcframe = [==[Describes the exact CFrame of the attachment in world-space coordinates]==],
	leftarmcolor = [==[Sets the color of this limb, as a <a href="/api-reference/datatype/BrickColor" class="mw-redirect" title="API:BrickColor"><span>BrickColor</span></a>.]==],
	forceplaymoderobloxlocaleid = [==[When set to a non-empty string, this property overrides value of the LocalizationService.RobloxLocaleId when running in play solo mode.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	getusercframe = [==[Returns a CFrame describing the position &amp; orientation of a specified virtual reality device.]==],
	getpartboundsinradius = [==[Returns an array of parts whose <em>bounding boxes</em> overlap a given sphere]==],
	auditorium = [==[Sound reverb is changed to sound like the player is in an auditorium.]==],
	toaxisangle = [==[Returns a tuple of a Vector3 and a number which represent the rotation of the CFrame in the axis-angle representation.]==],
	rootlocalizationtable = [==[A reference to a LocalizationTable to be used to apply automated localization to this GuiBase2d and its descendants.]==],
	gettranslatorforplayerasync = [==[Yields until the cloud localization asset for the player's locale has been loaded - if available. Returns a Translator to be used for translations using the locale data loaded]==],
	walkspeed = [==[Describes the Humanoid maximum movement speed in studs/sec]==],
	maxprice = [==[The maximum item price to search for.]==],
	vrservice = [==[The VRService is a service that is responsible for handling interactions between Roblox and Virtual Reality.]==],
	getpropertychangedsignal = [==[Get an event that fires when a given property of an object changes.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	isvoiceenabledforuseridasync = [==[Returns whether or not the given user has voice enabled.]==],
	default = [==[The default is KeyboardMouse.]==],
	core = [==[(4) - Lowest priority]==],
	text = [==[Determines the string rendered by the UI element.]==],
	numbersequence = [==[A series of floats across a period of time.]==],
	playerrejoining = [==[Fired when a player rejoins a game session after having disconnected prior.]==],
	lefteyeclosed = [==[Closes the left eyelid]==],
	reactiontorqueenabled = [==[Causes the constraint to apply equal and opposite reaction forces]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	default = [==[Default behavior (currently no change to gameplay)]==],
	filldirection = [==[Determines the axis in which UI elements are laid out.]==],
	vector3 = [==[A 3D value representing a direction and magnitude.]==],
	textplain = [==[The HTTP request data is formatted in plain text]==],
	explorerorder = [==[Determines how this class is sorted in the Explorer compared to other classes.]==],
	stoprecording = [==[Stops recording the user's input. Returns a Lua script as a string, that allows you to playback the inputs that were recorded.]==],
	getmaxqualitylevel = [==[Returns the maximum quality level.]==],
	description = [==[The description of the FunctionalTest.]==],
	startrecording = [==[Starts recording the user's input.]==],
	color = [==[Controls the material color of cloud particles.]==],
	setkeydown = [==[Simulates the user holding a key down.]==],
	bottomsurface = [==[Determines the type of surface for the Bottom face of a part (-Y direction)]==],
	movemouse = [==[Simulates the user moving the mouse cursor to a specific position.]==],
	changed = [==[Fired whenever StringValue.Value is changed.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	new = [==[Returns a Faces with the corresponding face of each passed enum.NormalId as true.]==],
	mouseenter = [==[Fired when a mouse "enters" the GUI handle.]==],
	button2down = [==[Simulates the user holding the right mouse button down.]==],
	lastforce = [==[Returns the last force in the object]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	findpartsinregion3withignorelist = [==[Returns an array of BaseParts in the given DataType.Region3 that aren't in, or a descendant of an entry in, the given IgnoreList.]==],
	getarrivingteleportgui = [==[Returns the <em>customLoadingScreen</em> the Players.LocalPlayer arrived into the place with]==],
	bordermode = [==[Determines in what manner a GuiObject's border is laid out relative to its dimensions.]==],
	makejoints = [==[Creates a joint on any side of the object that has a surface ID that can make a joint]==],
	setfenv = [==[Sets the given function's environment.]==],
	hull = [==[Collision models behave using a <a href="https://en.wikipedia.org/wiki/Convex_hull">convex hull</a>]==],
	always = [==[The ScrollingFrame will always be insetted regardless if the scrollbar is being shown or not.]==],
	video = [==[The asset is a video.]==],
	attachment = [==[Defines a point and orientation relative to the parent BasePart, typically used with Constraints]==],
	swimanimation = [==[The asset is a swim animation.]==],
	userid = [==[A unique identifying integer assigned to all user accounts]==],
	edit = [==[The current user or group roleset can download a copy of the package from Roblox and publish package changes to Roblox.]==],
	rotationorder = [==[Euler angles rotation order]==],
	friction = [==[Used to control the Friction of the part, but now it no longer does anything.]==],
	textureid = [==[The TextureId is the content ID of the texture that is to be applied to the mesh.]==],
	texttruncate = [==[Controls the truncation of the text displayed in this TextLabel.]==],
	countcells = [==[Returns the number of non-empty cells in the Terrain.]==],
	mouseleave = [==[Fires when a user moves their mouse out of a GUI element]==],
	ended = [==[Fires when the VideoFrame.Video has completed playback and stopped.]==],
	timeposition = [==[Indicates the progress in seconds of the VideoFrame.Video]==],
	resolution = [==[Gets the original source resolution of the VideoFrame.Video file]==],
	looped = [==[Sets whether or not the VideoFrame.Video repeats once it has finished when it is playing]==],
	videoframe = [==[A GUI object that renders a rectangle, like a Frame does, with a moving video image]==],
	getusercframeenabled = [==[Returns true if the specified UserCFrame is available to be listened to.]==],
	graphicsparticles = [==[Rendering of particles from ParticleEmitters.]==],
	getcollection = [==[Returns all instances of a given class which are in the DataModel]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	clipsdescendants = [==[When set to true, portions of GuiObjects that fall outside of the BillboardGui's canvas borders will not be drawn.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	setteleportsetting = [==[Stores a value under a given key that persists across all teleportations in the same game]==],
	source = [==[The code to be executed.]==],
	touchlongpress = [==[Fires when the player starts, continues and stops long-pressing the UI element]==],
	turnspeed = [==[The speed at which the vehicle will turn. Higher numbers can cause problems and are not necessarily better.]==],
	torque = [==[How fast the vehicles will be able to attain VehicleSeat.MaxSpeed. The greater the number, the faster it will reach the maximum speed.]==],
	level13 = [==[Graphic quality level 13.]==],
	throttlefloat = [==[Functions identically to VehicleSeat.Throttle, but the value is not an integer.]==],
	getkeyframesequenceasync = [==[Returns a KeyframeSequence based on the specified assetId asynchronously.]==],
	maxspeed = [==[The maximum speed that can be attained.]==],
	mousedrag = [==[Fired when the mouse moves while the MouseButton1Down event has fired, but the left mouse button has not been released yet.]==],
	input = [==[This should run as second]==],
	accoutrement = [==[an object that welds its child Part called "Handle" to the Head of a player's character.]==],
	datamodel = [==[Describes whether a DataModel is actively in memory, as an integer (where 1 = true, and 0 = false).]==],
	xpcall = [==[Similar to pcall except it uses a custom error handler.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	changed = [==[Fired whenever Vector3Value.Value is changed.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	z = [==[Returns the FloatCurve controlling the Z channel. It is the first child instance of type FloatCurve named Z. If none is found an empty FloatCurve is created.]==],
	openscript = [==[Used to open the given script instance in an editor window, in Roblox studio, at the given line. If no line is given as an argument it will default to 0.]==],
	y = [==[Returns the FloatCurve controlling the Y channel. It is the first child instance of type FloatCurve named Y. If none is found an empty FloatCurve is created.]==],
	complete = [==[Indicates the progression completed]==],
	usersettings = [==[A singleton object that houses basic user settings, which persist across all games on Roblox.]==],
	accessoryblob = [==[A JSON formatted array of Layered Accessorys where each table in the entry in the array describes an accessory’s AssetId, AccessoryType, Order, and (optionally) Puffiness as key-value pairs.]==],
	userservice = [==[A service that handles queries regarding users on the Roblox platform.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	leftarmcolor3 = [==[Sets the color of this limb, as a <a href="/api-reference/datatype/Color3" title="API:Color3"><span>Color3</span></a>.]==],
	usercframechanged = [==[Fires when the DataType.CFrame of a specified Virtual Reality device changes]==],
	infocusradius = [==[Controls the distance away from the DepthOfFieldEffect.FocusDistance where no blur is applied]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	changed = [==[Fired whenever the BoolValue.Value of the BoolValue is changed.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	targetsurface = [==[Sets which side the SurfaceSelection will appear on, on the adorned BasePart.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	characterappearanceloaded = [==[Fires when the the full appearance of a Player's Player.Character has been inserted]==],
	landscaperight = [==[A preference where the game is displayed landscape (horizontally) with the bottom of the device on the right side of the screen.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	radius = [==[The radius of the cylinder adornment.]==],
	touchpan = [==[Fired when a user drags at least one finger on a UserInputService.TouchEnabled device - such as the screen of an mobile device]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	proximityprompt = [==[An object that allows developers to prompt users to interact with an object in the 3D world]==],
	mousewheelforward = [==[Fires when a user scrolls their mouse wheel forward when the mouse is over a GUI element]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	touchesusecollisiongroups = [==[Determines whether BasePart in different groups set to not collide will ignore collisions and touch events]==],
	touchmoved = [==[Fired when a user moves their finger on a TouchEnabled device - such as the screen of an Apple iPad or iPhone or a Google Android phone]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	getuserid = [==[Returns the studio user’s userId if they're logged in, otherwise returns 0.]==],
	faces = [==[A datatype containing six booleans, each representing a face of a BasePart.]==],
	pause = [==[Sets Sound.Playing to false. This pauses the playback of the Sound if the sound is playing. As Sound.TimePosition is not reset ,when the Sound is resumed it will continue from its previous position.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	assemblycenterofmass = [==[The center of mass of the part’s assembly in world space]==],
	inputended = [==[<div data-swiftype-name="summary" data-swiftype-type="text" data-swiftype-index='true'>Fires when a user stops interacting via a Human-Computer Interface device</div>]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	pathfindingservice = [==[Used to find paths between two points]==],
	michroma = [==[<style>@import url('https://fonts.googleapis.com/css2?family=Michroma');</style>
<p class="text-nowrap" style={{fontFamily: 'Michroma', fontSize: '1.3em', margin: '5px 0px'}}>The quick brown fox jumps over the lazy dog.<br />0123456789 , : ! ? # % & ( ) - + =]==],
	inputchanged = [==[Fired when a user changes how they're interacting via a Human-Computer Interface device]==],
	initialprompt = [==[Sets the first sentence that the dialog will show to the player, once a chat is commenced.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	lshift = [==[Returns a number whose bits have been logically shifted to the left by a given displacement.]==],
	breakpointremoved = [==[Fired when a breakpoint is removed from the script.]==],
	size420x420 = [==[Thumbnail resolution is 420 pixels x 420 pixels.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	deviceaccelerationchanged = [==[Fired when a user moves a device that has an accelerometer. Used to track real-world device movement within a Roblox game]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	jumpto = [==[If the <i>page</i> is in the UIPageLayout, then it sets UIPageLayout.CurrentPage to it and animates to it. If the circular layout is enabled, it will take the shortest path to this page.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	toisodate = [==[Returns the DateTime as an ISO 8601 date-time string.]==],
	setasync = [==[Sets the value of a key.]==],
	landscapesensor = [==[A preference where the game is displayed landscape (horizontally) with the bottom of the device on the left of right side of the screen depending on the device's orientation (the sensor determines which side allows for the game to be displayed right-side-up).]==],
	length = [==[Number of keys in the float curve.]==],
	freelength = [==[Natural resting length of the spring.]==],
	distancefactor = [==[The number of studs to be considered a meter by SoundService when calculating 3D Sound volume attenuation.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	isnavigationgamepad = [==[Returns true if the specified Enum.UserInputTypeGamepad is allowed to control the navigation GuiObject]==],
	text = [==[The text that is displayed when viewing this action in Roblox Studio.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	ismousebuttonpressed = [==[Returns whether the given Enum.UserInputType is currently held down]==],
	occludeall = [==[Occlude (hide) all humanoid names.]==],
	iskeydown = [==[Returns whether the given  Enum.KeyCode is currently held down]==],
	getmousedelta = [==[Returns the change, in pixels, of the position of the player’s Mouse in the last rendered frame. Only works if the mouse is locked]==],
	getgamepadconnected = [==[Returns whether a gamepad with the given Enum.UserInputType''gamepadNum'' is connected]==],
	gamepass = [==[GamePass format type - the product is a GamePass.]==],
	getfocusedtextbox = [==[Returns the currently TextBox the client is currently focused on]==],
	texture = [==[Determines the image rendered on particle billboards]==],
	getdevicegravity = [==[Returns an InputObject describing the device's current gravity vector]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	gamepadsupports = [==[Returns whether the given Enum.UserInputType gamepad supports a button corresponding with the given Enum.KeyCode]==],
	formatlocaltime = [==[Returns the DateTime's value in local time formatted into a string.]==],
	getbutton = [==[Retrieves a ImageButton of a ContextActionService:BindAction action that had a touch input button created.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	onscreenkeyboardposition = [==[Determines the position of the on-screen keyboard]==],
	updatedtime = [==[Indicates the last time the data store was updated in milliseconds since epoch.]==],
	mousedeltasensitivity = [==[Scales the delta (change) output of the user's Mouse]==],
	style = [==[Sets what the truss looks like. There are currently three different styles.]==],
	keyboardenabled = [==[Describes whether the user’s device has a keyboard available]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	accelerometerenabled = [==[Describes whether the user's device has an accelerometer]==],
	scriptcontext = [==[Describes the context where this member can be used.<br />
If set to <a href="/articles/String" title="String"><span>"Server"</span></a>, this member will not be available to auto fill when editing a `LocalScript`.<br />
If set to <a href="/articles/String" title="String"><span>"Client"</span></a>, this member will not be available to auto fill when editing a `Script`.
]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	custom = [==[Uses the frame's GuiObject.BackgroundColor3, GuiObject.BorderColor3, and GuiObject.BackgroundTransparency properties to determine the frame's appearance. It has no padding; elements with the position {{0, 0}, {0, 0}} will appear at the frame's top-left corner.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	setonboardingcompleted = [==[Sets onboarding as completed]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	infullscreen = [==[Returns true if the user's Roblox window is in full screen mode.]==],
	active = [==[Whether or not mouse events will be passed to objects layered below.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	isdisabled = [==[Returns whether a given badge is disabled]==],
	vrenabled = [==[Describes whether the user is using a virtual reality device]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	getservertimenow = [==[Returns the server epoch time in seconds.]==],
	mousesensitivity = [==[A <a href="/articles/Numbers" class="mw-redirect" title="Float">float</a> representing the sensitivity of the client's mouse.]==],
	assetservice = [==[The AssetService is a non-replicated service that handles asset related queries to the Roblox web API. Eventually, this will house all asset related queries for Roblox objects stored in the web. One should mind the Articles/Multi Place Games|limitations this API has.]==],
	simulationradiuschanged = [==[Fired when the Player's Player.SimulationRadius is changed.]==],
	controlmode = [==[Toggles whether or not the client can use the Mouse Lock Switch mode.]==],
	computercameramovementmode = [==[The camera movement mode currently in-use by the client.]==],
	z = [==[Returns the FloatCurve controlling the Z channel. It is the first child instance of type FloatCurve named Z. If none is found an empty FloatCurve is created.]==],
	ipairs = [==[Returns an iterator function and the table for use in a for loop.]==],
	unionoperation = [==[Combines parts together into a single solid model]==],
	uitextsizeconstraint = [==[Ensures that the size of text rendered by certain GuiObject classes lies within the range described by UITextSizeConstraint.MaxTextSize and UITextSizeConstraint.MinTextSize]==],
	majoraxis = [==[Determines whether sibling UI elements are treated as rows or columns.]==],
	imagerectoffset = [==[.The offset in pixels of the sub-area of an image to be displayed]==],
	thickness = [==[Determines the stroke’s thickness]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	stopped = [==[Fires when an animation to UIPageLayout.CurrentPage is completed without being canceled, and the view stops scrolling.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	pageleave = [==[Fires when a page leaves view, and will not be rendered.]==],
	inout = [==[The easing style is applied forward for the first half and in reverse for the second half.]==],
	copyregion = [==[Stores a chunk of terrain into a TerrainRegion object so it can be loaded back later.  Note: TerrainRegion data does not replicate between server and client.]==],
	previous = [==[Sets UIPageLayout.CurrentPage to the page before the current page and animates to it, or does nothing if there isn't a previous page.]==],
	arshift = [==[Returns a number after its bits have been arithmetically shifted to the right by a given displacement.]==],
	rawequal = [==[Returns whether v1 is equal to v2, bypassing their metamethods.]==],
	uilayout = [==[The base class for UI layout classes.]==],
	setcustomsortfunction = [==[Sets the function used to determine the order of elements when SortOrder is set to Custom.]==],
	absolutecontentsize = [==[The absolute size of space being taken up by the grid layout.]==],
	playergui = [==[A container for a Player's currently rendered ScreenGuis]==],
	tweeninfo = [==[Read-only property that includes information on how the interpolation of the Tween is to be carried out, using the TweenInfo data type.]==],
	bindableevent = [==[An object used to create custom Events that Scripts can fire and connect to.]==],
	light = [==[Light is a root class for dynamic lighting related objects.]==],
	touchmovementmode = [==[The type of controls being used by the client on a mobile device.]==],
	transparency = [==[Determines how much the parent GuiObject can be seen through along the length of the gradient]==],
	studioservice = [==[Provides access to configuration of Roblox Studio and allows importing files from the user's file system]==],
	remove = [==[Sets the object's Parent to nil, and does the same for all its descendants.]==],
	to = [==[The object that the FloorWire travels to.]==],
	getvalue = [==[Calculates a new alpha given an Enum.EasingStyle and Enum.EasingDirection]==],
	help = [==[Shows a question mark ('''?''').]==],
	create = [==[Creates a new Tween given the object whose properties are to be tweened, a datatype.TweenInfo and a dictionary of goal property values.]==],
	tweenservice = [==[TweenService is used to create Tweens, which are used to interpolate, or tween, the properties of instances. Tweens can be used on any object with compatible property types.]==],
	trusspart = [==[Truss parts are the same as Part, except that they have a different visual style, resize differently and characters are able to climb them]==],
	trianglemeshpart = [==[Abstract intermediate class that manages physical geometry properties for PartOperations and MeshParts.]==],
	duty = [==[Controls how long during one volume oscillation the effect will be active.]==],
	usergamesettings = [==[The UserGameSettings is a singleton class found inside of the UserSettings singleton. It holds various persistent settings relating to how the user wants to control their camera, and their character.]==],
	cameramaxzoomdistance = [==[The maximum distance the player's camera is allowed to zoom out.]==],
	watch = [==[Camera is stationary but will rotate to keep the subject in the center of the screen.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	lightinfluence = [==[Determines the factor to which the Trail is influenced by the environment's lighting]==],
	widthscale = [==[A DataType.NumberSequence that scales the width of the Trail over the course of its lifetime.]==],
	texturemode = [==[Sets how the Texture will be drawn.]==],
	texture = [==[The texture to display on the trail.]==],
	reflectionmetadata = [==[A currently unused object whose functionality was split into ReflectionMetadataClasses and ReflectionMetadataEnums.]==],
	maxlength = [==[Sets the maximum length of the trail.]==],
	buildingtools = [==[Gear with the 'Building' attribute.
<img alt="Building Attribute" src="/assets/blte36164ad978dbc99/GearType_Building.png" />]==],
	facecamera = [==[If set to true, the trail textures will always face the camera.]==],
	colorshift_bottom = [==[The hue represented in light reflected in the opposite surfaces to those facing the sun or moon.]==],
	color = [==[The color of the trail segments throughout the lifetime of the trail.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	exclusivity = [==[Used to customize which prompts can be shown at the same time]==],
	weighttarget = [==[WeightCurrent is a read-only property that gives the current weight of the AnimationTrack. It has a default value of 1 and is set when AnimationTrack:Play, AnimationTrack:Stop or AnimationTrack:AdjustWeight is called.]==],
	touchtransmitter = [==[An internal object used by networking and replication code to transmit BasePart.Touched and BasePart.TouchEnded events.]==],
	radius = [==[The visualization radius of the spring]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	difftime = [==[Returns the number of seconds from t1 to t2, assuming the arguments are correctly casted to the time_t format.]==],
	selectionimageobject = [==[Overrides the default selection adornment (used for gamepads)]==],
	mousebutton1down = [==[Fired when the mouse is in the left mouse down state on the GUI object]==],
	limitenabled = [==[Determines whether the angular motion of attachments’ secondary axes is limited]==],
	damping = [==[Torsional damping of the spring]==],
	currentangle = [==[Indicates the current angle, in degrees, of the limiting cone]==],
	torsionspringconstraint = [==[A rotational spring that opposes the angular motion between two axes]==],
	throttle = [==[The direction of movement, tied to the keys W and S. Must be an integer 1 (forward) 0 (null) or -1 (reverse). Will refresh back to 0 unless constantly set.]==],
	brickcolor = [==[A data type that provides a predefined list of named colors.]==],
	studsoffset = [==[Determines how the BillboardGui is offset from its BillboardGui.Adornee, relative to the Camera orientation and units in studs.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	mountains = [==[Sound reverb is changed to sound like the player is in the mountains.]==],
	promptsaveavatarcompleted = [==[Fires when the AvatarEditorService:PromptSaveAvatar operation is completed]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	additionalcoreincludedirs = [==[Used internally by Roblox to add additional CoreScript loading directorie.
The value of this string should be full paths to each directory, separated only by semicolons (;)
]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	part1 = [==[The second part connected by the constraint.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	rightarmcolor3 = [==[Sets the color of this limb, as a <a href="/api-reference/datatype/Color3" title="API:Color3"><span>Color3</span></a>.]==],
	color3 = [==[Determines the colorization to be applied to the ShirtGraphic texture.]==],
	emit = [==[Emits a given number of particles]==],
	textservice = [==[The TextService is a service internally responsible for handling the display of text in the game.]==],
	statusremoved = [==[Fired when a status is removed from the Humanoid.]==],
	textwrapped = [==[Determines if text wraps to multiple lines within the TextLabel element space, truncating excess text.]==],
	level11 = [==[Graphic quality level 11.]==],
	textstrokecolor3 = [==[Determines the color of the text stroke (outline).]==],
	getchatforuserasync = [==[Returns the text in a properly filtered manner for the specified Player.UserId.]==],
	clientphysicspause = [==[Client owned physics is paused]==],
	jumptoindex = [==[If the index is &gt;= 0 and less than the size of the layout, this method acts like UIPageLayout:JumpTo. If it's out of bounds and circular is set, it will animate the full distance between the in-bounds index of UIPageLayout.CurrentPage and the new index.]==],
	glue = [==[Makes the side appear with thick diagonal "X"s]==],
	textwrap = [==[Determines whether or not text should wrap at the edges of the object]==],
	maxvisiblegraphemes = [==[The maximum number of graphemes the TextBox can show.]==],
	jointsservice = [==[A service that stores joints created by surface connections]==],
	getjoindata = [==[Returns a dictionary containing information on how the Player joined the game]==],
	warn = [==[Prints if a condition is true, otherwise prints a warning.]==],
	profilebegin = [==[Starts profiling for a MicroProfiler label.]==],
	maxvisiblegraphemes = [==[The maximum number of graphemes the TextButton can show.]==],
	vector2 = [==[A 2D value representing a direction and magnitude.]==],
	fontsize = [==[Determines the font size to be used]==],
	font = [==[Determines the font used to render text.]==],
	focused = [==[Fires when the TextBox gains focus.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	isplaying = [==[This read-only property will return true when the Sound is playing.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	getplayinganimationtracks = [==[Returns an array of all AnimationTrack that are currently being played on the Humanoid]==],
	texttruncate = [==[Controls the truncation of the text displayed in this TextBox.]==],
	intconstrainedvalue = [==[An IntConstrainedValue is used to store a value which can never be less than MinValue and can never be more than MaxValue.]==],
	texttransparency = [==[Determines the transparency of rendered text.]==],
	textfits = [==[Whether the text fits within the constraints of the TextBox.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	selectionstart = [==[Determines the starting position of a text selection, or -1 if no text is selected]==],
	canvassize = [==[Determines the size of the area that is scrollable. The UDim2 is calculated using the parent gui's size, similar to the regular Size property on gui objects.]==],
	decay = [==[When used with increased Atmosphere.Haze and Atmosphere.Glare, defines the hue of the Atmosphere away from the sun, gradually falling off from Atmosphere.Color towards this value.
See the articles.Atmosphere article for property comparisons and example environments.
<h2>See also</h2>
<ul>
<li>articles/Custom Skyboxes|Custom Skyboxes, outlines how to change the default skybox for games and customize the lighting</li>
<li>articles/Post Processing Effects|Post-Processing Effects, outlines how post-processing effects can quickly improve a game's visuals with a variety of customizable filters</li>
</ul>]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	multiline = [==[When set to true, text inside a TextBox is able to move onto multiple lines. This also enables players to use the enter key to move onto a new line.]==],
	font = [==[Determines the font used to render text]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	objecttext = [==[An optional property that determines the object name text shown to the user]==],
	completed = [==[The Completed event of a Tween fires when the tween finishes playing. This will happen either when the tween naturally finishes playing, or if it is stopped with TweenBase:Cancel.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	adornee = [==[Sets the object to adorn to.]==],
	health = [==[Describes the current health of the Humanoid on the range [0, Humanoid.MaxHealth].]==],
	reportabuse = [==[Attempts to report the given player for the given reason]==],
	characteradded = [==[Fired when a player's character spawns or respawns.]==],
	numplayers = [==[Returns the number of people in the server at the current time]==],
	fail = [==[Indicates a fatal error in a TestService run.
If this is called inside of a script running inside of the TestService, this will initiate a <a href="/articles/Lua-debugger" class="mw-redirect" title="Lua Debugger">breakpoint</a> on the line that invoked the error.
]==],
	maxvalue = [==[The highest number that the IntConstrainedValue.Value property can be.]==],
	simulatesecondslag = [==[Sets a specific amount of additional latency experienced by players during the test session.]==],
	isphysicsenvironmentalthrottled = [==[Sets whether or not the physics environment should be throttled while running this test.]==],
	is30fpsthrottleenabled = [==[Sets whether or not the physics engine should be throttled to 30 FPS while the test is being ran.]==],
	executewithstudiorun = [==[When set to true, the TestService will be executed when using the <em>Run</em> action in Roblox Studio.]==],
	description = [==[A description of the test being executed.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	writevoxels = [==[Sets a certain region of <a href="/articles/Intro-To-Terrain" title="Smooth terrain">smooth terrain</a> using the <a href="/articles/Intro-To-Terrain#Reading_and_writing_voxels" title="Smooth terrain">table format</a>]==],
	worldtocellprefersolid = [==[Returns the grid cell location that contains the point position, preferring non-empty grid cells when position is on a grid edge.]==],
	currentdistance = [==[The current distance between the RopeConstraint's two Attachment.]==],
	actionid = [==[A string that uniquely identifies this action.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	neutral = [==[Determines whether the player is on a specific team.]==],
	readvoxels = [==[Returns a certain region of smooth terrain in table format]==],
	customizedteleportui = [==[<em>No longer does anything</em>]==],
	datastoreoptions = [==[Object used to provide additional parameters to DataStoreService:GetDataStore.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	vectorforce = [==[A constraint used to apply a force to a part or assembly of parts]==],
	getmaterialcolor = [==[Returns current terrain material color for specified terrain material.]==],
	rigidityenabled = [==[When true, the solver reacts as quickly as possible to complete the alignment. When false, the torque is dependent on AlignOrientation.MaxTorque, AlignOrientation.MaxAngularVelocity, and AlignOrientation.Responsiveness.]==],
	userinputstate = [==[Describes the state of an input being performed, following a specific flow depending on the InputObject.UserInputType]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	cellcornertoworld = [==[Returns the position of the lower-left-forward corner of the grid cell (x, y, z).]==],
	waterwavespeed = [==[Sets how many times the Terrain water waves will move up and down per minute.]==],
	watertransparency = [==[The transparency of the Terrain water.]==],
	clickbutton1 = [==[Simulates the user clicking the left mouse button.]==],
	horizontal = [==[The output layout is horizontal (x-axis).]==],
	alwayson = [==[The humanoid's health display is always visible.]==],
	teleporttospawnbyname = [==[A variant of TeleportService:Teleport that causes the Player to spawn at a SpawnLocation of the given name at the destination place]==],
	rightbrowlowerer = [==[Lowers the right brow down]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	getteleportsetting = [==[Retrieves a teleport setting saved using TeleportService:SetTeleportSetting using the given key]==],
	getlocalplayerteleportdata = [==[Returns the <em>teleportData</em> the Players.LocalPlayer arrived into the place with]==],
	z = [==[The z-coordinate of the position.]==],
	getbasesets = [==[Returns an array of dictionaries, containing information about various Roblox approved sets.]==],
	perpendicular = [==[Two perpendicular axes]==],
	pantstemplate = [==[Determines the texture of the Pants. The content ID link pointing to the pants template hosted on the Roblox website.]==],
	reservedserveraccesscode = [==[The access code of the reserved server that the players are being teleported to]==],
	addselectionparent = [==[Creates a gui selection group where gamepad gui navigation will only consider selectable gui objects that are within the group (children of selectionParent).]==],
	referenceorigin = [==[Reference mesh offset relative to parent MeshPart (in the parent MeshPart space)
Note: this property is set up automatically by the FBX importer]==],
	level06 = [==[Graphic quality level 6.]==],
	selectionchanged = [==[Fires when the Instances selected in Roblox Studio changes.]==],
	emittersize = [==[The minimum distance, in studs, at which a 3D Sound (direct child of a BasePart or Attachment) will begin to attenuate (decrease in volume)]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	gamepadcamerasensitivity = [==[Describes how sensitive the camera is when using a gamepad.]==],
	playeradded = [==[Fires whenever a Player is assigned to the Team. A player is considered assigned if their Player.Team property is equal to the Team and Player.Neutral is false.]==],
	lightinfluence = [==[Controls how much the SurfaceGui is influenced by the lighting in the game world.]==],
	x = [==[The x-coordinate of the Vector2int16.]==],
	teamcolor = [==[This property sets the color of the Team. Determines the Player.TeamColor property of players who are a member of the team. Also determines the color displayed on the player list and above player's heads.]==],
	team = [==[The Team class represents a faction in a Roblox place. The only valid parent for a Team is in the Teams service.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	openwikipage = [==[Opens the context help window to the wiki page that url links to.]==],
	schedulerdutycycle = [==[The average time divided by the average interval of the duty cycle.]==],
	getchildren = [==[Returns an array containing all of the Instance's children.]==],
	pixelsperstud = [==[Determines the number of screen-space pixels per world-space stud used to render the contents of the SurfaceGui]==],
	yellow = [==[Returns the BrickColor Bright Yellow.]==],
	clipsdescendants = [==[When set to true, portions of GuiObjects that fall outside of the SurfaceGui's canvas borders will not be drawn.]==],
	gsub = [==[Returns a copy of s in which all or the first n occurrences of the pattern are replaced with the given replacement. The second value returned is the total number of substitutions made.]==],
	canvassize = [==[The size of a 'virtual screen', in 'virtual pixels', which makes SurfaceGuis pixel-to-pixel compatible with ScreenGuis.]==],
	alwaysontop = [==[Determines whether the SurfaceGui will always be rendered on top of other objects.]==],
	active = [==[Whether or not mouse events will be passed to objects layered below.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	roughnessmap = [==[Determines the apparent roughness across the surface]==],
	normalmap = [==[Modifies the lighting of the surface by adding bumps, dents, cracks, and curves without adding more polygons]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	pause = [==[Pauses the game’s simulation if it is running, suspending physics and scripts]==],
	healthdisplaydistance = [==[Used in conjunction with the Humanoid's Humanoid.DisplayDistanceType property to either determine how far a player controlling this Humanoid can see another humanoid's health bar, or how far this Humanoid's health displays to other viewing players.]==],
	servercollectconditionalresult = [==[Fired when the server should collect a conditional test result.]==],
	modf = [==[Returns two numbers, the integral part of x and the fractional part of x.]==],
	leftcheekraiser = [==[Squints the left eye]==],
	getuseridfromnameasync = [==[Sends a query to the Roblox website for the Player.UserId of an account with a given username]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	orbital = [==[The camera locks at a certain angle. Once it’s set, players can rotate the camera, but it will always maintain a consistent angle to the ground.]==],
	frequency = [==[Sets how often the effect will oscillate the volume.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	promptimportfile = [==[Prompts the current Studio user to select one file to add as a File]==],
	flying = [==[When set, the Humanoid won't be animated, as with the Humanoid.PlatformStand property. <em>Lasts as long as the player flies.</em>]==],
	isedit = [==[Returns whether the current environment is in Edit mode]==],
	instances = [==[All the Instances present in memory.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	createpluginaction = [==[Creates a PluginAction which is an object that represents a generic performable action in Roblox Studio, with no directly associated Toolbar or Button]==],
	preload = [==[Queues an asset to be downloaded by the ContentProvider]==],
	leftlegcolor3 = [==[Sets the color of this limb, as a <a href="/api-reference/datatype/Color3" title="API:Color3"><span>Color3</span></a>.]==],
	verticalscrollbarinset = [==[Indicates the inset behavior of the vertical scrolling bar.]==],
	localplayer = [==[The Player that the LocalScript is running for.]==],
	holdduration = [==[The duration, in seconds, that the player must hold the button/key down to trigger the prompt]==],
	startcorner = [==[Determines from which corner the grid starts laying out UI elements.]==],
	pause = [==[The Pause function halts playback of its Tween. If TweenBase.Resume is called again the tween will resume playback from the moment it was paused.]==],
	codes = [==[Returns an iterator function that iterates over all codepoints in a given string.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	orbital = [==[The camera has a fixed Y position, but can be rotated around the player.]==],
	sqrt = [==[Returns the square root of x.]==],
	textwrapped = [==[Determines if text wraps to multiple lines within the TextButton element space, truncating excess text]==],
	environmentspecularscale = [==[Specular light derived from environment]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	removeversionasync = [==[Permanently deletes the specified version of a key.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	devcomputercameramovementmode = [==[Lets developer overwrite the default camera mode for each player if the player is on a computer.]==],
	enablefrm = [==[Toggles the enabled state of the framerate manager.]==],
	setgameplaypausednotificationenabled = [==[Allows developers to disable the built-in notification when a players gameplay is paused]==],
	pluginsdir = [==[The directory where local plugins are stored.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	changed = [==[Fired whenever the DoubleConstrainedValue.Value of the DoubleConstrainedValue is changed]==],
	threadpoolconfig = [==[The specified thread pooling configuration for the task scheduler.]==],
	saveplace = [==[Saves the current place]==],
	luadebuggerenabled = [==[Specifies whether or not the <a href="/articles/Lua-debugger" class="mw-redirect" title="Lua Debugger">Lua Debugger</a> feature is enabled.]==],
	isfriendswith = [==[Checks whether a player is a friend of the user with the given Player.UserId]==],
	meshid = [==[The <strong>MeshId</strong> is the content ID of the mesh that is to be displayed on the MeshPart]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	preferredplayersinternal = [==[Players.PreferredPlayers for internal use.]==],
	tabbar = [==[The background color of the tab bar, like the one where the script editor is opened]==],
	red = [==[Returns the BrickColor Bright Red.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	newproxy = [==[Creates a bank userdata.]==],
	pathwaypoint = [==[A description of the steps required to reach the next waypoint in a path.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	runtimescriptservice = [==[An internal service, probably in charge of managing the execution of scripts in run-time..]==],
	getguiinset = [==[Returns two DataType.Vector2 values representing the inset of user GUIs in pixels, from the top left corner of the screen and the bottom right corner of the screen respectively.]==],
	next = [==[Sets UIPageLayout.CurrentPage to the page after the current page and animates to it, or does nothing if there isn't a next page.]==],
	richtext = [==[Determines whether the TextLabel renders the TextLabel.Text string using rich text formatting.]==],
	uimaximum = [==[The maximum value of this property. Used with ReflectionMetadataItem.UIMinimum to control the slider bar of this property in the <i>Properties</i> window.]==],
	last = [==[This should run as last, after Character]==],
	physicssteptimems = [==[A measurement of how long it takes for the physics engine to update its current state, in milliseconds.<br />
If this value is high, then it means the game instance is under stress from the physics simulations taking place.]==],
	defer = [==[Calls/resumes a function/coroutine on the next resumption cycle.]==],
	contactscount = [==[A measurement of how many parts are currently in contact with one another.]==],
	uistroke = [==[Applies an outline to text or a UI border]==],
	loadlibrary = [==[Returns a built-in Roblox library by name.]==],
	head = [==[The head BodyPart.]==],
	texture = [==[The content ID of the texture to be displayed on the Beam.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	unequipped = [==[Fired whenever the skateboard is unequipped.]==],
	adornee = [==[Sets the part or attachment that the BillboardGui is adorned too.]==],
	subject = [==[Name and healthbar will be displayed based on the distance settings of the humanoid being viewed, i.e. the one with this property set.]==],
	proportionscale = [==[Determines how wide (0) or narrow (1) a Humanoid rig is; when Humanoid:ApplyDescription, maps to the "BodyProportionScale" NumberValue within the Humanoid.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	outlines = [==[Determines whether outlines are enabled or disabled in a place]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	resetplayerguionspawn = [==[Determines whether each child parented to the StarterGui will be cloned into a player's PlayerGui when that player's character is respawned.]==],
	useremotesenabled = [==[Determines if user-owned emotes are loaded when loading avatars.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	extentsoffsetworldspace = [==[Determines how the BillboardGui is offset from its BillboardGui.Adornee, relative to the global axes and units are half the dimensions of the model's axis-aligned bounding box.]==],
	b = [==[The blue component of the BrickColor (between 0 and 1).]==],
	thickness = [==[The visualized thickness of the spring's coils.]==],
	rate = [==[The frequency that the effect oscillates at.]==],
	currentlength = [==[The current distance between the SpringConstantâ€™s Attachment.]==],
	range = [==[The size of the area that the SpotLight will illuminate.]==],
	angle = [==[The angle of which the light is shone from the SpotLight.]==],
	playbackstate = [==[<strong>PlaybackState</strong> describes the current stage for the Tween animation. A description of each state can be found on the page for the Enum.PlaybackState enum. It can be manipulated through other Tween functions, like Tween.Play.]==],
	enumitem = [==[An individual item in an enum.]==],
	setlistener = [==[Sets the listener for the SoundService.]==],
	idleanimation = [==[When this description is Humanoid:ApplyDescription to a Humanoid, this determines the Animation.AnimationId to play when its Humanoid:GetState is enum.HumanoidStateType at a speed near zero]==],
	removekeyatindex = [==[Removes a given number of Keys starting from a given index. Returns the number of keys that were removed.]==],
	sit = [==[Describes whether the Humanoid is currently sitting.]==],
	displayorder = [==[Controls the order that multiple ScreenGuis are drawn.]==],
	friendservice = [==[An internal service which is used to send, cancel, accept and decline friend requests in-game]==],
	value = [==[The integral value assigned to the EnumItem.]==],
	clearcomputercameramovementmodes = [==[Unregisters all ComputerCameraMovementMode enums from the game settings menu.]==],
	applyatcenterofmass = [==[When true, applies force at center of mass of Attachment0's parent Part. When false, applied at Attachment0.]==],
	volume = [==[The volume multiplier applied to Sounds that are in the SoundGroup. This value ranges from 0 to 10.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	kick = [==[Forcibly disconnect a player from the game, optionally providing a message.]==],
	soundgroup = [==[A SoundGroup is used to manage the volume and sound effects on multiple Sounds at once. Sounds in the SoundGroup will have their volume and effects adjusted by the SoundGroup.]==],
	unit = [==[The Ray with a normalized direction.]==],
	stopped = [==[Fires when the Sound is stopped due to the Sound:Stop function.]==],
	characterforward = [==[The player moved forward.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	error = [==[Fired when an error occurs.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	paused = [==[Fires whenever the Sound is paused using Sound:Pause.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	enabled = [==[Determines whether smoke particles are emit]==],
	loadnumber = [==[Returns a number value that was previously saved to the player]==],
	changed = [==[Fired whenever the CFrameValue.Value of the CFrameValue is changed.]==],
	loaded = [==[Fires when the Sound is loaded.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	play = [==[Plays the Sound. Sets Sound.TimePosition to the last value set by a Script (or 0 if it has not been set), and then sets Sound.Playing to true.]==],
	inuse = [==[If true, this dialog is being used by at least one player.]==],
	descendantremoving = [==[Fires immediately before a descendant of the Instance is removed.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	watercolor = [==[The tint of the Terrain water.]==],
	volume = [==[The volume of the Sound. Can be set between 0 and 10. Defaults to 0.5]==],
	soundid = [==[This property is the content ID of the sound file a Sound object is associated with. Once a sound has been uploaded to Roblox the content ID can be found in the uploaded sound’s URL.]==],
	editqualitylevel = [==[Sets the graphics quality level in Roblox Studio, when RenderSettings.EnableFRM is set to false.]==],
	rolloffmaxdistance = [==[The maximum distance, in studs, a client's listener can be from the Sound origin and still hear it. Only applies to Sounds parented to a Part or Attachment (3D sounds)]==],
	playing = [==[Indicates whether the Sound is currently playing.]==],
	cycleoffset = [==[A decimal number between 0 and 1, through which you can control how far all of the decals are along the wire.]==],
	getasync = [==[Refers to GlobalDataStore.GetAsync.]==],
	extentsoffset = [==[Determines how the BillboardGui is offset from its BillboardGui.Adornee, relative to the Camera orientation and units are half the dimensions of the model's Camera-aligned bounding box.]==],
	color = [==[Determines the color of the primary (outer) flame particles]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	setgamepadcamerasensitivityvisible = [==[If called, Roblox toggles the menu option to control the camera sensitivity with gamepads.]==],
	cacheablecontentprovider = [==[A variant of the ContentProvider that caches assets that have already been received. This service is not used directly, but it is used by the services that inherit from it.]==],
	aremodelcoordsshown = [==[An ancient property that hasn't work correctly since late 2007.
It's supposed to render an XYZ axis on the root part of a Model, but the axis rendering component doesn't work correctly.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	size = [==[Determines the size of newly emit smoke particles]==],
	setvalue = [==[Sets the value of the CustomEvent and fires the CustomEventReceiver.SourceValueChanged event for all connected CustomEventReciever]==],
	luckiestguy = [==[<style>@import url('https://fonts.googleapis.com/css2?family=Luckiest+Guy');</style>
<p class="text-nowrap" style={{fontFamily: 'Luckiest Guy', fontSize: '1.6em', margin: '5px 0px'}}>The quick brown fox jumps over the lazy dog.<br />0123456789 , : ! ? # % & ( ) - + =]==],
	motormaxforce = [==[The maximum force a SlidingBallConstraint with SlidingBallConstraint.ActuatorType set to Enum.ActuatorType can apply when trying to reach its desired SlidingBallConstraint.Velocity.]==],
	new = [==[Returns an instance of the specified class.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	leftlegcolor = [==[Sets the color of this limb, as a <a href="/api-reference/datatype/BrickColor" class="mw-redirect" title="API:BrickColor"><span>BrickColor</span></a>.]==],
	textcolor3 = [==[This property determines the color of rendered text]==],
	sunangularsize = [==[The perceived angular size of the sun while using this skybox, in degrees.]==],
	skyboxup = [==[The URL link to a picture for the top surface of the sky.]==],
	vrenabled = [==[Indicates whether the user is using a virtual reality headset]==],
	plugindragleft = [==[Fires when the user's mouse leaves a PluginGui during a drag operation started by Plugin:StartDrag]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	movestatechanged = [==[Fired when the SkateboardPlatform's SkateboardPlatform.ControllingHumanoid changes the force being used on the SkateboardPlatform.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	getequippedemotes = [==[Returns an array of tables describing the equipped emotes that have been HumanoidDescription:SetEquippedEmotes]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	stickywheels = [==[If true, wheels won't roll without user input.]==],
	top = [==[The object is above its parent.]==],
	top = [==[Top of the grid.]==],
	graphic = [==[The content ID link pointing to the ShirtGraphic texture hosted on the Roblox website. This property sets the texture associated with a t-shirt.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	tweentime = [==[The length of the animation.]==],
	idle = [==[Fired during every heartbeat that the mouse isn't being passed to another mouse event.]==],
	none = [==[The client's operating system is unknown.]==],
	teleporttoplaceinstance = [==[Teleports a Player to the server instance associated with the given <em>placeId</em> and <em>instanceId</em>]==],
	serverinstanceid = [==[The DataModel.JobId of the server instance to teleport to]==],
	serviceprovider = [==[A ServiceProvider is an abstract class, which stores, and provides certain singleton classes, depending on what inherited class you are using its members with.]==],
	force = [==[Determines the force exerted on each axis]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	point = [==[Sets the Vector3 target of the lasso object.]==],
	surfacetransparency = [==[Determines the transparency of the box's surfaces, similar to BasePart.Transparency]==],
	set = [==[Sets the currently selected objects in Roblox Studio to Instances in the given array.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	occupant = [==[The humanoid that is sitting in the seat]==],
	disabled = [==[Whether or not the seat is usable. If set to true, the seat will act as a normal part.]==],
	unauthorized = [==[The player is not authorized to complete this teleport.]==],
	head = [==[Reference to a Humanoid's Head.]==],
	failfinishnotempty = [==[Failed to compute path; the finish point is not empty.]==],
	horizontalscrollbarinset = [==[Indicates the inset behavior of the horizontal scrolling bar.]==],
	scriptable = [==[The player will not respond to default controls; any character movement must be defined in custom scripts.]==],
	terrainvoxels = [==[Occupancy/Material data of the Terrain.]==],
	partoperationasset = [==[An internal service which cannot be used by developers.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	scale = [==[Determines the multiplier to apply to the parent UI element's size.]==],
	angularactuatortype = [==[Type of angular actuator: None, Motor, or Servo.]==],
	unequiptools = [==[Unequips any Tool currently equipped by the Humanoid]==],
	setmaterialcolor = [==[Sets current terrain material color for specified terrain material.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	initialenabled = [==[The enabled state of the PluginGui if it does not have a saved state from a previous session.]==],
	easingdirection = [==[The easing direction to use when performing an animation.]==],
	torso = [==[If the limb is a part of the Humanoid's Torso. <em>This includes UpperTorso and LowerTorso for R16 rigs.</em>]==],
	setwaypoint = [==[Sets a new waypoint which can be used as an undo or redo point.]==],
	getwatches = [==[Returns a list with all the watches for this debugger]==],
	getupvalues = [==[Returns a dictionary of all upvalues present in the stack specified.]==],
	getstack = [==[Returns an array of all active call stacks in the script.]==],
	getrendercframe = [==[Returns the actual DataType.CFramewhere the Camera is being rendered, accounting for any roll applied and the impact of VR devices]==],
	getglobals = [==[Returns a dictionary of all variables that are visible to the script's global stack, where the keys are the names of the variables, and the values are the actual values of the variables.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	ispaused = [==[Describes if this ScriptDebugger is paused.]==],
	leafygrass = [==[Applies to Terrain only.]==],
	isdebugging = [==[Describes if this ScriptDebugger is actually debugging the script attached to it.]==],
	currentline = [==[The current line that the script is on.]==],
	pack = [==[Returns a new table containing the provided values.]==],
	metalnessmap = [==[Determines which parts of the surface are metal and are non-metal]==],
	overlapparams = [==[A container for parameters used in boundary-querying functions.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	soundgroup = [==[The SoundGroup that is linked to this Sound. Volume and SoundEffects applied to this sound group will pass onto the sound. A sound can only be in one sound group at a time.]==],
	breakjoints = [==[Breaks any surface connection with any adjacent part, including Weld and other JointInstance.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	velocity = [==[The velocity a SlidingBallConstraint with SlidingBallConstraint.ActuatorType set to Enum.ActuatorType will attempt to achieve. Measured in studs/second.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	source = [==[The code to be executed]==],
	screengui = [==[Primary container of on-screen 2D user interface elements.]==],
	reflectionmetadatacallbacks = [==[Acts as a Folder containing information about callbacks for a ReflectionMetadataClass, and should be parented to it.
ReflectionMetadataMembers that are parented to this object will be perceived as callbacks under the class this is parented to.]==],
	fromaxisangle = [==[Returns a rotated CFrame from a Unit Vector3 and a rotation in radians.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	xvector = [==[Equivalent to the first column of the rotation matrix.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	none = [==[The user did not swipe in a certain direction.]==],
	aspecttype = [==[Determines what limits the maximum size of the UI element.]==],
	unbindfromrenderstep = [==[Unbinds a function that was bound to the render loop using RunService:BindToRenderStep]==],
	setnetworkowner = [==[Sets the given player as network owner for this and all connected parts]==],
	fillemptyspacecolumns = [==[Determines whether cells are sized such that they occupy the horizontal space of the parent UI element.]==],
	isserver = [==[Returns whether the current environment is running on the server]==],
	isclient = [==[Returns whether the current environment is running on the client]==],
	getschedulednotifications = [==[<b>(UNIMPLEMENTED)</b>]==],
	workspace = [==[A reference to the Workspace service]==],
	cartoon = [==[<img src="/assets/blt5a8c60f0e7d95b64/Font-Face-Sample-Cartoon.png" class="img-fluid half-sized" />]==],
	importorigin = [==[Describes where a global zero was while authoring the cage mesh in an asset creation tool.]==],
	emulatordropdown = [==[The color of the device and physical size dropdowns in the emulator bar]==],
	getvalueattime = [==[Samples the RotationCurve at a given time and returns the corresponding rotation. Empty RotationCurves are interpreted as zero.]==],
	sarpanch = [==[<style>@import url('https://fonts.googleapis.com/css2?family=Sarpanch');</style>
<p class="text-nowrap" style={{fontFamily: 'Sarpanch', fontSize: '1.65em', margin: '5px 0px'}}>The quick brown fox jumps over the lazy dog.<br />0123456789 , : ! ? # % & ( ) - + =]==],
	paddedcell = [==[Sound reverb is changed to sound like the player is in a padded cell.]==],
	adddebugger = [==[Registers a script to be used in the Lua Debugger. Returns a ScriptDebugger for the script.]==],
	seatpart = [==[A reference to the seat that a Humanoid is currently sitting in, if any.]==],
	length = [==[Number of rotation keys in this curve]==],
	translator = [==[The role of a Translator is to manufacture/return strings localized for the viewing player]==],
	length = [==[The maximum distance two Attachment can be when connected with a RopeConstraint. Measured in studs.]==],
	waterreflectance = [==[Controls how opaque the Terrain's water reflections are.]==],
	length = [==[The distance apart the RodConstraint attempts to keep its Attachment at. Measured in studs.]==],
	cos = [==[Returns the cosine of x (assumed to be in radians).]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	maxspeed = [==[Determines the maximum speed at which the part will move toward the RocketPropulsion.Target]==],
	cartoonfactor = [==[Determines the tendency of the part to face the RocketPropulsion.Target]==],
	rocketpropulsion = [==[Applies a force so that a part follows and faces another part]==],
	rigidconstraint = [==[Creates a rigid connection between two Attachment.]==],
	networkmarker = [==[The NetworkMarker is used to tell the client when the server has finished loading the world for the client.]==],
	density = [==[Controls how many reflections are generated.]==],
	pebble = [==[Applies to BasePart only.]==],
	datastorekeyinfo = [==[An object specifying information about a particular version of the key.]==],
	selectionbox = [==[Renders a 3D box around its PVAdornment.Adornee]==],
	packagelink = [==[Links a DataModel instance to a corresponding asset in the cloud]==],
	none = [==[Default sizing behavior]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	getpanspeed = [==[Returns the current ‘pan’ speed of the Camera]==],
	weldconstraint = [==[Joins two BasePart together such that their relative position and orientation remain the same.]==],
	getoutfits = [==[Returns outfit data for the Players.LocalPlayer]==],
	thickness = [==[The visualized thickness of the RodConstraint.]==],
	createcollisiongroup = [==[Creates a new collision group with the given name, and returns the id of the created group.]==],
	userdialog = [==[Sets what the player will say when they choose this DialogChoice.]==],
	frameratemanager = [==[Specifies the behavior of the framerate manager.]==],
	seated = [==[Fired when a Humanoid either sits in a Seat or VehicleSeat or gets up]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	aspectratio = [==[Determines the width-to-height ratio to be maintained by the constraint.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	remotefunction = [==[Used to create in-game APIs that both the client and the server can use to communicate with each other.]==],
	onserverevent = [==[Fires listening functions in Script when RemoteEvent:FireServer is called from a LocalScript.]==],
	billboardgui = [==[Containers for GUI objects that appear in the 3D space]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	decaytime = [==[Sets how long it takes for the reverberating echoes to fade out completely.]==],
	topleft = [==[Grid starts in top left corner.]==],
	plastic = [==[Applies to BasePart only.]==],
	gripright = [==[One of the properties that specifies a Tool's orientation in a character's hand. This represents the R00, R10, and R20 values of the Grip CFrame's rotation matrix]==],
	setemotesmenuopen = [==[Used to open or close the Emote menu.]==],
	reflectionmetadataitem = [==[Acts as abstract properties for generic information about Classes, Members, Enums, and EnumItems.]==],
	reflectionmetadataenum = [==[Registers information about an Enum and its EnumItems]==],
	alley = [==[Sound reverb is changed to sound like the player is in an alley.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	removeentryvalue = [==[Removes a single language translation from the LocalizationTable, using the provided <i>key</i>, <i>source</i>, <i>context</i>, and <i>localeId</i> to narrow down the specific entry to be removed.]==],
	clamp = [==[Returns a number between [min, max].]==],
	motormaxacceleration = [==[The maximum acceleration a SlidingBallConstraint with SlidingBallConstraint.ActuatorType set to Enum.ActuatorType can apply when trying to reach its desired SlidingBallConstraint.Velocity.]==],
	padding = [==[Determines the amount that pages are separated from each other by.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	reachedtarget = [==[Fired when the Rocket comes within TargetRadius of the Target. This is used to make the rocket work, such as make an explosion when it flies near the Target.]==],
	starterplayer = [==[A service which allows the defaults of properties in the Player object to be set.]==],
	rowmajor = [==[The direct siblings are considered rows.]==],
	getavatarrules = [==[Returns the platform Avatar rules for things like scaling, default shirts and pants, number of wearable assets, ect.]==],
	position = [==[The 3D position of the waypoint.]==],
	getvalueattime = [==[Samples the float curve at a given time passed as argument.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	devcameraocclusionmode = [==[Sets how the default camera handles objects between the camera and the player.]==],
	maxparts = [==[The maximum amount of parts to be returned by the query.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	fromunixtimestamp = [==[Returns a DateTime representing the given Unix timestamp.]==],
	stringvalue = [==[A container object for a single string.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	rayvalue = [==[A container object for a single Ray.]==],
	gettemporaryid = [==[Gets a <em>rbxtemp</em> asset id for this File]==],
	prompttriggered = [==[Triggers when the user interacts with this prompt]==],
	prompttriggerended = [==[Triggers when the player stops holding down the ProximityPrompt.KeyboardKeyCode/button while triggering a prompt]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	physicscollision = [==[Collision detection in the Workspace.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	promptbuttonholdbegan = [==[Triggers when the player begins holding down the ProximityPrompt.KeyboardKeyCode/button on a prompt with a non-zero ProximityPrompt.HoldDuration]==],
	cantouch = [==[Determines if the part will trigger BasePart.Touched/BasePart.TouchEnded events on other BasePart with TouchTransmitter]==],
	oneglobally = [==[One prompt will be shown per input enum.KeyCode]==],
	interpolation = [==[The key interpolation mode for the segment started by this key.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	createplaceinplayerinventoryasync = [==[Clones a place which has placeId equal to given templatePlaceId and puts it into the inventory of the given player.]==],
	pathfindingmodifier = [==[Modifiers used to represent space that has a higher or lower cost to be traversed when creating paths using the PathfindingService]==],
	changed = [==[Fired whenever the ObjectValue.Value is changed]==],
	unpack = [==[Returns all elements from the given list as a tuple.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	autoruns = [==[If set to true, the game will start running when the TestService's TestService:Run method is called.]==],
	windowfocused = [==[Fires when the user begins interacting with the window of the PluginGui.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	status = [==[The status of the package.]==],
	promptbuttonholdended = [==[Triggers when the player ends holding down the button on a prompt with a non-zero ProximityPrompt.HoldDuration]==],
	min = [==[Returns a Vector2 where each component is the lowest among the respective components of the provided Vector2s.]==],
	advancetonextpageasync = [==[Iterates to the next page in the pages object, if possible.]==],
	gamepadkeycode = [==[The gamepad button the player should press to trigger the prompt]==],
	enabled = [==[Toggles whether or not the PostEffect is enabled.]==],
	posteffect = [==[Abstract base class for post-processing effects]==],
	pose = [==[A Pose holds the CFrame applied to the Motor6D connected to its associated BasePart. The part which is controlled depends on the name of the Pose.]==],
	corepackages = [==[An internal service which stores ModuleScripts used by Roblox's CoreScripts.]==],
	invokechatcallback = [==[Invoke a chat callback function registered by Chat:RegisterChatCallback. Used by the Lua Chat System.]==],
	right = [==[The user swiped right.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	getgamepointbalance = [==[Returns the total number of points a player has in the current game]==],
	lerp = [==[Returns a CFrame interpolated between this CFrame and the goal by the fraction alpha.]==],
	getremotebuildmode = [==[This method is no longer useful and will always return false]==],
	pointsservice = [==[This service controls the points award system used to showcase a player's achievements and participation throughout Roblox]==],
	currentangle = [==[The current angle of the HingeConstraint.]==],
	xaxis = [==[A Vector3 with a value of 1 on the X axis.]==],
	resetorientationtoidentity = [==[Resets the rotation of the model's parts to the previously set identity rotation, which is done through the Model:SetIdentityOrientation method.]==],
	isregion3emptywithignorelist = [==[Returns a bool indicating whether there are no BaseParts within in the given DataType.Region3, ignoring any BaseParts that are descendants of the objects within the given ignore list.]==],
	inverse = [==[Volume attenuates from Sound.EmitterSize in an inverse manner]==],
	spawn = [==[Calls a function immediately through the engine scheduler, with throttling.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	addnewaction = [==[Creates a temporary action that is hidden from Studio's customize shortcuts window
<ul>
<li>This function creates a temporary action that is hidden from Studio's customize shortcuts window.</li>
</ul>
<h2>See also</h2>
<ul>
<li>articles/Intro to Plugins, an introductory article to plugin use and development</li>
<li>PluginAction, an object that represents a generic performable action in Roblox Studio, with no directly associated Toolbar or Button.</li>
<li>Plugin:CreatePluginAction, creates a PluginAction</li>
<li>PluginMenu.Title, the text to be displayed when used as a sub menu</li>
<li>PluginMenu.Icon, the icon to be displayed when used as a sub menu</li>
<li>PluginMenu:AddAction, adds the given action to the menu</li>
<li>PluginMenu:AddMenu, adds the given menu as a separator</li>
<li>PluginMenu:AddSeparator, adds a separator between items in the menu</li>
<li>PluginMenu:Clear, clears the menu</li>
<li>PluginMenu:ShowAsync, shows the menu at the mouse cursor. Yields until either an item is selected or the menu is closed. The selected action fires its Triggered event</li>
</ul>]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	torque = [==[The strength and direction of the torque.]==],
	radius = [==[The visualized radius of the spring's coils.]==],
	manualactivationonly = [==[The ManualActivationOnly property controls whether the Tool can be activated without executing Tool:Activate]==],
	clear = [==[Clears all particles that have been emit]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	isingroup = [==[Checks whether a player is a member of a group with the given ID.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	pluginguiservice = [==[A service that stores PluginGui objects to be displayed in Roblox Studio.]==],
	easingdirection = [==[The direction in which the EasingStyle executes.]==],
	promptcreateoutfit = [==[Prompts the Players.LocalPlayer to save the given HumanoidDescription as an outfit]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	plugindragentered = [==[Fires when the user's mouse enters a PluginGui during a drag operation started by Plugin:StartDrag]==],
	isuseravailableforexperiment = [==[Returns true if the user is available for Roblox experiments]==],
	localize = [==[Automatically set to true when a LocalizationTable's Root targets this object, or an ancestor of this object.]==],
	relativeyy = [==[The scale of Y is shared with X]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	leftlipcornerdown = [==[Lowers the corners of the mouth downwards in a frown]==],
	allowbinding = [==[Whether the PluginAction will be hidden from Studio's shortcuts view]==],
	currentscreenorientation = [==[Describes the user's current screen orientation.]==],
	unloading = [==[Fires immediately before the Plugin stops running]==],
	invokeclient = [==[Calls the method bound to the RemoteFunction by RemoteFunction.OnClientInvoke for the given Player. Use from a Script.]==],
	applicationjson = [==[The HTTP request data is in Json]==],
	deactivation = [==[Fired when the plugin is deactivated]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	tonumber = [==[Returns the provided value converted to a number, or nil if impossible.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	promptsaveselection = [==[Prompts the user to save their current selection with the specified file name. Returns true if the user did save the file.]==],
	carpettedhallway = [==[Sound reverb is changed to sound like the player is in a carpeted hallway.]==],
	sphere = [==[The mesh is a sphere.]==],
	walktopart = [==[A reference to a part whose position is trying to be reached by a humanoid.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	separate = [==[Separates the given UnionOperations and returns the resulting parts.]==],
	referencemeshid = [==[AssetID for reference mesh used to define Inner Cage of a 3D object]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	diffusion = [==[Controls how smooth and reflective the simulated surfaces are.]==],
	none = [==[The ScrollingFrame will never be insetted for this scrolling bar.]==],
	setcore = [==[Allows you to perform certain interactions with Roblox's CoreScript]==],
	metal = [==[Applies to BasePart only.]==],
	isactivated = [==[Returns true if this plugin is currently active, after having been activated via the Plugin:Activate function]==],
	distanceupperlimit = [==[Determines the distance in studs that a BillboardGui will stop scaling smaller in size at]==],
	allowcustomanimations = [==[Describes the current game's permission levels regarding custom avatar animations from the website]==],
	addstatus = [==[Adds a BoolValue to the Humanoid's <em>Status</em> object.]==],
	setlocal = [==[Sets the value of the variable <i>name</i> as <i>value</i> in the stack specified.]==],
	createpluginmenu = [==[Creates a new plugin menu]==],
	robloxlocked = [==[A deprecated property that used to protect CoreGui objects]==],
	fondamento = [==[<style>@import url('https://fonts.googleapis.com/css2?family=Fondamento');</style>
<p class="text-nowrap" style={{fontFamily: 'Fondamento', fontSize: '1.75em', margin: '5px 0px'}}>The quick brown fox jumps over the lazy dog.<br />0123456789 , : ! ? # % & ( ) - + =]==],
	httpenabled = [==[Indicates whether http request can be sent to external websites]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	getdeveloperproductsasync = [==[Returns a Pages object which contains information for all of the current game's developer products.]==],
	nx = [==[The client is running on an NX Operating System (Cisco Nexus).]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	cleartouchcameramovementmodes = [==[Unregisters all TouchCameraMovementMode enums from the game settings menu.]==],
	textfits = [==[A boolean representation of whether the TextButton's text fits within the size of it.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	guidregistryservice = [==[An internal service, whose functionality is not accessible to developers.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	findfirstancestorofclass = [==[Returns the first ancestor of the Instance whose Instance.ClassName is equal to the given className.]==],
	walkanimation = [==[The asset is a walk animation.]==],
	vectortoworldspace = [==[Returns a Vector3 rotated from Object to World space.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	getuserthumbnailasync = [==[Returns the content URL of a player thumbnail given the size and type (avatar, bust, headshot), and a bool describing if the image is ready to be used]==],
	own = [==[The current user or group roleset can download a copy of the page from Roblox, publish package changes to Roblox, and manage who has access to the package.]==],
	numberrange = [==[A datatype that represents a range of numbers.]==],
	elapsedtime = [==[Returns the amount of time in seconds that the current instance of Roblox has been running for.]==],
	left = [==[The left face of a Part.]==],
	onscreenkeyboardsize = [==[Determines the size of the on-screen keyboard]==],
	getfriendsasync = [==[Returns a FriendPages object which contains information for all of the given player's friends]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	showasync = [==[Shows the menu at the mouse cursor. Yields until either an item is selected or the menu is closed]==],
	whisperchat = [==[Delivers the given message to a recipient without anyone else seeing]==],
	cagemeshid = [==[Asset ID for cage mesh.]==],
	meleeweapons = [==[Gear with the 'Melee' attribute.
<img alt="Melee Attribute" src="/assets/bltb08afda60a136e61/GearType_Melee.png" />]==],
	all = [==[The game's genre is set to All. The game will be listed as all possible genres.]==],
	teleportoptions = [==[Optional input arguments to the TeleportService:TeleportAsync function]==],
	activated = [==[Fired when the player clicks while a tool is equipped]==],
	localtoolequipped = [==[Fires when the current player equips a <a href="/api-reference/class/Tool" class="mw-redirect" title="Tool">Tool</a>.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	enemy = [==[Causes the dialog to have a red bar on its left-hand side.]==],
	bubblechat = [==[Indicates whether or not bubble chat is enabled. It is set with the Players:SetChatStyle method.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	settopbartransparency = [==[Sets the transparency of the Topbar CoreGui.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	size180x180 = [==[Thumbnail resolution is 180 pixels x 180 pixels.]==],
	screenorientation = [==[Sets the preferred screen orientation mode for this user, if the user is on a mobile device.]==],
	tolocaltime = [==[Returns the components of the DateTime in local time.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	setcoreguienabled = [==[Sets whether the CoreGui element associated with the given Enum.CoreGuiType is enabled or disabled]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	lefthand = [==[Reference to a Humanoid's LeftHand.]==],
	exportselection = [==[Exports the current Selection to an .OBJ file that is saved to the path chosen by the user in a file save dialogue (the filePath argument is ignored).]==],
	warn = [==[Prints if a condition is true, otherwise prints a warning.]==],
	getrankingroup = [==[Returns the player's rank in the group as an integer between 0 and 255, where 0 is a non-member and 255 is the group's owner.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	indieflower = [==[<style>@import url('https://fonts.googleapis.com/css2?family=Indie+Flower');</style>
<p class="text-nowrap" style={{fontFamily: 'Indie Flower', fontSize: '1.85em', margin: '5px 0px'}}>The quick brown fox jumps over the lazy dog.<br />0123456789 , : ! ? # % & ( ) - + =]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	linearvelocity = [==[Applies force on a part/assembly to maintain a linear velocity.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	getkeyindicesattime = [==[Returns the index of the last and first key of a period of time.]==],
	torsocolor = [==[Determines the BodyColors.TorsoColor3 of a Humanoid when applied]==],
	savenumber = [==[Saves a number value that can be loaded again at a later time using]==],
	terrain = [==[Terrain lets you to create dynamically morphable environments]==],
	move = [==[Causes the player's character to walk in the given direction until stopped, or interrupted by the player (by using their controls).]==],
	getplayerbyuserid = [==[Returns the Player with the given Player.UserId if they are in-game]==],
	loadstring = [==[Returns a string value that was previously saved to the player]==],
	lightemission = [==[Sets how much the colors of the trail are blended with the colors behind them.]==],
	getmotor = [==[Returns the current vibration value set to the specified <a href="/api-reference/property/InputObject/UserInputType" class="mw-redirect" title="UserInputType">UserInputType</a> and <a href="/api-reference/enum/VibrationMotor" class="mw-redirect" title="VibrationMotor">VibrationMotor</a>.
This will not return anything if <a href="/api-reference/function/HapticService/SetMotor" class="mw-redirect" title="SetMotor">SetMotor</a> has not been called prior.
]==],
	findpartonraywithignorelist = [==[Returns the first BasePart or Terrain cell intersecting with the given DataType.Ray that isn't in, nor is a descendant of an object in, the given ignore list]==],
	loadcharacterappearance = [==[Places the given instance either in the player's character, head, or StarterGear based on the instance's class.]==],
	equipped = [==[Fired when the skateboard is equipped.]==],
	thrustd = [==[Determines the dampening applied to the part in order to prevent it from overshooting the RocketPropulsion.Target]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	removemarker = [==[Removes a KeyframeMarker from the Keyframeby settings its Instance.Parent to nil]==],
	computesmoothpathasync = [==[Computes and returns a smooth Path between two DataType.Vector3]==],
	width = [==[The X dimension of the UDim2.]==],
	hasappearanceloaded = [==[Returns whether or not the appearance of the player's character has loaded.]==],
	getmouse = [==[Returns the mouse being used by the client.]==],
	asin = [==[Returns the arc sine of x.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	getmemoryusagembfortag = [==[Returns the number of megabytes that are being consumed in the specified <i>DeveloperMemoryTag</i> category.]==],
	reportsoundwarnings = [==[Whether or not sound warnings should be reported.]==],
	shadowmap = [==[Future-Is-Bright lighting features. Features crisp shadows.
<img alt="ShadowMap" src="/assets/blt5d79df0c0af20ab8/Technology.ShadowMap.jpg" />]==],
	getemotesmenuopen = [==[Checks if the player Emotes menu is open.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	physicssteppingmethod = [==[Sets how the solver will advance the physics simulation forward in time.]==],
	movement = [==[(2) - 2nd highest priority]==],
	namedisplaydistance = [==[Sets the distance at which this player will see other Humanoid's names. If set to 0, names are hidden.]==],
	maximumsimulationradius = [==[The maximum value a Player's Player.SimulationRadius can grow to.]==],
	rightleg = [==[Determines the asset ID of the RightLeg to be applied to the Humanoid]==],
	devtouchcameramode = [==[Determines player's camera movement mode when using a touch device.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	dataready = [==[Indicates when the player's data is available to load]==],
	canloadcharacterappearance = [==[Determines whether the character's appearance will be loaded when the player spawns. If false, the player will spawn with a default appearance.]==],
	texturelength = [==[Sets the length of the Beams texture if Beam.TextureMode is 'Wrap' or 'Static'. If Beam.TextureMode is 'Stretch' then it determines the size of the texture relative to the Beam length.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	vectortoobjectspace = [==[Returns a Vector3 rotated from World to Object space.]==],
	torso = [==[Determines the asset ID of the Torso to be applied to the Humanoid]==],
	overridecorescripts = [==[If set to true, the Studio.OverrideCoreScriptsDir will be used for CoreScripts in Roblox Studio, instead of the default rbxasset://scripts directory.]==],
	areregionsshown = [==[When set to true, a cylinder is drawn around each Player's character, representing their Player.SimulationRadius.]==],
	setpartcollisiongroup = [==[Sets the collision group of a part.]==],
	devcomputermovementmode = [==[Lets developer overwrite the player's movement mode if the player is on a computer.]==],
	equiptool = [==[Makes the Humanoid equip the given Tool]==],
	removecollisiongroup = [==[Removes the collision group with the given name.]==],
	getcollisiongroups = [==[Returns a table with info on all of the place's collision groups.]==],
	float = [==[The widget will not be docked to any side of the game screen, and instead can be freely dragged around]==],
	symmetric = [==[Increases by a rate of 1 along all axes.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	lightemission = [==[Determines how much particles' colors are blended with the colors behind them]==],
	scrollwheelinputenabled = [==[Controls the use of scroll wheel, in case that it is intended for something else. Defaults to true.]==],
	formatuniversaltime = [==[Returns the DateTime's value in UTC formatted into a string.]==],
	currentcamera = [==[Camera that is used to render children objects]==],
	getsubposes = [==[This function returns an array containing all sub Poses that have been added to a Pose.]==],
	isrunning = [==[Returns whether the game is currently running]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	destroyjointradiuspercent = [==[Used to set the proportion of the Explosion.BlastRadius, between 0 and 1, within which all joints will be destroyed. Anything outside of this range will only have the Explosion force applied to it.]==],
	lockedtopart = [==[Determines whether the particles rigidly move with the part they're being emitted from.]==],
	from = [==[The object that the FloorWire travels from.]==],
	emptycutoff = [==[Sets the percent of a voxel has to be occupied to be considered empty. Defaults to 0.16.]==],
	passthrough = [==[Determines if the parts enclosed by the modifier are traversable, even if they would normally be collided with.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	maxtextsize = [==[The largest size in pixels the font is allowed to be]==],
	computeasync = [==[Computes a Path from a start position to an end position]==],
	motormaxtorque = [==[The maximum torque a HingeConstraint with HingeConstraint.ActuatorType set to Enum.ActuatorType can apply when trying to reach its desired HingeConstraint.AngularVelocity.]==],
	getrendercframe = [==[<em>(OBSOLETE)</em> Returns a CFrame describing where the part is being rendered at]==],
	size28 = [==[Font size 28.]==],
	trianglecount = [==[The number of polygons in this solid model. This value will always be &lt;= 5000.]==],
	headscale = [==[Determines by what factor the Head of a Humanoid is scaled; when Humanoid:ApplyDescription, maps to the "HeadScale" NumberValue within the Humanoid]==],
	getsortedasync = [==[Refers to GlobalDataStore.GetAsync while using an OrderedDataStore.]==],
	qualitylevel = [==[If RenderSettings.EnableFRM is set to true, this property controls the quality level in Roblox Studio.]==],
	shirttemplate = [==[Determines the texture of the Shirt. The content ID link pointing to the shirt template hosted on the Roblox website.]==],
	fallenpartsdestroyheight = [==[Determines the height at which falling BasePart (and their ancestor Model) are destroyed]==],
	front = [==[Whether the front face is included.]==],
	lifetime = [==[Defines a random range of ages for newly emit particles]==],
	promptpurchasefinished = [==[Fires when a purchase prompt closes for an affiliate gear sale or other asset (does not fire for developer product or game pass prompts)]==],
	teamcolor = [==[The Team this flag is for. Corresponds with the TeamColors in the Teams service]==],
	colorshift_top = [==[The hue represented in light reflected from surfaces facing the sun or moon.]==],
	enabled = [==[Determines whether particles ought to be emit]==],
	acceleration = [==[Determines the global-axis acceleration of all alive particles, measured in studs per second squared]==],
	particleemitter = [==[A special effects object that emits customizable 2D billboard particles into the world]==],
	part = [==[The Part object is a physical object, commonly known as a <strong>brick</strong>]==],
	primaryaxisonly = [==[If true, the AlignOrientation applies torque if the primary axis of its Constraint.Attachment0 becomes unaligned with the goal.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	meshpart = [==[A form of BasePart that includes a physically simulated custom mesh.]==],
	offset = [==[The Offset of a mesh determines the relative position from the BasePart.Position of a BasePart that the mesh will be displayed at.]==],
	creator = [==[The creator of the package asset.]==],
	bindaction = [==[Bind user input to an action given an action handling function.]==],
	torque = [==[A constraint used to apply a torque to a part or assembly]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	namedisplaydistance = [==[Used in conjunction with the Humanoid's DisplayDistanceType property to either determine how far a player controlling this Humanoid can see another humanoid's name, or how far this Humanoid's name displays to other viewing players.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	ordereddatastore = [==[A GlobalDataStore that also allows for ordered data store entries]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	trace = [==[Trace is the noisiest level, rarely (if ever) enabled for a production app]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	size11 = [==[Font size 11.]==],
	didloop = [==[Event that fires whenever the Sound loops. Returns soundId and numOfTimesLooped, giving the contentID of the sound and the number of times looped respectively.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	meshtype = [==[Determines the type of mesh that will be applied to the BasePart the SpecialMesh is parented to.]==],
	cancelnotification = [==[<b>(UNIMPLEMENTED)</b>]==],
	relativeto = [==[The DataType.CFrame in which the force is expressed]==],
	radius = [==[The constraint’s visualization radius]==],
	nonreplicatedcsgdictionaryservice = [==[A version of the CSGDictionaryService that does not replicate to clients.]==],
	sourcesanslight = [==[<style>@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:ital,wght@0,300;0,400;0,600;0,700;1,400');</style>
<p class="text-nowrap" style={{fontFamily: 'Source Sans Pro', fontSize: '1.7em', fontWeight: 300, margin: '5px 0px'}}>The quick brown fox jumps over the lazy dog.<br />0123456789 , : ! ? # % & ( ) - + =]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	button2up = [==[Fired when the right mouse button is released]==],
	trackphysicsdetails = [==[When set to true, this tells the replicator stats to sample replication physics details.]==],
	setentrykey = [==[Sets the <b>Key</b> field of a LocalizationTable entry to <i>newKey</i>, using the specified <i>key</i>, <i>source</i>, and <i>context</i> to narrow down the entry that will have this change applied.]==],
	graphicsterrain = [==[Rendering of terrain geometry.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	getplayer = [==[Returns the player that is connected to the NetworkReplicator.]==],
	setmetatable = [==[Sets the given table's metatable.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	wraptarget = [==[The WrapTarget object defines a target. A target is the 3D body with only an outer surface, or an Outer Cage.]==],
	task = [==[This library allows for functions and coroutines to be coordinated with the Task Scheduler.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	face = [==[The face that the SurfaceGui is rendered on.]==],
	pause = [==[Sets VideoFrame.Playing to false, pausing playback if the VideoFrame.Video is playing.]==],
	resizeincrement = [==[Describes the smallest change in size allowable by the Resize method]==],
	connectionaccepted = [==[Fired when the client successfully connects to a server. Returns a string showing the server's IP and Port, and the client's ClientReplicator.]==],
	secondaryaxis = [==[The direction of the Attachment's Y-Axis, represented as a unit Vector3.]==],
	precise = [==[Compute time using a precise method.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	archandles = [==[The <b>ArcHandles</b> object places 3D ArcHandles around any object that its Adornee is set to]==],
	accepted = [==[Text accepted by filter.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	getselectedribbontool = [==[Returns the currently selected Enum.RibbonTool.]==],
	title = [==[The title that is displayed above the contents of the PluginGui]==],
	player = [==[An object that represents a presently connected client to the game.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	ignoreguiinset = [==[When set to true, the GuiService:GetGuiInset imposed by Roblox's CoreGuis will be ignored by the ScreenGui and its descendants.]==],
	wheelforward = [==[Fires when the mouse wheel is scrolled forwards.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	changed = [==[Fired when RayValue.Value is changed]==],
	pluginmouse = [==[The PluginMouse object gives Plugins access to the mouse. It works like the Mouse object and can be obtained using the plugin Plugin:GetMouse method.]==],
	move = [==[Fired when the mouse is moved.]==],
	dominantaxis = [==[Determines the axis to use when setting the new size of the UI element.]==],
	angularresponsiveness = [==[Specifies the sharpness of the servo motor in reaching the HingeConstraint.TargetAngle.]==],
	grippos = [==[The positional offset of a Tool weld matrix]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	eventdisconnected = [==[Fires when the receiver is attached to a different CustomEvent instance when the CustomEventReciever.Source property is changed.]==],
	scriptservice = [==[An unimplemented service that has zero functionality, in a similar manner to the LocalWorkspace service.]==],
	suntextureid = [==[The texture of the sun while using this skybox.]==],
	instance = [==[The BasePart that the ray intersected.]==],
	settextureoffset = [==[Sets the current offset of the Beam's texture cycle.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	first = [==[This should run first]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	viewsizex = [==[Describes the width of the game window in pixels]==],
	unitray = [==[A DataType.Ray directed towards the Mouse's world position, originating from the Workspace.CurrentCamera's world position]==],
	targetsurface = [==[Indicates the Enum.NormalId of the BasePart surface at which the mouse is pointing]==],
	subscribeasync = [==[Begins listening to the given topic]==],
	hit = [==[The DataType.CFrame of the mouse's position in 3D space]==],
	removeentry = [==[Removes an entry from the LocalizationTable, using the specified <i>key</i>, <i>source</i>, and <i>context</i> to narrow down the specific entry to be removed.]==],
	begin = [==[Occurs when an InputObject starts to interact with the game. For example, a mouse button down, or a key down, or when a touch begins touching the screen.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	lefthand = [==[Left hand.]==],
	getextentssize = [==[Returns the size of the smallest bounding box that contains all of the BaseParts in the Model, aligned with the Model.PrimaryPart if it is set.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	worldpivot = [==[Determines where the pivot of a Model which does <strong>not</strong> have a set Model.PrimaryPart is located.]==],
	playerchatted = [==[Fired when a player chats.]==],
	getfavorite = [==[Returns if the Players.LocalPlayer has favorited the given bundle or asset]==],
	model = [==[Models are container objects, meaning they group objects together. They are best used to hold collections of BasePart and have a number of functions that extend their functionality.]==],
	setentryexample = [==[Sets the <b>Example</b> field of a LocalizationTable entry to <i>example</i>, using the specified <i>key</i>, <i>source</i>, and <i>context</i> to narrow down the entry that will have this change applied.]==],
	textxalignment = [==[Determines the horizontal alignment of rendered text.]==],
	gamepadconnected = [==[Fires when a gamepad is connected to the client. Passes the ''gamepadNum'' of the gamepad that was connected]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	heat = [==[Determines the velocity at which particles are emit]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	code = [==[<img src="/assets/blt06b912cfc8be6ebd/Font-Face-Sample-Code.png" class="img-fluid half-sized" />]==],
	maxvalue = [==[The highest number that the DoubleConstrainedValue.Value property can be]==],
	uiaspectratioconstraint = [==[Ensures the parent UI element maintains a particular aspect ratio.]==],
	wood = [==[Applies to BasePart only.]==],
	cookiesservice = [==[A backend service used by Roblox to control HTTP cookies. Its functions are not available to developers.]==],
	fantasy = [==[<img src="/assets/blt2b8a67bb6bac95f2/Font-Face-Sample-Fantasy.png" class="img-fluid half-sized" />]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	setentryvalue = [==[Sets the text of the specified localeId in a LocalizationTable entry, using the specified <i>key</i>, <i>source</i>, and <i>context</i> to narrow down the entry that will have this change applied.]==],
	explosives = [==[Gear with the 'Explosive' attribute.
<img alt="Explosive Attribute" src="/assets/blt9eee5ac8f58367c8/GearType_Explosive.png" />]==],
	translate = [==[Returns the localized text string in a LocalizationTable based on its Translator locale, by source lookup.]==],
	printphysicserrors = [==[When set to true, debug messages will be printed into the output pertaining to physics replication errors.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	lifetime = [==[Duration of the trail in seconds.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	powerups = [==[Gear with the 'Power Up' attribute.
<img alt="Power Up Attribute" src="/assets/blt0c97538d414a753b/GearType_PowerUp.png" />]==],
	removeasync = [==[Removes the provided key from the sorted map.]==],
	findfirstancestor = [==[Returns the first ancestor of the Instance whose Instance.Name is equal to the given name.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	localeid = [==[This property shows the locale id that the local player has set for their Roblox account]==],
	wrap = [==[Creates a new coroutine and returns a function that, when called, will resume the coroutine.]==],
	team = [==[Determines the Team with which a Player is associated.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	getsortedmap = [==[Returns a MemoryStoreSortedMap instance for the provided name.]==],
	getqueue = [==[Returns a MemoryStoreQueue instance for the provided name.]==],
	cameratype = [==[Specifies the Enum.CameraType to be read by the camera scripts]==],
	width = [==[The width of the Rect.]==],
	bodymover = [==[Base class for objects that continually exert forces to parts]==],
	imagecolor3 = [==[Determines how a rendered image will be colorized.]==],
	promptgameinvite = [==[Prompts the given Player with the game invite screen]==],
	select = [==[Sets the color of the Model.PrimaryPart selection box.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	touchended = [==[Fired when a user releases their finger from the screen on a TouchEnabled device - such as the screen of a mobile device]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	minlength = [==[Minimum length of a trail's segment in studs.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	value = [==[A value that is specified for a KeyframeMarker]==],
	spawnerservice = [==[An internal service that is responsible for the behavior or SpawnLocations. Its functionality is not accessible to developers.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	clothing = [==[Clothing is the base class for the Shirt and Pants clothing objects.]==],
	medium = [==[Medium priority]==],
	bevelmesh = [==[An abstract class that BlockMesh and CylinderMesh inherit from]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	contentprovider = [==[The ContentProvider is a service that is used to load content, or assets, into a game.]==],
	importfbxrig = [==[Prompts the user to open a .fbx file, uploads the individual components of the model as meshes, and generates a character rig for use in animation, which is loaded into the Workspace.]==],
	promptproductpurchasefinished = [==[Fires when a purchase prompt closes for a developer product. Warning: do not use to process developer product purchases!]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	coroutine = [==[A function that executes alongside the main thread.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	clocktime = [==[A numerical representation (in hours) of the current time of day used by Lighting.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	datastorename = [==[The name of the data store.]==],
	getboundingbox = [==[Returns a description of a volume that contains all parts of a Model]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	automaticsize = [==[Determines whether resizing occurs based on child content]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	mousehoverenter = [==[Fired when the ClickDetector's parent is hovered upon by a player]==],
	version = [==[Uniquely identifies the version of the object.]==],
	colorsequence = [==[A gradient of color values comprised of datatype.ColorSequenceKeypoints.]==],
	orthonormalize = [==[Returns an orthonormalized copy of the CFrame.]==],
	unixtimestampmillis = [==[The number of milliseconds between January 1st, 1970 at 00:00 UTC (the Unix epoch).]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	getproductinfo = [==[Returns the product information of an asset using its assetId]==],
	hat = [==[The asset is a hat.]==],
	messageout = [==[Fired when text is added to the output.]==],
	animationtrack = [==[Controls the playback of an animation on a Humanoid or AnimationController. This object cannot be created, instead it is returned by the Humanoid:LoadAnimation method.]==],
	disconnect = [==[Disconnects the connection from the event.]==],
	getnumawakeparts = [==[Returns the number of BaseParts that are deemed physically active, due to being recently under the influence of physics.]==],
	warn = [==[Behaves similarly to print, except with more distinct formatting (yellow); intended for messages which describe potential problems.]==],
	gettingup = [==[Fires when the Humanoid enters or leaves the <em>GettingUp</em> Enum.HumanoidStateType]==],
	color = [==[Sets the color of a GUI object]==],
	position = [==[Describes a positional value of this input]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	xy = [==[Automatically resize element along X and Y axes to fit child contents]==],
	filtertype = [==[Determines how the FilterDescendantsInstances list will be used.]==],
	promptproductpurchase = [==[Used to prompt a user to purchase a product with the given product id.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	getphysicsthrottling = [==[Returns an integer, between 0 and 100, representing the percentage of real-time that physics simulation is currently being throttled to.]==],
	rightleg = [==[If the limb is a part of the Humanoid's Torso. <em>This includes UpperRightLeg and LowerRightLeg for R16 rigs.</em>]==],
	converttosmooth = [==[Transforms the TerrainRegion so it can be used with smooth terrain.]==],
	size60x60 = [==[Thumbnail resolution is 60 pixels x 60 pixels.]==],
	luasourcecontainer = [==[The base class for all objects which contain Lua code. Script, LocalScript, ModuleScript and CoreScript all inherit from LuaSourceContainer.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	sound = [==[A Sound is an object that emits sound. Sounds can be placed within a BasePart or Attachment to emit a sound from a particular position within a place or world, or it can be attached elsewhere to play the sound at a constant volume throughout the entire place.]==],
	enabled = [==[Determines whether the Beam is visible or not.]==],
	xboxone = [==[The client is running on an XBox One (console).]==],
	lockcenter = [==[The mouse is locked, and cannot move from, the center of the user's screen.]==],
	renderstreamedregions = [==[When set to true, regions of space that are being streamed to the client will be outlined in red.]==],
	configuration = [==[The Configuration object is a container object that is designed to hold value objects to make values used in Tools or any model using Scripts more accessible.]==],
	shutdown = [==[Shuts down the current game instance]==],
	getbreakpoints = [==[Returns a list of DebuggerBreakpoint present in the script.]==],
	meshid = [==[The MeshId is the content ID of the mesh that is to be displayed.]==],
	gamefull = [==[The game that this player attempted to teleport to is full.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	textboxfocusreleased = [==[Fired when the client loses focus on a TextBox]==],
	legacy = [==[Lighting technology that predates Future-Is-Bright. It is no longer available.]==],
	isfocused = [==[Returns true if the textbox is focused, or false if it is not.]==],
	textstroketransparency = [==[Determines the transparency of the text stroke (outline).]==],
	position = [==[Describes the position of the part in the world]==],
	setentrycontext = [==[Sets the <b>Context</b> field of a LocalizationTable entry to <i>newContext</i>, using the specified <i>key</i>, <i>source</i>, and <i>context</i> to narrow down the entry that will have this change applied.]==],
	relativexx = [==[The scale of X is shared with Y]==],
	relativeto = [==[Sets the enum.ActuatorRelativeTo property for the LinearVelocity constraint.]==],
	setentries = [==[Sets the contents of the LocalizationTable]==],
	replace = [==[Return a copy of a number with a range of bits replaced by a given value.]==],
	transform = [==[Describes the current animation offset of the Motor6D joint]==],
	movetofinished = [==[Fires when the Humanoid finishes walking to a goal declared by Humanoid:MoveTo]==],
	searchkeyword = [==[The keyword to search for catalog results with.]==],
	jawright = [==[Moves mouth and jaw to the right (character right)]==],
	sizeoffset = [==[Determines how the BillboardGui is offset on the screen in 2D space; units are relative to the BillboardGui.AbsoluteSize]==],
	handles = [==[The Handles object places 3D handles around any object that its Adornee is set to]==],
	automatic = [==[Roblox will automatically decide what graphics mode to use, depending on what best suits your device's specifications.]==],
	modulescript = [==[A type of script object that runs once when require is called with it. Returns exactly one value, usually a table of functions, to used by other scripts. Useful for compartmentalizing code.]==],
	getcountryregionforplayerasync = [==[Returns country/region code string according to player's client IP geolocation]==],
	getstring = [==[Returns a translation based on the specified language and key.]==],
	soundservice = [==[A service that determines various aspects of how Sounds play in the game.]==],
	robloxlocaleid = [==[The locale id that the local player has set for their Roblox account.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	textcolor3 = [==[Determines the color of rendered text]==],
	getdevicerotation = [==[Returns an InputObject and a DataType.CFrame,describing the device's current rotation vector]==],
	notificationservice = [==[An internal service which cannot be used by developers.]==],
	gethash = [==[Returns a hash of the script's source]==],
	length = [==[The length of the line.]==],
	setaccountage = [==[Sets the AccountAge of the player.]==],
	primarytangentaxis = [==[The primary axis in the plane, when LinearVelocity.VelocityConstraintMode is set to <strong>Plane</strong>.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	tweensize = [==[Smoothly resizes a GUI to a new DataType.UDim2]==],
	mouseiconenabled = [==[Determines whether the Mouse icon is visible]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	technology = [==[A temporary non-scriptable property that determines the lighting system used to render the 3D world (e.g. legacy, Future Is Bright, shadow map).]==],
	getplayerfromcharacter = [==[Returns the Player whose Player.Character matches the given instance, or nil if one cannot be found]==],
	fogcolor = [==[A DataType.Color3 value giving the hue of Lighting's fog.]==],
	getrequestbudgetforrequesttype = [==[Returns the number of requests that can be made by the given request type.]==],
	isteleporting = [==[The player is currently being teleported.]==],
	bodypart = [==[The part of the Character's body that is affected.]==],
	ambient = [==[The lighting hue applied to areas that are occluded from the sky, such as indoor areas]==],
	cylinder = [==[A cylinder shaped part]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	registerkeyframesequence = [==[Generates a temporary asset ID from a KeyframeSequence that can be used for localized testing of an animation. Generates a hash.]==],
	heartbeattimems = [==[A measurement of the total amount of time it takes long it takes for Roblox to update all of its Task Scheduler jobs, in milliseconds.]==],
	textyalignment = [==[Determines the vertical alignment of rendered text.]==],
	devenablemouselock = [==[Determines if the player can toggle mouse lock]==],
	addkeyframe = [==[This function adds a Keyframe to the KeyframeSequence by parenting it to the KeyframeSequence.]==],
	changed = [==[Fired whenever the Color3Value.Value is changed.]==],
	authoredhipheight = [==[Contains the hip height of the Humanoid of the model that was used to author this KeyframeSequence]==],
	keyframemarker = [==[An instance meant to represent an event that will eventually be fired when a Keyframe is hit]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	getmarkers = [==[Returns an array containing all KeyframeMarkers that have been added to the Keyframe]==],
	addmarker = [==[Adds a KeyframeMarker to the Keyframe by parenting it to the keyframe]==],
	keyframe = [==[A Keyframe holds the Pose applied to joints in a Model at a given point of time in an animation. Keyframes are interpolated between during animation playback.]==],
	showpermissiblejoints = [==[When used it will visibly display a potential surface connection between the two BasePart, which were set with JointsService:SetJoinAfterMoveTarget and JointsService:SetJoinAfterMoveInstance.]==],
	rotation = [==[A copy of the CFrame with no translation.]==],
	gotham = [==[<img src="/assets/bltbde5041ca08777a3/Font-Face-Sample-Gotham.png" class="img-fluid half-sized" />]==],
	keydown = [==[Fires when a Key is pressed]==],
	bathroom = [==[Sound reverb is changed to sound like the player is a bathroom.]==],
	radius = [==[The visualized radius of the HingeConstraint.]==],
	part0 = [==[The first BasePart that the joint connects.]==],
	image = [==[The image content displayed by the UI element.]==],
	c0 = [==[Determines how the offset point is attached to JointInstance.Part0.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	ragdoll = [==[Fires when the Humanoid enters or leaves the <em>Ragdoll</em> Enum.HumanoidStateType]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	paddingbottom = [==[The padding to apply on the bottom side relative to the parent's normal size.]==],
	importfbxanimation = [==[Prompts the user to open a .fbx animation file that can be loaded onto the <i>rigModel</i>, then proceeds to insert the animation as a KeyframeSequence in the Workspace]==],
	changed = [==[Fired whenever the IntValue.Value of the IntValue is changed.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	utf8 = [==[This library provides basic support for UTF-8 encoding.]==],
	concrete = [==[Applies to BasePart and Terrain.]==],
	size = [==[Determines the world size over individual particles' lifetimes]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	getfflag = [==[Returns the value of an FFlag if it exists.]==],
	zoffset = [==[Determines the forward-backward render position of particles; used to control what particles render on top/bottom]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	new = [==[Returns a Vector2int16 from the given x and y components.]==],
	bindbutton = [==[Activates an overriding bind on the specified button.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	check = [==[Prints result of condition to output.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	overlay = [==[Overlays the SurfaceAppearance.ColorMap on top of the underlying part color based on the ColorMap’s alpha channel
<img alt="AlphaMode OverLay" src="/assets/blt625b6777e66ae841/fern-cutout.png" />]==],
	surface = [==[Joints are created between any kind of surface. Functions identically to All]==],
	ceil = [==[Returns the smallest integer larger than or equal to x.]==],
	descendantadded = [==[Fires when a descendant is added to the Instance]==],
	reverse = [==[Returns a string that is the string s reversed.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	showdevelopmentgui = [==[Determines whether the contents of StarterGui is visible in studio]==],
	restitution = [==[How elastic Attachment connected by a BallSocketConstraint will be when they reach the end of the range specified by BallSocketConstraint.UpperAngle when BallSocketConstraint.LimitsEnabled is true. Constrained between 0 and 1.]==],
	imagetransparency = [==[Determines the transparency of the rendered image]==],
	brightness = [==[Sets how bright the emitted light is, defaults to 1.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	position = [==[The 3D position of the CFrame.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	classic = [==[Camera tracks the player but will not automatically rotate if the player walks left or right.]==],
	isancestorof = [==[Returns true if an Instance is an ancestor of the given descendant.]==],
	bevel = [==[The corners are beveled (see image above)]==],
	savedqualitylevel = [==[The graphics quality level set by the client.]==],
	getfullname = [==[Returns a string describing the Instance's ancestry.]==],
	limitangle1 = [==[Determines the maximum angle between the rod and Constraint.Attachment0 when RodConstraint.LimitsEnabled is true]==],
	getsupportedgamepadkeycodes = [==[Returns an array of Enum.KeyCode that the gamepad associated with the given Enum.UserInputType supports]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	color = [==[Determines the color of the Beam across its segments.]==],
	explosiontype = [==[This property determines how the Explosion will interact with Terrain. Used to set if explosions will cause damage to the terrain or not.]==],
	areassembliesshown = [==[When set to true, each physics assembly is assigned a unique color and the Part associated with the assembly are outlined with the color. Parts that are attached together by JointInstance will share the same color.]==],
	union = [==[Unions the given parts and returns the resulting UnionOperation.]==],
	oninvoke = [==[Callback for when the BindableEvent is invoked]==],
	findfirstdescendant = [==[Returns the first descendant found with the given FullName (or partial FullName).]==],
	rolloffmindistance = [==[The minimum distance, in studs, at which a 3D Sound (direct child of a BasePart or Attachment) will begin to attenuate (decrease in volume)]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	findfirstchildwhichisa = [==[Returns the first child of the Instance for whom Instance:IsA returns true for the given className.]==],
	findfirstchild = [==[Returns the first child of the Instance found with the given name.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	graphicssolidmodels = [==[Rendering solid models (stuff made with Union, Negate, etc.)]==],
	brightness = [==[Determines the factor by which the GUI's light is scaled when SurfaceGui.LightInfluence is 0.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	destroy = [==[Sets the Instance.Parent property to nil, locks the Instance.Parent property, disconnects all connections and calls Destroy on all children.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	parent = [==[Determines the hierarchical parent of the Instance]==],
	friendly = [==[Causes the dialog to have a green bar on its left-hand side.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	requeststreamaroundasync = [==[Requests that the server stream to the player around the specified location]==],
	networkreplicator = [==[An object which handles the replication of other objects either from the server to the client, or from the client to the server.]==],
	applystrokemode = [==[Determines whether to apply the stroke to the object’s border instead of the text itself]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	nextselectionleft = [==[Sets the GuiObject which will be selected when the Gamepad selector is moved in this direction]==],
	makejoints = [==[Goes through all BaseParts in the Model. If any part's side has a SurfaceType that can make a joint it will create a joint with any adjacent parts]==],
	insertservice = [==[Used to insert assets from the Roblox website.]==],
	inputobject = [==[An object created when an input begins that describes a particular user input]==],
	exportmergebymaterial = [==[Sets whether materials should be generated per part, or per unique appearance in Roblox's obj exporter.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	swimanimation = [==[When this description is Humanoid:ApplyDescription to a Humanoid, this determines the Animation.AnimationId to play when its Humanoid:GetState is enum.HumanoidStateType]==],
	priority = [==[This property sets the priority of an AnimationTrack. Depending on what this is set to, playing multiple animations at once will look to this property to figure out which Keyframe Poses should be played over one another.]==],
	imagerectsize = [==[Determines the size in pixels of the sub-area of an image to be displayed.]==],
	constraint = [==[Describes a constraint for a single-argument function whose argument type is a Instance.ClassName.]==],
	pressedimage = [==[A textureId that will be used when an ImageButton is being pressed]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	getasync = [==[Retrieves the value of a key in the sorted map.]==],
	applyatcenterofmass = [==[Whether the force is applied at the center of mass of VectorForce.Attachment0 parent Part]==],
	musicalinstruments = [==[Gear with the 'Musical' attribute.
<img alt="Musical Attribute" src="/assets/bltfc24574f48eb2125/GearType_Musical.png" />]==],
	rightlegcolor = [==[Determines the BodyColors.RightLegColor3 of a Humanoid when applied]==],
	leftlegcolor = [==[Determines the BodyColors.LeftLegColor3 of a Humanoid when applied]==],
	fromrgb = [==[Returns a Color3 from the given components within the range [0, 255].]==],
	heightscale = [==[Determines by what factor the height (top-to-bottom distance) of a Humanoid rig is scaled; when Humanoid:ApplyDescription, maps to the "HeightScale" NumberValue within the Humanoid]==],
	swimming = [==[Fires when the speed at which a Humanoid is swimming in Terrain water changes]==],
	promptgamepasspurchasefinished = [==[Fires when a purchase prompt closes for a game pass]==],
	geographiclatitude = [==[The geographic latitude, in degrees, of the scene, influencing the result of Lightings time on the position of the sun and moon.]==],
	setsetting = [==[Stores a given value for later use under the given key. The value will persist even after studio is closed.]==],
	spotlight = [==[A light source that emits light directionally in the shape of a cone with a spherical base.]==],
	processuserinput = [==[Allows the StarterGui service to process input like PlayerGui and CoreGui do]==],
	nopath = [==[Path doesn't exist.]==],
	membershiptype = [==[Describes the account's membership type.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	gray = [==[Returns the BrickColor Medium stone grey.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	uilistlayout = [==[Positions sibling UI elements in a single row.]==],
	upperangle = [==[Upper limit for the angle (in degrees) between the reference axis and the SecondaryAxis of Attachment1 around the rotation axis. Value in [-180, 180].]==],
	memorystoresortedmap = [==[Provides access to a sorted map within MemoryStore.]==],
	autoupdate = [==[When this property is set to true, the package associated with the given PackageLink automatically updates to the latest version.]==],
	disablecsgv2 = [==[When set to true, Roblox will fall back to using its legacy CSG solver when performing <a href="/articles/3D-Modeling-with-Parts" title="Solid modeling">solid model operations</a>.]==],
	attributechanged = [==[Fires whenever an attribute is changed on the Instance]==],
	cleartouchmovementmodes = [==[Unregisters all TouchMovementMode enums from the game settings menu.]==],
	starcount = [==[How many stars are shown in the skybox.]==],
	getstate = [==[Returns the Humanoid current Enum.HumanoidStateType]==],
	collisiongroupid = [==[Describes the automatically-set ID number of a part's collision group]==],
	size10 = [==[Font size 10.]==],
	fromoffset = [==[Returns a UDim2 with the given offset components and no scales.]==],
	textbutton = [==[A 2D user interface element that displays interactive text]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	sizeconstraint = [==[Selects the GuiObject.Size axes that a GuiObject will be based relative to the size of its parent]==],
	replacebodypartr15 = [==[Dynamically replaces a Humanoid body part with a different part.]==],
	default = [==[The default prompt UI style]==],
	moveto = [==[Causes the Humanoid to attempt to walk to the given location by setting the Humanoid.WalkToPoint and Humanoid.WalkToPart properties]==],
	getfenv = [==[Returns a function's environment as a dictionary.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	setphysicsthrottleenabled = [==[Determines whether physics throttling is enabled]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	breakjoints = [==[Breaks connections between BaseParts, including surface connections with any adjacent parts, WeldConstraints and all Welds and other JointInstances.]==],
	vertical = [==[The output layout is vertical (y-axis).]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	velocity = [==[Determines the goal velocity]==],
	scaletype = [==[Determines how an image will scale if displayed in a UI element whose size differs from the source image.]==],
	scrollbarthickness = [==[How thick the scroll bar appears. This applies to both the horizontal and vertical scroll bars. If set to 0, no scroll bars are rendered.]==],
	canvasposition = [==[The location within the canvas, in pixels, that should be drawn at the top left of the scroll frame]==],
	imagetransparency = [==[Determines the transparency of the rendered image]==],
	humanoid = [==[A special object that gives models the functionality of a character.]==],
	noise = [==[Returns a perlin noise value.]==],
	number = [==[The unique number that identifies the BrickColor.]==],
	topright = [==[Grid starts in top right corner.]==],
	jsondecode = [==[Decodes a JSON string into a Lua table]==],
	midimage = [==[The middle image on the vertical scrollbar. The size of this can vary in the y direction, but is always set as ScrollingFrame.ScrollBarThickness in the x direction. This is also used as the middle image on the horizontal scroll bar.]==],
	gettextsize = [==[Computes the DataType.Vector2 dimensions (in pixels) that will be taken up with text when using the specified formatting parameters and size constraints.]==],
	graphicsmode = [==[The graphics API that Roblox will use on startup.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	getpolicyinfoforplayerasync = [==[Returns policy information about a player which is based on geolocation, age group, and platform.]==],
	pants = [==[Determines the Pants.PantsTemplate used by a Pants when Humanoid:ApplyDescription]==],
	z = [==[The z-coordinate of the Vector3int16.]==],
	absolutewindowsize = [==[The size in pixels of the frame, without the scrollbars.]==],
	setattribute = [==[Sets the attribute with the given name to the given value]==],
	arecontactislandsshown = [==[When set to true, each contact island will render SelectionBox adorns on the parts in contact islands, where each contact island is assigned a random color.]==],
	allgames = [==[(Default) Item is purchasable in the Avatar Shop and all experiences.]==],
	font = [==[Specifies the font used in the script editor.]==],
	size = [==[The size in studs of the image.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	hint = [==[A Hint is an object that creates a small black bar at the very top of the screen with text. Its appearance cannot be customized in any way. With the introduction of Roblox's GUI features it has been deprecated and TextLabels should be used instead for new work.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	funneler = [==[Makes a 'O' shape with the mouth]==],
	breakjointsondeath = [==[Determines whether a Humanoid joints break when in the Dead state]==],
	abxy = [==[The touchpad will function as a means of inputting the standard ABXY gamepad input, dividing it up into 4 diagonal pie slices.]==],
	viewportbackground = [==[The background color of the game viewport]==],
	orientation = [==[A <a href="/api-reference/datatype/Vector3" class="mw-redirect" title="Vector3">Vector3</a> that describes the orientation of the Attachment relative to the orientation of its parent, in degrees. Rotations are applied in Z, X, Y order.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	fatal = [==[The most critical level, Fatal events demand immediate attention]==],
	log = [==[Returns the logarithm of x using the given base.]==],
	debugmode = [==[Allows switching between different debugging visualization modes for cage meshes.]==],
	left = [==[The object is on the left side of it's parent (x-axis).]==],
	colorsequencekeypoint = [==[A color and time value that represents a keypoint in a datatype.ColorSequence.]==],
	slicescale = [==[Scales the 9slice edges by the specified ratio]==],
	pass = [==[If <em>functionToBind</em> from ContextActionService.BindAction returns Enum.ContextActionResult.Pass, the input event is considered to have not been handled by <em>functionToBind</em> and will continue being passed to actions bound to the same input type.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	negate = [==[Negates the given parts and returns the resulting NegateOperations.]==],
	run = [==[Runs scripts which are parented to TestService.]==],
	josefinsans = [==[<style>@import url('https://fonts.googleapis.com/css2?family=Josefin+Sans');</style>
<p class="text-nowrap" style={{fontFamily: 'Josefin Sans', fontSize: '1.75em', margin: '5px 0px'}}>The quick brown fox jumps over the lazy dog.<br />0123456789 , : ! ? # % & ( ) - + =]==],
	mouseleave = [==[Fired when the mouse leaves the GUI handle.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	wait = [==[Yields the current thread until the next Heartbeat in which the given duration (in seconds) has passed, without throttling.]==],
	mousebutton1down = [==[Fires when a user presses down on their left mouse button while hovering over the adornment.]==],
	alwaysontop = [==[Forces this object to render on top of all 3d objects in the Workspace.]==],
	center = [==[Aligned starts at the center of the GUI object and spreads equally toward the top and bottom.]==],
	global = [==[The ZIndex property will override the default value computed from the depth in the hierarchy.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	track = [==[Camera moves with the subject but does not rotate automatically.]==],
	removestatus = [==[.Removes the defined status from the Status model in the Humanoid.]==],
	duration = [==[The length of time, in seconds, that a ForceField will be applied to a Player character spawning at this SpawnLocation. If Duration is zero, the ForceField is never created, and it will not trigger the Instance.DescendantAdded or Instance.ChildAdded events.]==],
	loaddata = [==[Used by an ancient data persistence method to load the user's Data Persistence]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	unpack = [==[Returns all elements from the given list as a tuple.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	generateguid = [==[Generates a UUID/GUID random string, optionally with curly braces]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	never = [==[The scrollbar will never have elastic scrolling available]==],
	mix = [==[Percentage of the original sound that will be applied to the filter.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	eagerbulkexecution = [==[When set to true, all scene updates will be given an unlimited budget, regardless of how computationally expensive it may be.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	font = [==[Determines the font used to render text.]==],
	autowedgecell = [==[<em>(OBSOLETE)</em> No longer does anything.]==],
	getmetatable = [==[Returns the metatable of the given table.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	virtualinputmanager = [==[An internal service that offers no functionality to developers.]==],
	textandmenu = [==[A player can chat via custom text messages and a menu of chat messages.]==],
	setsupersafechat = [==[Sets whether or not the player sees filtered chats, rather than normal chats.]==],
	graphictshirt = [==[Determines the ShirtGraphic.Graphic used by a ShirtGraphic when Humanoid:ApplyDescription]==],
	setentrysource = [==[Sets the <b>Source</b> field of a LocalizationTable entry to <i>newSource</i>, using the specified <i>key</i>, <i>source</i>, and <i>context</i> to narrow down the entry that will have this change applied.]==],
	istenfootinterface = [==[Returns true if the client is using the ten foot interface, which is a special version of Roblox's UI, exclusive to consoles.
This is the only guaranteed way to verify if the user is on a console or not.
]==],
	velocityconstraintmode = [==[The mode of the LinearVelocity constraint: <strong>Line</strong>, <strong>Plane</strong>, or <strong>Vector</strong>.]==],
	healthdisplaydistance = [==[Sets the distance at which this player will see other Humanoid’s health bars. If set to 0, the health bars will not be displayed.]==],
	upperlimit = [==[The upper position limit along the x-axis of Constraint.Attachment0 for a SlidingBallConstraint if SlidingBallConstraint.LimitsEnabled is true.]==],
	permissionlevel = [==[The package permission for the current studio user.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	damping = [==[Damping constant for the SpringConstraint. Multiplied to the velocity of the constraintâ€™s Attachment to reduce the spring force applied.]==],
	getlocals = [==[Returns a dictionary of all local variables in the specified stack, where the keys are the names of the variables, and the values are the actual values of the variables.]==],
	top = [==[Alignment starts at the top of the GUI object.]==],
	clear = [==[Clears the terrain.]==],
	meshpart = [==[The asset is a mesh part.]==],
	guinavigationenabled = [==[Used to enable and disable the default controller GUI navigation.]==],
	touchtap = [==[Fires when the player performs a tap gesture on the UI element]==],
	tohsv = [==[Returns the hue, saturation, and value of the Color3.]==],
	touchswipe = [==[Fires when the player performs a swipe gesture on the UI element]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	touchpan = [==[Fires when the player moves their finger on the UI element]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	onserverinvoke = [==[Called when the server is invoked by RemoteFunction:InvokeServer]==],
	worldsecondaryaxis = [==[Represents the direction of the Attachment.SecondaryAxis of the Attachment, relative to the world, as a unit DataType.Vector3 with a length of ]==],
	mousewheelbackward = [==[Fires when a user scrolls their mouse wheel back when the mouse is over a GUI element]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	findpartsinregion3withwhitelist = [==[Returns an array of BaseParts in the given DataType.Region3 that are in, or descendant of an object in, a given white list.]==],
	buildrigfromattachments = [==[Assembles a tree of Motor6D joints by attaching together Attachment objects in a Humanoid character]==],
	tweenposition = [==[Smoothly moves a GUI to a new DataType.UDim2]==],
	filterstringforbroadcast = [==[Filters a string sent from a player meant for broadcast to no particular target. More restrictive than Chat:FilterStringAsync.]==],
	dragenter = [==[Fired when Instances are being selected while the mouse is dragging.]==],
	zindex = [==[Determines the order in which a GuiObject renders relative to other GUIs]==],
	playerlist = [==[The CoreGui displaying the list of in-game players.]==],
	handleadornment = [==[HandleAdornment is an abstract class inherited by 3D handle adornments.]==],
	rotation = [==[Determines the number of degrees by which a UI element is rotated]==],
	position = [==[Determines the pixel and scalar position of a GUI]==],
	nextselectionup = [==[Sets the GuiObject which will be selected when the Gamepad selector is moved in this direction]==],
	nextselectionright = [==[Sets the GuiObject which will be selected when the `Enum/Gamepad selector is moved in this direction]==],
	bordercolor = [==[Determines the color of a GuiObject border]==],
	applylayout = [==[Force re-layout of subling UI elements.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	filemesh = [==[The mesh is determined by the Roblox mesh asset id provided.]==],
	backgroundtransparency = [==[Determines the transparency of the GuiObject background and border]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	min = [==[The minimum value of the NumberRange.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	selectionpartlasso = [==[An instance used to display a "lasso" between a Humanoid Torso and a BasePart.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	message = [==[Prints Test message, followed by text to the output, in blue text.]==],
	rolloffmode = [==[Controls how the volume of a 3D Sound (parented to a BasePart or Attachment) behaves as the distance between the listener and sound's parent changes.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	lowerangle = [==[The minimum rotation angle the HingeConstraint will allow if HingeConstraint.LimitsEnabled is true.]==],
	kalam = [==[<style>@import url('https://fonts.googleapis.com/css2?family=Kalam');</style>
<p class="text-nowrap" style={{fontFamily: 'Kalam', fontSize: '1.75em', margin: '5px 0px'}}>The quick brown fox jumps over the lazy dog.<br />0123456789 , : ! ? # % & ( ) - + =]==],
	visible = [==[Determines whether the object and its descendants will be displayed.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	onundo = [==[Fired when the user undoes an action in studio. Waypoint describes the type action that has been undone.]==],
	getcanredo = [==[Returns whether there are actions that can be redone, and, if there are, returns the last of them.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	udim = [==[A one-dimensional value with two components, a relative scale and an absolute offset.]==],
	removeaccessories = [==[Removes all Accessory worn by the Humanoid parent]==],
	absoluterotation = [==[Describes the actual screen rotation of a UI element, in degrees.]==],
	getgroupsasync = [==[Returns a list of tables containing information on all of the groups a given player is a member of]==],
	getjobsinfo = [==[Returns a table containing basic information about the jobs performed by the task scheduler]==],
	getgroupinfoasync = [==[Returns a table containing information about the given group.]==],
	localplayerarrivedfromteleport = [==[Fires when the Players.LocalPlayer enters the place following a teleport. Provides the Player <em>teleportData</em> and <em>customLoadingScreen</em>]==],
	setcamerayinvertvisible = [==[If called, Roblox toggles the menu option to invert the user's camera y axis.]==],
	groupservice = [==[GroupService is a service that allows developers to fetch information about a Roblox group from within a game.]==],
	f2 = [==[Determines the face of a Glue.]==],
	f0 = [==[Determines the face of a Glue.]==],
	mousebutton1 = [==[The left mouse button.]==],
	getcorescriptlocalizations = [==[Returns a list of LocalizationTable objects that are parented to the LocalizationService.]==],
	genericsettings = [==[The abstract class for settings database classes.]==],
	onupdate = [==[Sets callback as a function to be executed any time the value associated with key is changed]==],
	devcomputercameramode = [==[Determines player's camera movement mode when using a desktop version of Roblox.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	cylinder = [==[The mesh is a cylinder.]==],
	devcameraocclusionmode = [==[Sets how the default camera handles objects between the camera and the player.]==],
	getroleingroup = [==[Returns the player's role in the group as a string, or "Guest" if the player isn't part of the group.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	trail = [==[The Trail object is used to create a trail like effect between two points.]==],
	frame = [==[A GuiObject that renders as a plain rectangle, generally used as a container]==],
	formfactorpart = [==[The FormFactorPart class is an abstract class. It inherits from the BasePart class and adds the FormFactor property to classes that inherit from it.]==],
	creatortype = [==[Describes the Enum.CreatorType of the Articles.Place, whether the place is owned by a user or a group]==],
	outdoorambient = [==[The lighting hue applied to outdoor areas.]==],
	time = [==[This property gives the Keyframe's time position (in seconds) in an animation. This determines the time at which the Poses inside the keyframe will be shown.]==],
	started = [==[The client has started attempting to teleport.]==],
	velocity = [==[The speed that the textures flow along the wire.]==],
	hinge = [==[Makes the side appear with a yellow hinge. Any part connected to this hinge will stick to the side and rotate using physics]==],
	seat = [==[A type of BasePart that characters can 'sit' in. When a character touches an enabled Seat object, it will be attached to the part by a Weld and the default character scripts will play a sitting animation.]==],
	platformstanding = [==[The Humanoid is platformstanding. Check the Humanoid.PlatformStand property.]==],
	mousebehavior = [==[Determines whether the user’s mouse can be moved freely or is locked]==],
	scripttimeoutlength = [==[The time (in seconds) a script can wait to be resumed before timing out.]==],
	rotation = [==[A <a href="/api-reference/datatype/Vector3" class="mw-redirect" title="Vector3">Vector3</a> that describes the rotation of the Attachment relative to the rotation of its parent, in degrees. Rotations are applied in Z, Y, X order.]==],
	floormaterial = [==[Describes the Enum.Material that the Humanoid is currently standing on. If the Humanoid isn't standing on anything, the value of this property will be <em>Air</em>.]==],
	follow = [==[Camera moves with the subject and rotates to keep the subject in the center.]==],
	size = [==[Determines the size of the flame particles]==],
	filldirectionmaxcells = [==[Determines the maximum number of cells that may be used in a row or column before before the next one is started.]==],
	rect = [==[A value that represents a two-dimensional rectangle.]==],
	getbinarycontents = [==[Reads the contents of the File as a string]==],
	shadowsoftness = [==[Controls how blurry the shadows are]==],
	maxtorque = [==[Determines the maximum amount of torque that may be exerted to rotate the part towards the RocketPropulsion.Target]==],
	file = [==[An asset loaded from a file on disk]==],
	faceinstance = [==[The FaceInstance class is an abstract class from which the Decal class inherits.]==],
	components = [==[Returns the values: x, y, z, R00, R01, R02, R10, R11, R12, R20, R21, R22, where R00-R22 represent the 3x3 rotation matrix of the CFrame, and xyz represent the position of the CFrame.]==],
	height = [==[The height of the cone adornment.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	rightlowerlipdepressor = [==[Lowers the lower lip down away from the upper lip revealing the lower teeth]==],
	righteyeclosed = [==[Closes the right eyelid]==],
	rightcheekpuff = [==[Puffs up the right cheek]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	mouthleft = [==[Moves the mouth left]==],
	leftlipcornerpuller = [==[Raises the corners of the mouth upwards in a smile]==],
	style = [==[The style of the prompt’s UI]==],
	running = [==[Fires when the speed at which a Humanoid is running changes]==],
	removekeyframe = [==[This function removes a Keyframe from the KeyframeSequence by setting its parent to nil.]==],
	leftinnerbrowraiser = [==[Raises the interior half of the left brow upwards]==],
	restitution = [==[How elastic Attachment connected by a HingeConstraint will be when they reach the end of the range  when HingeConstraint.LimitsEnabled is true. Constrained between 0 and 1.]==],
	icon = [==[The icon to be displayed when used as a sub menu]==],
	textcolor3 = [==[Determines the color of rendered text]==],
	robloxreplicatedstorage = [==[An internal version of the ReplicatedStorage service. This cannot be used by developers.]==],
	canuserschatasync = [==[Will return false if the two users cannot communicate because their account settings do not allow it.]==],
	selectiongained = [==[Fired when the GuiObject is being focused on with the Gamepad selector]==],
	touniversaltime = [==[Returns the components of the DateTime in UTC.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	forceshow = [==[The mouse icon is forced to always remain shown/visible.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	getcollection = [==[Returns the most recently uploaded models in the specified category.]==],
	toorientation = [==[Returns approximate angles that could be used to generate the CFrame, if angles were applied in Z, X, Y order.]==],
	worldrotation = [==[Determines the rotation (in degrees) of the attachment relative to the world]==],
	uioffset = [==[The pixel offset applied to the prompt’s UI]==],
	baseangle = [==[The base angle of the DynamicRotate object, in radians.]==],
	filterstringasync = [==[Filters a string being received from a user, and returns a TextFilterResult which can be used to distribute the correctly filtered text accordingly.]==],
	fogend = [==[The depth from the Workspace.CurrentCamera, in studs, at which fog will be completely opaque.]==],
	hangar = [==[Sound reverb is changed to sound like the player is in a hangar.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	triggerdistance = [==[Sets the maximum distance that a dialog can be triggered from.]==],
	mousedown = [==[Initializes a dragging action, specifying which parts to use when dragging.]==],
	worldtocellpreferempty = [==[Returns the grid cell location that contains the point position, preferring empty grid cells when position is on a grid edge.]==],
	attachment0 = [==[The Attachment that is connected to Constraint.Attachment]==],
	leftsurfaceinput = [==[Determines the kind of input for the Left face of a part (+X direction)]==],
	datastoreincrementoptions = [==[Specifies additional parameters for a GlobalDataStore:IncrementAsync call.]==],
	coreguinavigationenabled = [==[Toggles whether or not objects in the CoreGui can be navigated using a Gamepad.]==],
	testcount = [==[Measures how many test calls have been recorded in the test session.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	throttle = [==[The direction of movement, tied to the keys W and S. Must be an integer 1 (forward), 0 (null), or -1 (reverse). Will refresh back to 0 unless constantly set.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	success = [==[Path found successfully.]==],
	x = [==[Describes the X (horizontal) component of the mouse's position on the screen]==],
	leftlowerarm = [==[Reference to a Humanoid's LeftLowerArm.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	forcehide = [==[The mouse icon is forced to always remain hidden/invisible.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	purpose = [==[Sets the icon that the initial dialog displays.]==],
	position = [==[This property is the position of the center of the Explosion. It is defined in world-space and not influenced by the Explosion's parent.]==],
	ios = [==[The client is running on IOS (Apple mobile).]==],
	mouseleave = [==[Fires when a user moves their mouse out of the adornment.]==],
	focusdistance = [==[Distance away from the camera where objects are in focus]==],
	friendrequestreceived = [==[At least one of two players has received a friend request sent by the other player.]==],
	isgrounded = [==[Returns true if the object is connected to a part that will hold it in place (eg an BasePart.Anchored part), otherwise returns false.]==],
	playercount = [==[The number of players currently in the active game-instance.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	constrainedvalue = [==[Hold a Integer value between IntConstrainedValue.MinValue and IntConstrainedValue.MaxValue. Replaced by IntConstrainedValue.Value, but still functional.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	socialservice = [==[Facilitates social functions that impact relationships made on the Roblox platform]==],
	isgeartypeallowed = [==[Returns whether gear of the given Enum.GearType is permitted to be added to Player StarterGear]==],
	toworldspace = [==[Returns a CFrame transformed from Object to World space.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	pavement = [==[Applies to Terrain only.]==],
	startergear = [==[If the game allows gear, StarterGear contains all of a player's appropriate gear. Whenever the Player's character spawns, all of the contents of that player's StarterGear will get copied into the player's Backpack.]==],
	stepin = [==[Performs a <a href="/articles/Lua-debugger" class="mw-redirect" title="Lua Debugger">step into</a> operation on the Lua Debugger.]==],
	texturesize = [==[Sets the size of the texture used with the FloorWire.]==],
	climbanimation = [==[The asset is a climb animation.]==],
	speed = [==[The desired speed a SlidingBallConstraint with SlidingBallConstraint.ActuatorType set to Enum.ActuatorType will attempt to maintain while translating towards its SlidingBallConstraint.TargetPosition. Measured in studs/second.]==],
	emoteanimation = [==[The asset is an emote animation.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	inset = [==[As GuiObject.BorderSizePixel increases, the border grows evenly inward only. The dimensions of the GuiObject's contents are reduced at a 1:2 ratio.]==],
	dragstopped = [==[Fired when a player stops dragging the object]==],
	isfinished = [==[Whether or not the current page is the last page available.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	sub = [==[Returns the substring of s that starts at i and continues until j. i and j can be negative. i defaults to 1 and j defaults to -j.]==],
	setkeys = [==[Resets this curve’s keys using the FloatCurveKey array passed as argument.]==],
	target = [==[Determines the object towards which the part should follow/face]==],
	platformstanding = [==[Fires when the Humanoid enters or leaves the <em>PlatformStanding</em> Enum.HumanoidStateType]==],
	settitle = [==[Given the name of a bound action with a touch button, sets the text shown on the button.]==],
	default = [==[Uses the default collision model]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	maxforce = [==[Determines the limit on how much force that may be applied to each axis]==],
	faces = [==[A datatype containing six booleans, each representing a face of a BasePart.]==],
	concerthall = [==[Sound reverb is changed to sound like the player is in a concert hall.]==],
	maxitems = [==[Historically the maximum number of items that can be assigned to the Debris service at one time]==],
	debris = [==[The Debris service allows the developer to schedule the removal of the object without yielding any code, through the usage of the Debris:AddItem method.]==],
	time = [==[Returns how many seconds have passed since the Unix epoch (1 January 1970, 00:00:00) under current UTC time.]==],
	getcollisiongroupid = [==[Returns the id of the group with the specified name.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	reflectionmetadataenums = [==[Acts as a Folder for ReflectionMetadataEnum objects]==],
	windowfocusreleased = [==[Fires when the window of the Roblox client loses focus on the user’s screen]==],
	contenttext = [==[A copy of TextButton.Text that contains exactly what is being rendered by the TextButton.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	getglobaldatastore = [==[Returns the default data store]==],
	automaticretry = [==[Sets whether data store functions should automatically retry or not. DataStoreService does not respect this property because automatic retry has been disabled due to technical reasons. Therefore, you must implement systems for retrying operations yourself.]==],
	y = [==[The y-coordinate of the Vector3int16.]==],
	getcore = [==[Returns a variable that has been specified by a Roblox CoreScript]==],
	enabled = [==[If set to true, light will be emitted from the source object.]==],
	removeselectiongroup = [==[Removes a group that was created with GuiService:AddSelectionParent or GuiService:AddSelectionTuple.]==],
	robloxround = [==[Causes the frame to appear as a translucent dark gray rectangle with rounded edges. Like "RobloxSquare" this has a padding of five pixels on all sides.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	textscaled = [==[Determines whether text in a UI element is scaled to fill the UI element]==],
	currentcamera = [==[The Camera object being used by the local player.]==],
	none = [==[The player does not have an active paid membership.]==],
	getversionasync = [==[Retrieves the specified key version.]==],
	jsonencode = [==[Generate a JSON string from a Lua table]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	playermembershipchanged = [==[Fires when the game server recognizes that a player’s membership has changed]==],
	style = [==[Sets the style of the GuiButton based on a list of pre-determined styles.]==],
	setupvalue = [==[Sets the value of the upvalue <i>name</i> as <i>value</i> in the stack specified.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	value = [==[The stored <a href="/api-reference/datatype/Vector3" class="mw-redirect" title="Vector3">Vector3</a>.]==],
	setcamerapanmode = [==[Sets the Enum.CameraPanMode to be used by the Camera on mobile devices]==],
	jointinstance = [==[JointInstance is the base class for joints, such as Connectors, Welds, and Snaps.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	getmetadata = [==[Gets the custom metadata set with this DataStoreSetOptions instance.]==],
	sinh = [==[Returns the hyperbolic sine of x.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	keypoints = [==[An array of ColorSequenceKeypoint values in ascending order.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	graphicsqualitychangerequest = [==[Fires when the user prompts and increase or decrease in graphics quality using the hotkeys]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	size = [==[Determine the pixel and scalar size of a GuiObject]==],
	gear = [==[The asset is a gear item.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	playerdisconnecting = [==[Fired when a player is disconnecting from the game.]==],
	setuniverseid = [==[Sets the DataModel.GameId of the current game instance to the given <em>universeId</em>]==],
	getmoondirection = [==[Returns a DataType.Vector3 representing the direction of the moon from the position 0, 0, 0.]==],
	streamingenabled = [==[Whether content streaming is enabled for the place]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	prompthidden = [==[Triggers client-side when a prompt becomes hidden]==],
	minprice = [==[The minimum item price to search for.]==],
	cageoriginworld = [==[Cage mesh offset in world space.]==],
	collectionservice = [==[A service which manages object collections using assigned tags.]==],
	absoluteposition = [==[Describes the actual screen position of a UI element, in pixels.]==],
	green = [==[Returns the BrickColor Dark Green.]==],
	dos = [==[The client is running on DOS.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	rootpart = [==[A reference to the Humanoid <em>HumanoidRootPart</em>.]==],
	gothamsemibold = [==[<img src="/assets/bltbd02f418138a4347/Font-Face-Sample-Gotham-Semibold.png" class="img-fluid half-sized" />]==],
	sin = [==[Rotate at a velocity of:
<pre>ParamA * math.sin(game.Workspace.DistributedGameTime * ParamB).
</pre>
BasePart <em>ParamA</em> will determine the maximum speed at which the part will spin, and BasePart <em>ParamB</em> will determine how frequently it changes direction.]==],
	vipserverid = [==[A string that could identify the current server as a VIP server]==],
	placeversion = [==[Describes the version of the Articles.Place the server is running on]==],
	textureid = [==[The texture applied to the MeshPart.]==],
	genre = [==[Not functional. Historically described the Enum.Genre of the Articles.Place as set on the Roblox website]==],
	shirt = [==[Displays a Shirt texture from the Roblox website to display on a Humanoid rig]==],
	stop = [==[Ends the game’s simulation if it is running]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	rotationaxisvisible = [==[Enable the visibility of the rotation axis.]==],
	keyboardkeycode = [==[The key the player should press to trigger the prompt]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	angularvelocity = [==[The target angular velocity of the motor in radians per second around the rotation axis. Value in [0, inf).]==],
	value = [==[The stored <a href="/articles/String" class="mw-redirect" title="API:Type/string"><span>string</span></a>.]==],
	angularspeed = [==[Target angular speed. This value is unsigned as the servo will always move toward its target. In radians per second. Value in [0, inf).]==],
	orientation = [==[Specifies how to orient particles]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	sourcevaluechanged = [==[Fires when the value of the CustomEvent's source is changed, passing the CustomEvent's new value.]==],
	applydescription = [==[Makes the Player.Character look match that of the passed in HumanoidDescription]==],
	userchoice = [==[The player's character will moved based on the user's settings.]==],
	range = [==[The size of the area that the PointLight will illuminate.]==],
	level16 = [==[Graphic quality level 16.]==],
	source = [==[Attaches the CustomEventReceiver object to a CustomEvent]==],
	receiverdisconnected = [==[Fires when a receiver is disconnected from the CustomEvent]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	windowfocused = [==[Fires when the window of the Roblox client gains focus on the user’s screen]==],
	character = [==[A Model controlled by the player that contains a Humanoid, body parts, scripts and other objects.]==],
	move = [==[Causes the Humanoid to walk in the given direction]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	torso = [==[The torso BodyPart.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	removesubpose = [==[This function removes a sub Pose from the Pose by parenting it to nil.]==],
	requiresneck = [==[Allows developers to disable the behavior where a player Character dies if the Neck Motor6D is removed or disconnected even momentarily]==],
	stiffness = [==[The strength of the spring. The higher this value the more force will be applied when the attachments are separated a different length than the SpringConstraint.FreeLength.]==],
	portrait = [==[A preference where the game is displayed portrait (vertically) with the bottom of the device on the bottom of the screen.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	textbounds = [==[The pixel size of a UI element's text.]==],
	getasync = [==[Performs a GET request on an <a rel="nofollow" class="external text" href="http://api.roblox.com/docs">official Roblox web API</a>]==],
	friendpages = [==[A special version of Pages which contains information about a player's friends.]==],
	midgain = [==[The output volume of frequencies between 400 and 4000 Hz.]==],
	setdescription = [==[Given the name of a bound action with a touch button, sets the description of the action.]==],
	uicomponent = [==[A base class for UI constraint and layout classes, inherits from UiBase.]==],
	targetoffset = [==[Determines the world offset from the RocketPropulsion.Target toward which the force/torque is exerted]==],
	bindactivate = [==[Bind a Enum.KeyCode with a specific Enum.UserInputType to trigger Tool.Activation and ClickDetector events]==],
	controllerservice = [==[Container class for the HumanoidController among other classes.]==],
	bindactiontoinputtypes = [==[Binds <em>functionToBind</em> to input events such as key presses, mouse movement, or controller input.]==],
	sort = [==[Sorts table elements using the provided comparison function or the &lt; operator.]==],
	custom = [==[Increases by a rate as low as .001 along all axes.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	deprecatedobjectsshown = [==[If set to true, deprecated objects will be shown in the Advanced Objects window, as well as the Object Browser.]==],
	specialmesh = [==[The SpecialMesh is an object that allows developers to provide a standard template or user uploaded mesh to a BasePart.]==],
	surfacecolor3 = [==[Determines the color of the sphere's surface]==],
	unjoinfromoutsiders = [==[Breaks all joints between the specified BaseParts and other BaseParts.]==],
	radius = [==[The radius of the cone adornment.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	gainmakeup = [==[The overall amplification applied to the effectâ€™s Sound or SoundGroup after attenuation of sounds above the threshold.]==],
	setjoinaftermovetarget = [==[Sets the PVInstance that will be connected with the PVInstance specified by JointsService:SetJoinAfterMoveInstance.]==],
	registercomputermovementmode = [==[Registers that a computer movement mode is available to be selected from the game menu.]==],
	climbing = [==[Fires when the speed at which a Humanoid is climbing changes]==],
	isuserfeatureenabled = [==[Returns true if the specified user feature is enabled. This will throw an error if the user feature does not exist.]==],
	touched = [==[Fired when a part comes in contact with another part]==],
	primaryaxis = [==[The direction of the goal's X-Axis, represented as a unit Vector3.]==],
	itemremoved = [==[Fires when a Configuration, CustomEvent, CustomEventReceiver, Dialog, or VehicleSeat is removed from the DataModel]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	getinstanceaddedsignal = [==[Get a signal that fires when a given tag is added to an object]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	clouds = [==[Renders realistic clouds that drift slowly across the sky.]==],
	getfreemodels = [==[Retrieves a list of Free Models from the Catalog]==],
	children = [==[Returns an array of the object's children.]==],
	platform = [==[Historically a form of Seat that wouldn't place the player in a sitting pose. This object is no longer create-able and cannot be used by developers]==],
	score = [==[Deprecated. This property can be used to store an integer value associated with the team. This property offers no additional functionality and is not used by any game services.]==],
	height = [==[The height of the cylinder adornment.]==],
	getsecondaryaxis = [==[Returns the value of the Attachment's Attachment.SecondaryAxis]==],
	width = [==[The x axis.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	cursoricon = [==[Sets the mouse icon that will be displayed when the mouse is hovered over this ClickDetector]==],
	level04 = [==[Graphic quality level 4.]==],
	visible = [==[Determines whether or not the ForceField's particle effect is visible.]==],
	loaddefaultchat = [==[Toggles whether the default chat framework should be automatically loaded when the game runs.]==],
	bubblechatenabled = [==[Determines whether player's chat messages will appear above their in-game avatar]==],
	limitangle0 = [==[Determines the maximum angle between the rod and Constraint.Attachment0 when RodConstraint.LimitsEnabled is true]==],
	filterstringasync = [==[Filters a string sent from a player to another player using filtering that is appropriate to the players' account settings.]==],
	setenabled = [==[Sets whether or not the ChangeHistoryService is enabled.]==],
	resetwaypoints = [==[Clears the history, causing all undo/redo waypoints to be removed.]==],
	inputbegan = [==[Fired when a user begins interacting via a Human-Computer Interface device (Mouse button down, touch begin, keyboard button down, etc)]==],
	unionasync = [==[Performs a Union operation on the calling BasePart and the list of parts passed in as the first parameter]==],
	cframevalue = [==[A container object for a single CFrame value.]==],
	rbxscriptconnection = [==[A connection between an RBXScriptSignal and a function.]==],
	yaxis = [==[A Vector3 with a value of 1 on the Y axis.]==],
	face = [==[Determines the asset ID of the Face to be applied to the Humanoid]==],
	drylevel = [==[The output volume of the original sound.]==],
	loadasset = [==[Returns a Model containing the asset]==],
	childadded = [==[Fires when an object is parented to this Instance.]==],
	rodconstraint = [==[Constraints two Attachment such that they maintain the same distance from each other, and optionally constraints the maximum angle between the ends of the rod and respective attachments]==],
	cameramaxzoomdistance = [==[The maximum distance the player's default camera is allowed to zoom out in studs.]==],
	basetextureid = [==[The texture of a CharacterMesh. It can be overridden by Shirts, Pants, T-Shirts, and the CharacterMesh.OverlayTextureId property.]==],
	isrunmode = [==[Returns whether the ‘Run’ button has been pressed to run the simulation in Roblox Studio]==],
	windows = [==[The client is running on a Windows Operating System.]==],
	closeinspectmenu = [==[Closes the Inspect Menu, if open]==],
	coordinateframe = [==[The old version of the Camera.CFrame property which functions identically to it.
This item should be used in a LocalScript in order to work as expected online.]==],
	freememorymbytes = [==[Describes how much free memory is available, in MBs.]==],
	transparency = [==[Determines the transparency of the Decal with 0 being completely opaque and 1 completely transparent.]==],
	cameraoffset = [==[An offset applied to the Camera's subject position when its CameraSubject is set to this Humanoid.]==],
	getattribute = [==[Returns the attribute which has been assigned to the given name]==],
	level18 = [==[Graphic quality level 18.]==],
	promptimportfiles = [==[Prompts the current Studio user to select files to add as File]==],
	usercframeenabled = [==[Fires when a UserCFrame gets enabled or disabled.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	getkeyindicesattime = [==[Returns key indices before and after time.]==],
	bordersizepixel = [==[Determines the pixel width of a GuiObject border]==],
	idle = [==[(3) - Second lowest priority]==],
	uiminimum = [==[The minimum value of this property. Used with ReflectionMetadataItem.UIMaximum to control the slider bar of this property in the <i>Properties</i> window.]==],
	setdesiredangle = [==[Sets Motor.DesiredAngle of the motor.]==],
	isdeleted = [==[Whether the version has been marked as deleted.]==],
	thumbstick = [==[The player's character is controlled with a virtual thumbstick that moves with the player's finger. Jumping is controlled with a separate button.]==],
	transparency = [==[Sets the transparency of a GUI object, where 1 is invisible and 0 is completely visible.]==],
	jawdrop = [==[Lowers the jaw downward opening the mouth]==],
	unequipped = [==[Fired when the tool is unequipped]==],
	headscale = [==[Sets the scale of the user's head when using VR]==],
	release = [==[The time the effect takes to become inactive after its sound is below the Threshold.]==],
	antique = [==[<img src="/assets/bltac043658e44c549a/Font-Face-Sample-Antique.png" class="img-fluid half-sized" />]==],
	blastpressure = [==[Used to determine the amount of force applied to BaseParts caught in the Explosion.BlastRadius.]==],
	button1down = [==[Fired when the left mouse button is pressed.]==],
	region3 = [==[A datatype that describes a rectangular volume in 3D space.]==],
	uiscale = [==[An object that acts as a multiplier for the size of the parent UI element's scale.]==],
	selectionlost = [==[Fired when the Gamepad selector stops focusing on the GuiObject]==],
	d = [==[Determines the amount of dampening to use in reaching the goal BodyPostion.Position]==],
	autofrmlevel = [==[Sets the starting quality level of the framerate manager, when RenderSettings.EnableFRM is set to true.]==],
	bodyposition = [==[Applies a force to maintain a constant position]==],
	maxtorque = [==[Determines the limit on how much torque that may be applied to each axis]==],
	turbobuildersclub = [==[(no longer available)]==],
	headcolor = [==[Sets the color of this limb, as a <a href="/api-reference/datatype/BrickColor" class="mw-redirect" title="API:BrickColor"><span>BrickColor</span></a>.]==],
	cframe = [==[Represents the CFrame offset of the Attachment.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	threshold = [==[Determines how bright a color must be before it blooms]==],
	setasync = [==[Sets the value of the data store for the given key.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	jumping = [==[Fires when the Humanoid enters and leaves the <em>Jumping</em> Enum.HumanoidStateType]==],
	upperangle = [==[Sets the upper rotation limit of the BallSocketConstraint, as long as BallSocketConstraint.LimitsEnabled is true.]==],
	classicandbubble = [==[Has the effects of Classic and Bubble combined.]==],
	button1up = [==[Fires when the left mouse button is released.]==],
	transparency = [==[Determines the transparency of the Beam across its segments.]==],
	universalconstraint = [==[A constraint that maintains a perpendicular angle between two axes of two attachments]==],
	lightemission = [==[Determines to what degree the colors of the Beam are blended with the colors behind it.]==],
	next = [==[An iterator function for use in for loops.]==],
	players = [==[Returns a list of players in a game]==],
	streamingpausemode = [==[Whether streaming physics pause mode is active]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	setcontents = [==[Sets the contents of the LocalizationTable, via the legacy JSON format.]==],
	mousehoverleave = [==[Fired when a player's mouse moves off of the ClickDetector's parent]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	topimage = [==[The Up image on the vertical scrollbar. The size of this is always ScrollBarThickness by ScrollBarThickness. This is also used as the left image on the horizontal scroll bar.]==],
	maxlength = [==[The maximum separation the SpringConstraint will allow if SpringConstraint.LimitsEnabled is true.]==],
	browsable = [==[Whether or not this can be seen in studio]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	sensor = [==[A preference where the game is displayed depending on the best match to the device's current orientation - either landscape (left/right) or portrait.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	wetlevel = [==[The output volume of the echoed effect.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	left = [==[Whether the left face is included.]==],
	getnetworkownershipauto = [==[Returns true if the game engine automatically decides the network owner for this part.]==],
	remoteevent = [==[Similar to BindableEvent, but allows crossing the client/server boundary.]==],
	random = [==[Returns a random number within the range provided.]==],
	topsurface = [==[Determines the type of surface for the Top face of a part (+Y direction)]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	rootpriority = [==[The main rule in determining the root part of an assembly]==],
	fallanimation = [==[When this description is Humanoid:ApplyDescription to a Humanoid, this determines the Animation.AnimationId to play when its Humanoid:GetState is enum.HumanoidStateType]==],
	material = [==[Determines the texture and default physical properties of a part]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	leftparama = [==[Determines the first parameter for the SurfaceType on the Left face of a part (-Z direction)]==],
	globaldatastore = [==[An object that exposes methods to access a single data store]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	getbadgeinfoasync = [==[Fetch information about a badge given its ID]==],
	keyframesequence = [==[This object stores all of the Keyframes for an animation and other data about the animation. It is the object that is created by the Roblox Animation Editor and uploaded to Roblox.]==],
	random = [==[A provider of pseudorandom numbers.]==],
	gettags = [==[Get all tags applied to a given object]==],
	registercomputercameramovementmode = [==[Registers that a computer camera movement mode is available to be selected from the game menu.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	onclientevent = [==[Fires listening functions in LocalScript when either RemoteEvent:FireClient or RemoteEvent:FireAllClients is called from a Script.]==],
	rightupperlipraiser = [==[Raises the right upper lip away from the lower lip revealing the upper teeth]==],
	brickcolor = [==[Determines the color of a part.]==],
	characterright = [==[The player moved right.]==],
	basepart = [==[The abstract base class for in-world objects that physically interact.]==],
	twistupperangle = [==[Sets the upper twist rotation limit of the BallSocketConstraint, as long as BallSocketConstraint.TwistLimitsEnabled is true.]==],
	wheelbackward = [==[Fires when the mouse wheel is scrolled backwards]==],
	flag = [==[The Flag object is a deprecated object that was used to make capture the flag games]==],
	mouseenter = [==[Fires when a user moves their mouse over the adornment.]==],
	dopplerscale = [==[This property determines the degree to with a 3D Sounds pitch varies due to the Doppler effect.]==],
	pivotoffset = [==[Specifies the offset of the part's pivot from its datatype.CFrame.]==],
	placeholdertext = [==[Sets the text that gets displayed when no text has been entered into the TextBox yet.]==],
	universal = [==[Makes the side appear with both Studs and Inlets in a checker pattern]==],
	getstringforkeycode = [==[Returns a string representing a key the user should press in order to input a given KeyCode]==],
	scrollingdirection = [==[Determines the direction scrolling is allowed in this scrolling frame]==],
	getavailablethemes = [==[Returns a list of StudioTheme available in Studio]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	jumppower = [==[Determines how much upwards force is applied to the Humanoid when jumping]==],
	value = [==[Used to hold a <span class="explain" title="true/false">boolean</span> value.]==],
	texturespeed = [==[Determines the speed at which the Beam.Texture image moves along the Beam.]==],
	pageenter = [==[Fires when a page comes into view, and is going to be rendered.]==],
	material = [==[The enum.Material at the intersection point.]==],
	collisiontype = [==[Selects the Enum.HumanoidCollisionType for R15 and Rthro non-player characters]==],
	rigtype = [==[Describes whether this Humanoid is utilizing the legacy R6 character rig, or the new R15 character rig.]==],
	upperlipsuck = [==[Rolls the upper lip around the teeth]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	currentangle = [==[Signed angle (in degrees) between the reference axis and the secondary axis of Attachment1 around the rotation axis. Value in [-180, 180].]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	mousebutton1up = [==[Fires when a user releases their left mouse button while hovering over the adornment.]==],
	worldmodel = [==[Provides some physics features to a ViewportFrame]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	setstateenabled = [==[Sets whether a given Enum.HumanoidStateType is enabled for the Humanoid]==],
	badge = [==[The asset is a badge.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	getmetadata = [==[Returns the metadata associated with the object.]==],
	rebalanceteams = [==[Evens the number of people on each team. This function does not work correctly and should not be used.]==],
	textbounds = [==[The pixel size of a UI element's text.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	looped = [==[This property sets whether the animation will repeat after finishing. If it is changed while playing the result will take effect after the animation finishes.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	rightcheekraiser = [==[Squints the right eye]==],
	packagepermission = [==[Indicates the current user's or group roleset's permission to the package.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	leftdimpler = [==[Moves the corners of the mouth back in Z]==],
	touchtapinworld = [==[Fires when a user taps the game world on a UserInputService.TouchEnabled device - such as the screen of a mobile device]==],
	getnavigationgamepads = [==[Returns an array of Enum.UserInputType connected and enabled for GUI navigation in descending order of priority]==],
	getcharacterappearanceinfoasync = [==[Returns information about the character appearance of a given user]==],
	thickness = [==[The thickness of the line in pixels.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	worldtoscreenpoint = [==[Returns the 2D screen location of a DataType.Vector3 position in the world, the depth of it from the screen and whether it is visible. Accounts for the GUI inset]==],
	fillregion = [==[Fills a <a href="/api-reference/datatype/Region3" class="mw-redirect" title="Region3">Region3</a> space with smooth terrain.]==],
	isstudio = [==[Returns whether the current environment is running in Roblox Studio]==],
	width0 = [==[The width in studs of the Beam at its base.]==],
	custom = [==[Sorting order is custom.]==],
	getassetidsforpackage = [==[Returns an array of assetIds that are contained in a specified package.]==],
	datareceivekbps = [==[In a networked game, this describes roughly how many kilobytes of data are being received by the current instance, per second.]==],
	saturation = [==[Determines the change in intensity of colors]==],
	clearcharacterappearance = [==[Removes all accessories and other character appearance objects from a player's Character.]==],
	bindtoclose = [==[Binds a function to the PluginGui close button, overriding the default behavior]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	height = [==[The Y dimension of the UDim2.]==],
	slicescale = [==[Scales the 9slice edges by the specified ratio]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	clone = [==[Create a copy of an object and all its descendants, ignoring objects that are not Instance.Archivable]==],
	sign = [==[Returns -1 if x &lt; 0, 0 if x == 0, or 1 if x &gt; 0.]==],
	studs = [==[Makes the side appear with square studs]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	front = [==[Whether the front face is included.]==],
	collisiongroupcontainspart = [==[Returns whether the part is in the collision group.]==],
	keycode = [==[Contains an Enum that describes the kind of input used]==],
	getplayers = [==[Returns a list of Players who are assigned to the Team. A Player is considered assigned if their Player.Team property is equal to the Team and Player.Neutral is false.]==],
	servomaxtorque = [==[Maximum torque the servo motor can apply. The units are mass * studs^2 / second^2. Value in [0, inf).]==],
	offset = [==[Controls how light transmits between the camera and the sky background.]==],
	insertkey = [==[Adds the key passed as argument to this curve. If a key at the same time is found it will be replaced.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	resetonspawn = [==[Controls how this LayerCollector behaves when its associated Player respawns.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	animationplayed = [==[This event fires whenever the AnimationController begins playing an animation. It returns the AnimationTrack playing.]==],
	getkeyframes = [==[Returns an array that contains all Keyframes that have been added to a KeyframeSequence.]==],
	automaticcanvassize = [==[Determines whether ScrollingFrame.CanvasSize is resized based on child content]==],
	paused = [==[This event fires whenever the VideoFrame.Video is paused using VideoFrame:Pause or by setting VideoFrame.Playing to false]==],
	setsecondaryaxis = [==[Sets the value of the Attachment's Attachment.SecondaryAxis]==],
	getonboardingcompleted = [==[Checks if onboarding has been completed]==],
	keyboard = [==[Key press on a keyboard.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	bindtorenderstep = [==[Given a string name of a function and a priority, this method binds the function to RunService.RenderStepped]==],
	pairs = [==[Returns an iterator function and the provided table for use in a for loop.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	rbxscriptsignal = [==[An object that runs connected functions upon a specific occurrence.]==],
	toolpunchthroughdistance = [==[Sets the distance left clicking starts acting on the surface gui instead of the held tool.]==],
	x = [==[The x-coordinate of the Vector3int16.]==],
	getattributes = [==[Returns a dictionary of string → variant pairs for each of the Instance attributes]==],
	touchcameramovementmode = [==[The camera type in-use by the client while on a mobile device.]==],
	bloomeffect = [==[Simulates the camera viewing a very bright light]==],
	angularvelocity = [==[Applies a constant torque to a Part, relative to an Attachment space or world space]==],
	uigridlayout = [==[Positions sibling UI elements by filling rows using the space of the parent UI element]==],
	backpackitem = [==[BackpackItem is an abstract class for backpack items such as HopperBins and Tools.]==],
	condition = [==[The condition of the debugger breakpoint.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	chinraiser = [==[Raises the chin up; moves the lower lip upwards]==],
	top = [==[The top face of a Part.]==],
	virtualthumbstick = [==[The touchpad will function as a gamepad joystick.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	adservice = [==[A decommissioned service that is no longer operational. Historically used to display mobile video ads]==],
	uinumticks = [==[The number of potential values the property's slider bar can be set to, between <a href="/api-reference/property/ReflectionMetadataItem/UIMinimum" class="mw-redirect" title="UIMinimum">UIMinimum</a> and <a href="/api-reference/property/ReflectionMetadataItem/UIMaximum" class="mw-redirect" title="UIMaximum">UIMaximum</a>.]==],
	density = [==[Defines the amount of particles in the Atmosphere and essentially controls how much <span class="text-nowrap">in-game</span> objects/terrain will be obscured by them.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	new = [==[Returns a Vector3 from the given x, y, and z components.]==],
	mouseclick = [==[Deprecated in favor of ClickDetector.MouseClick]==],
	basescript = [==[The base class for all script objects which run automatically.]==],
	urlencode = [==[Replaces URL-unsafe characters with '%' and two hexadecimal characters]==],
	changed = [==[Fired whenever the BrickColorValue.Value of the BrickColorValue is changed.]==],
	rightdimpler = [==[Moves the corners of the mouth back in Z]==],
	new = [==[Returns a Vector2 from the given x and y components.]==],
	setbubblechatsettings = [==[Customizes various settings of the in-game bubble chat]==],
	level14 = [==[Graphic quality level 14.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	selectionimageobject = [==[Overrides the default selection adornment (used for gamepads). For best results, this should point to a GuiObject.]==],
	emoteschanged = [==[Fires when emotes are added, removed or set on this description]==],
	creatorid = [==[Describes the ID of the user or group that owns the Articles.Place]==],
	jump = [==[Whether the Humanoid is jumping. If set to true, it will cause the Humanoid to jump.]==],
	allowteamchangeontouch = [==[Allows a Player to join the team by touching the SpawnLocation. When set to true, if a Player character comes into contact with the SpawnLocation, the player's Player.TeamColor will be set to SpawnLocation.TeamColor.]==],
	rotation = [==[Determines the clockwise rotation in degrees of the gradient starting from left to right.]==],
	textxalignment = [==[Determines the horizontal alignment of rendered text.]==],
	normal = [==[The normal vector of the intersected face.]==],
	numbersequencekeypoint = [==[A keypoint within a NumberSequence with a particular time, value, and envelope size.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	privateserverid = [==[Describes the private server ID of the server, if the server is a Articles/Creating a VIP Server on Roblox|VIP server or a TeleportService:ReserveServer]==],
	default = [==[The default movement controller.]==],
	turnd = [==[Determines the amount of dampening that to use in reaching the RocketPropulsion.Target]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	center = [==[The object is centered around the center of its parent.]==],
	removedefaultloadingscreen = [==[Immediately removes the default Roblox loading screen. Note if any object has been placed in ReplicatedFirst, the default loading screen will remove after 5 seconds regardless if this function has been called or not.]==],
	numberrange = [==[A datatype that represents a range of numbers.]==],
	transport = [==[Gear with the 'Transport' attribute.
<img alt="Transport Attribute" src="/assets/blt669c2a184782cd46/GearType_Transport.png" />]==],
	cobblestone = [==[Applies to BasePart and Terrain.]==],
	setidentityorientation = [==[Sets the identity rotation of the given model, allowing you to reset the rotation of the entire model later, through the use of the ResetOrientationToIdentity method.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	screenpointtoray = [==[Creates a unit DataType.Ray from a position on the screen (in pixels), at a set depth from the Camera orientated in the Camera direction. Accounts for the GUI inset]==],
	position = [==[A <a href="/api-reference/datatype/Vector3" class="mw-redirect" title="Vector3">Vector3</a> that describes the positional offset of the Attachment, relative to the position and orientation of its parent.]==],
	axischanged = [==[Fired when any input state of the skateboard controller is updated.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	postasync = [==[Performs a HTTP POST request]==],
	scale = [==[The relative scale component of the UDim.]==],
	back = [==[Whether the back face is included.]==],
	turnp = [==[Determines how aggressive of a torque is applied in facing the RocketPropulsion.Target]==],
	enumtype = [==[A reference to the parent datatype.Enum of the EnumItem.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	getenumitems = [==[Returns an array of all datatype.EnumItem options available for this enum.]==],
	floatingysize = [==[The initial pixel height of the PluginGui when floating.]==],
	goodbyedialog = [==[Sets the sentence that the dialog will show to the player when the chat ends]==],
	brightness = [==[Determines by how much the brightness of pixel colors will be shifted]==],
	tongueout = [==[Extends the tip of the tongue out of the mouth]==],
	eulerrotationcurve = [==[Represents a 3D rotation curve, it groups 3 FloatCurve, stored as 3 FloatCurve child instances.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	curvesize1 = [==[Determines, along with Beam.Attachment1 the position of the second control point in the Beam's Bézier curve.]==],
	threadpoolsize = [==[The current size of the thread pool.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	getbundledetailsasync = [==[Returns details of the contents of specified bundle]==],
	floatcurvekey = [==[A time-value pair used with FloatCurve instances.]==],
	loadanimation = [==[This function loads an Animation onto an AnimationController, returning an AnimationTrack that can be used for playback.]==],
	lerp = [==[Returns a Color3 interpolated between two Color3 objects.]==],
	setbaseurl = [==[Sets ContentProvider.BaseUrl, used by CoreScripts to interact with the web APIs.]==],
	thumbstick = [==[Change the movement controller to the thumbstick.]==],
	triggered = [==[Triggered when the prompt ProximityPrompt.KeyboardKeyCode/button is pressed, or after a specified amount of time holding the button, if ProximityPrompt.HoldDuration is used]==],
	wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal.]==],
	lipstogether = [==[Brings the lips together relative to JawDrop]==],
	clear = [==[Clears the menu]==],
	fallingdown = [==[Fires when the Humanoid enters or leaves the <em>FallingDown</em> Enum.HumanoidStateType]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	handlesbase = [==[An abstract class for Handle objects, such as ArcHandles and Handles.]==],
	loadanimation = [==[Loads an Animation onto a Humanoid, returning an AnimationTrack that can be used for playback]==],
	manualglue = [==[ManualGlue is a joint created in a similar manner to the ManualWeld class. It functions identically to the Glue class.]==],
	getattachedreceivers = [==[Returns the CustomEventReceiver that are connected to the CustomEvent]==],
	partadornment = [==[An abstract class for GUI elements that are adorned to (displayed as attached to) objects deriving from BasePart.]==],
	vector2int16 = [==[A Vector2 with signed 16-bit integers for components.]==],
	flagstand = [==[The FlagStand and Flag are deprecated objects that were used to make capture the flag games]==],
	yvector = [==[Equivalent to the second/middle column of the rotation matrix.]==],
	connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it.]==],
	rightarm = [==[If the limb is a part of the Humanoid's Torso. <em>This includes UpperRightArm and LowerRightArm for R16 rigs.</em>]==],
	axisrotate = [==[Rotates the currently dragged part(s) by 90 degrees on the given axis.]==],
	fireallclients = [==[Fires the RemoteEvent.OnClientEvent event for each client.]==],
	cframe = [==[Determines the target orientation (translational component ignored)]==],
	vector3int16 = [==[A Vector3 with signed 16-bit integers for components.]==],
	b = [==[The blue value of the color.]==],
}
