return {
	Time = [==[The amount of time the tween takes in seconds]==],
	GuiBase = [==[GuiBase is an abstract class which most graphical user interface objects inherit from]==],
	AutoColorCharacters = [==[Deprecated and no longer functional. Historically set whether or not <code>Player</code> character models on a team would be colored to <code>Team.TeamColor</code>]==],
	OtherMechanismsAnchored = [==[Only the part and any parts directly jointed to it via joints/<code>Constraint</code> will be moved during resolution, but they will collide with other objects in the workspace]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	NotProcessedYet = [==[The purchase request has been sent but not yet processed]==],
	HealthDisplayDistance = [==[Sets the distance at which this player will see other Humanoid’s health bars. If set to 0, the health bars will not be displayed]==],
	MaxAngle = [==[The max angle, in degrees, of the constraint’s limiting con]==],
	TimePosition = [==[Returns the position in time in seconds that an <code>AnimationTrack</code> is through playing its source animation. Can be set to make the track jump to a specific moment in the animation]==],
	Actor = [==[This is the Actor Clas]==],
	rep = [==[Returns a string that is the concatenation of n copies of the string s]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	UiMessageError = [==[The message error]==],
	MeshContentProvider = [==[An internal Roblox service that is responsible for fetching, parsing and caching meshes. This service cannot be used by developers]==],
	Disabled = [==[Determines whether a <code>BaseScript</code> will run or not]==],
	Medium = [==[0.5 seconds per cycl]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Color3 = [==[The <code>DataType.Color3</code> tint of the <code>Decal</code>]==],
	GetValueString = [==[Returns the StatsItem's value as a formatted string]==],
	Blue = [==[Returns the BrickColor Bright Blue]==],
	Magnitude = [==[The length of the vector]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	WalkAnimation = [==[When this description is <code>Humanoid:ApplyDescription</code> to a <code>Humanoid</code>, this determines the <code>Animation.AnimationId</code> to play when its <code>Humanoid:GetState</code> is <code>enum.HumanoidStateType</code> at a low spee]==],
	Octave = [==[The percentage to shift the original pitch]==],
	ItemChanged = [==[Fires when a property of any object in the <code>DataModel</code> is change]==],
	Image = [==[The image content displayed by the UI element]==],
	GetAlliesAsync = [==[Returns a <code>StandardPages</code> object including information on all of the specified group's allies]==],
	ThemeChanged = [==[Event called when Studio's <code>StudioTheme</code> change]==],
	SkateboardPlatform = [==[A SkateboardPlatform can be used to create a skateboard. When characters get on a skateboard, they are stuck to it until they press the escape key. Until then, the character uses skateboard animations and travels faster than a walking character]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	RightHand = [==[The CFrame of the user's right hand]==],
	Script = [==[An object that contains and runs Lua code on the serve]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Low = [==[Low priorit]==],
	MaxPromptsVisible = [==[The maximum number of <code>ProximityPrompt</code> that will be shown to the use]==],
	Color = [==[The Color3 associated with the BrickColor]==],
	Path = [==[Stores the result of paths created by <code>PathfindingService:CreatePath</code]==],
	RemoveAsync = [==[Removes an item or items previously read from the queue]==],
	Rock = [==[Applies to <code>Terrain</code> only]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Vector2 = [==[A 2D value representing a direction and magnitude]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	UserHasBadgeAsync = [==[Checks whether a player has the badge given the <code>Player.UserId</code> and the badge ID]==],
	IsModalDialog = [==[Indicates whether a modal dialog is visible]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Shadow = [==[The color of shadows rendered under floating items like dropdown]==],
	BodyThrust = [==[Applies a constant force to an object at a specific poin]==],
	codepoint = [==[Returns the codepoints (as integers) from all codepoints in a given string]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	CFrame = [==[A datatype that represents both a 3D position and orientation]==],
	SelectionLasso = [==[Abstract class for <code>SelectionPartLasso</code> and <code>SelectionPartLasso</code>]==],
	TextWrapped = [==[Determines if text wraps to multiple lines within the <code>GuiObject</code> element space, truncating excess tex]==],
	HeadsUpDisplay = [==[If true, a fancy speed bar will be displayed speed on screen that tells you what speed the Vehicle is moving at]==],
	Value = [==[Used to hold an <a href="/articles/Integers" title="Integer">Integer</a>]==],
	SpawnLocation = [==[<code>SpawnLocation</code>, or "spawns" determine where a <code>Player</code> respawns when they die. They can be configured to allow only certain players to use each spawn, using <code>Team</code>. They also control how <code>ForceField</code> are set up for newly-spawned players]==],
	GetPivot = [==[Gets the pivot of a <code>PVInstance</code>]==],
	GetModelCFrame = [==[This value historically returned the CFrame of a central position in the model. It has been deprecated as it did not provide reliable results]==],
	DataModelMesh = [==[The DataModelMesh is an abstract class from which mesh classes descend]==],
	RotationType = [==[Controls how the client's character is rotated]==],
	Status = [==[The success of the generated <code>Path</code>]==],
	NextUnitVector = [==[Returns a unit vector with a pseudorandom direction]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Extreme = [==[No throttling, absolutely no exceptions]==],
	NumberValue = [==[A container object for a single double-precision floating point number]==],
	Color = [==[Determines the color of the sparkle particles]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Place = [==[The asset is a place]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Value = [==[Used to hold a <a href="/api-reference/datatype/CFrame" title="CFrame">CFrame</a> value]==],
	Expression = [==[The expression set for the DebuggerWatch]==],
	Brick = [==[The mesh is a brick (just like the shape of a default <code>BasePart</code>]==],
	RespawnLocation = [==[If set, the player will respawn at the given <code>SpawnLocation</code]==],
	EditingDisabled = [==[Toggles whether this property can be edited from the Properties window]==],
	Action = [==[The action to be performed at this waypoint]==],
	Y = [==[The y-coordinate of the Vector2]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	ShirtGraphic = [==[Applies a texture to the front surface of a character's torso, used to display t-shirts]==],
	ZVector = [==[Equivalent to the third/bottom row of the rotation matrix]==],
	AddSelectionTuple = [==[<strong>AddSelectionTuple</strong> works similarly to <code>GuiService:AddSelectionParent</code>, but you can give it a tuple of <code>GuiObject</code> that you want to be contained in the group.
Beware that the second argument is <em>not</em> a table, but rather the first of several <code>GuiObject</code> in the tuple. To pass the contents of a table, use <code>unpack</code>/<code>table.unpack</code>:
<pre><code class="language-lua">local frame = script.Parent
-- Passing various GuiObject individually
GuiService:AddSelectionTuple(&quot;InventoryButtons&quot;, frame.Sort, frame.Trash, frame.Drop)
-- Unpacking a table of GuiObject (unpack/table.unpack are equivalent)
local inventoryButtons = { frame.Sort, frame.Trash, frame.Drop }
GuiService:AddSelectionTuple(&quot;InventoryButtons&quot;, unpack(inventoryButtons))
</code></pre]==],
	Round = [==[The corners are rounded  (see image above]==],
	Ended = [==[Fires when the <code>Sound</code> has completed playback and stopped]==],
	ImportOriginWorld = [==[Describes where the origin (in world space) was while authoring the cage mesh in an asset creation tool]==],
	ListDataStoresAsync = [==[Returns a <code>DataStoreListingPages</code> object for enumerating through all of the experience's data stores]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Tween = [==[Tweens are used to interpolate the properties of instances. The Tween object itself controls the playback of the interpolation. Creating and configuring tweens is done with the <code>TweenService:Create</code> function. This is the only way to create tweens. Instance.new cannot be used for this particular object]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Deactivated = [==[Fired when the left mouse button is released]==],
	SecondaryColor = [==[Determines the color of the of the secondary (inner) flame particle]==],
	Default = [==[Default action. Used for an undefined Actio]==],
	MouseMovement = [==[Movement of the mouse. Fires changed events each time the player's cursor position changes and when the move enters/leaves the game window]==],
	DistanceLowerLimit = [==[Determines the distance in studs that a <code>BillboardGui</code> will stop scaling larger in size a]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	DataComplexityLimit = [==[The maximum amount of data that can be stored to a <code>Player</code> cache per plac]==],
	Smoke = [==[A particle emitter with the visual aesthetic of smok]==],
	AreWorldCoordsShown = [==[An ancient property that hasn't worked correctly since late 2007.
It's supposed to render a large XYZ axis in the center of the world, but the axis rendering component doesn't work correctly]==],
	TransformedWorldCFrame = [==[Describes the combined <code>Attachment.CFrame</code> offset of the bone and the current animation offset in world space]==],
	TextBounds = [==[The pixel size of a UI element's text]==],
	FriendRequestSent = [==[At least one of two players has sent a friend request to the other player]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Active = [==[Determines if the joint is currently active in the worl]==],
	AvatarEditorService = [==[A service to support developer Avatar Editors]==],
	Selectable = [==[Determine whether the <code>GuiObject</code> can be selected by a gamepa]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	ScaleType = [==[Determines how an image will scale if displayed in a UI element whose size differs from the source image]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	CharacterJump = [==[The player jumped]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Black = [==[Returns the BrickColor Black]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	GetRealPhysicsFPS = [==[Returns the number of frames per second that physics is currently being simulated at]==],
	PreferredParent = [==[Sets the class that this class would prefer parenting to]==],
	IsGamepadButtonDown = [==[Determines whether a particular button is pressed on a particular gamepa]==],
	Region3int16 = [==[A Region3 stored as two boundaries as opposed to position and size components]==],
	HairAccessory = [==[A comma-separated list of asset IDs that will be added as <code>Accessory</code> to a <code>Humanoid</code> rig when <code>Humanoid:ApplyDescription</code>, usually those attached to its head resembling hai]==],
	Completed = [==[The tween completed successfully]==],
	CharacterBackward = [==[The player moved backward]==],
	Version = [==[The current version of the CoreGui. Everytime the CoreGui is majorly changed, this number is increased]==],
	LowerTorso = [==[Reference to a Humanoid's LowerTorso]==],
	ClickToMove = [==[The player can right click in the game world and the character will move there. Player can also control character with mouse and keyboard]==],
	Vector3int16 = [==[A Vector3 with signed 16-bit integers for components]==],
	AutoSelectGuiEnabled = [==[If the select button on a gamepad will automatically set a GUI as the selected object when the Select button is pressed. Turning this off will mean that Gui navigation will still work if GuiNavigationEnabled is enabled but you will have to set SelectedObject manually to start Gui navigation]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Decal = [==[The Decal object is an object which applies an image to a face of a <code>BasePart</code>]==],
	DidLoop = [==[Fires whenever the <code>VideoFrame.Video</code> loop]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	GetKeyAtIndex = [==[Returns a copy of a key at a given index]==],
	GetKeyframeSequenceById = [==[Returns a <code>KeyframeSequence</code> from the supplied assetId. Can optionally cache to reduce unnecessary loading freezes]==],
	Priority = [==[Determines the order the effect will be applied in relation to other effects]==],
	LimitsEnabled = [==[Sets whether the BallSocketConstraint sets a limit on rotation based on <code>BallSocketConstraint.UpperAngle</code>]==],
	BackSurface = [==[Determines the type of surface for the Back face of a part (+Z direction]==],
	Right = [==[Alignment starts at the right side of the GUI object]==],
	ImageLabel = [==[A 2D user interface element that displays a single non-interactive imag]==],
	AllGenres = [==[All gear genres are allowed]==],
	IsWindows = [==[Indicates whether the user is playing on a computer running Windows]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	GuiInputUserCFrame = [==[Describes what UserCFrame is responsible for input in VR]==],
	GamepadService = [==[The GamepadService is internally responsible for handling inputs from various controllers (such as an Xbox One controller)]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	ProximityPromptService = [==[Allows developers to interact with <code>ProximityPrompt</code> objects in a global wa]==],
	KeyframeReached = [==[Fires every time playback of an <code>AnimationTrack</code> reaches a <code>Keyframe</code> that does not have the default name - "Keyframe]==],
	WatchAdded = [==[Fired when an expression watch is added to this script debugger]==],
	Require = [==[Prints whether a condition is true along with description text]==],
	TopBottom = [==[Controls whether the feature is shifted to the top, center, or bottom on the surface]==],
	randomseed = [==[Sets x as the seed for the pseudo-random generator]==],
	Color = [==[Determines the color blended with the parent GuiObject along the length of the gradien]==],
	Top = [==[Whether the top face is included]==],
	Text = [==[Determines the string rendered by the UI element]==],
	xAxis = [==[A Vector2 with a value of 1 on the X axis]==],
	AndroidTV = [==[The client is running on an Android TV]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Team = [==[A team message only players in the same team can receive]==],
	OnTeleport = [==[Fired when the TeleportState of a player changes]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	IsLoaded = [==[Indicates when the <code>VideoFrame.Video</code> has loaded from Roblox servers and is ready to play]==],
	RenderCSGTrianglesDebug = [==[When set to true, a wireframe of polygons will be shown on all <code>PartOperation</code> objects]==],
	ViewSizeY = [==[Describes the height of the game window in pixel]==],
	Position = [==[The position the constraint should move its <code>Constraint.Attachment0</code> to when using the <code>Enum.PositionAlignmentMode</code> mode]==],
	PlayerRemoving = [==[Fires when a player is about to leave the game]==],
	Value = [==[The base value of the keypoint]==],
	CurrentPage = [==[The page that is either currently being displayed or is the target of the current animation]==],
	MaxTorque = [==[Magnitude of the maximum torque the constraint can appl]==],
	CastShadow = [==[Determines whether or not a part casts a shadow]==],
	ActiveScript = [==[Reflects the <code>LuaSourceContainer</code> currently being edited (if any]==],
	StepOver = [==[Performs a <a href="/articles/Lua-debugger" class="mw-redirect" title="Lua Debugger">step over</a> operation on the Lua Debugger]==],
	DragBegin = [==[Fired when a player begins dragging the objec]==],
	TextFits = [==[Enables when rendered text content does not fit within the UI element's space]==],
	GetEnums = [==[Returns an array of all <code>datatype.Enum</code>s]==],
	MemoryStoreService = [==[Exposes methods to access specific primitives within MemoryStore]==],
	ScaleWithParentSize = [==[Scales the element to the largest size it can fit inside the parent element’s maximum size while maintaining the aspect rati]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	MouseUp = [==[Stops the current dragging action (made by <a href="/api-reference/function/Dragger/MouseDown" class="mw-redirect" title="MouseDown">MouseDown</a>]==],
	MaxForce = [==[Determines the limit on how much force that may be applied to each axi]==],
	Visible = [==[Toggles the visibility of this Constraint]==],
	Button2Down = [==[Fires when the right mouse button is pressed]==],
	CharacterMaxSlopeAngle = [==[Determines the starting value of <code>Humanoid.MaxSlopeAngle</code> for <code>Player.Character</code]==],
	GetListener = [==[GetListener returns <code>SoundService</code>s current listener type and what is set as listener]==],
	Reverses = [==[Whether or not the tween does the reverse tween once the initial tween completes]==],
	BottomLeft = [==[Grid starts in bottom left corner]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	string = [==[Provides generic functions for string manipulation such as finding and extracting substrings and matching patterns]==],
	Classic = [==[Third-person camera which can be zoomed into first-person]==],
	zero = [==[A Vector3 with a magnitude of zero]==],
	SetCells = [==[Sets the occupancy and material of all terrain voxels in a specific region]==],
	Humanoid = [==[The Humanoid that the Lasso belongs to, and will come from]==],
	HealthDisplayType = [==[Controls when the <code>Humanoid</code> health bar is allowed to be displayed]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	GetRangeAsync = [==[Retrieves items within a sorted range of keys]==],
	TopParamB = [==[Determines the second parameter for the SurfaceType on the Top face of a part (+Y direction]==],
	Snap = [==[Holds two parts together and functions identically to <code>Weld</code]==],
	Axis = [==[The direction of the <code>Attachment</code>'s X-Axis, represented as a unit <code>Vector3</code>]==],
	DoubleSided = [==[Render both faces of polygons in the mes]==],
	Enabled = [==[Toggles the effect on and off]==],
	ForceField = [==[Applies to <code>BasePart</code> only; see <a href="/articles/force-field-material">details</a>]==],
	EasingStyle = [==[The style in which the tween executes]==],
	GetTranslator = [==[Returns a <code>Translator</code> for keys in this LocalizationTable, in the specified language]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	CharacterAppearanceId = [==[Determines the user ID of the account whose character appearance is used for a player's <code>Player.Character</code]==],
	UserCFrameChanged = [==[Fired when a UserCFrame is changed]==],
	RequestAsync = [==[Sends an HTTP request using any <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods">HTTP method</a> given a dictionary of informatio]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	RibbonTab = [==[The color of a tab on the ribbon menu (e.g. Home, Model, Test]==],
	PS3 = [==[The client is running on a PS3 (console)]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Anchored = [==[Determines whether a part is immovable by physic]==],
	SearchCatalog = [==[Returns a <code>CatalogPages</code> object containing the result of the given searc]==],
	LeftTangent = [==[The tangent to the left of this key]==],
	NoCollisions = [==[Only the part and any parts directly joined to it via joints/<code>Constraint</code> be be involved in the resolution, everything else in the workspace will be treated as though it doesn't exist]==],
	LookVector = [==[The forward-direction component of the CFrame's orientation]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	IncludeContactedMechanisms = [==[The part, any parts directly joined to it via joints/<code>Constraint</code>, and any parts which it comes into contact with during the solve will be moved during the resolution. That is, the moved parts will be allowed to "push" other unanchored parts in the workspace out of the way in order to get to the target position]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	AwardPoints = [==[Attempts to award the user with the specified <code>Player.UserId</code> the specified number of point]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	GetMouseButtonsPressed = [==[Returns an array of <code>InputObject</code> corresponding with the  mouse buttons currently being held dow]==],
	Image = [==[The asset is an image]==],
	FirstPersonTransition = [==[Fires when the local user’s <code>Camera</code> switches in and out of first person mod]==],
	GetCurrentLocalToolIcon = [==[Return the <code>BackpackItem.TextureId</code> of a <code>Tool</code> currently <code>Tool.Equipped</code> by the <code>Player</code]==],
	max = [==[Returns the maximum value among the numbers passed to the function]==],
	Time = [==[The time position of this key]==],
	Creepster = [==[<style>@import url('https://fonts.googleapis.com/css2?family=Creepster');</style>
<p class="text-nowrap" style={{fontFamily: 'Creepster', fontSize: '1.75em', margin: '5px 0px'}}>The quick brown fox jumps over the lazy dog.<br />0123456789 , : ! ? # % & ( ) - + ]==],
	AddAction = [==[Adds the given action to the men]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Shape = [==[Sets the type of shape the object has]==],
	MouseButton2Click = [==[Fired when the mouse has fully right clicked the GUI butto]==],
	Restitution = [==[How <em>elastic</em> an <code>Attachment</code> connected by a <code>RopeConstraint</code> will be when reaching the end of the rope <code>RopeConstraint.Length</code>. The value of this property is constrained between 0 and 1]==],
	lastForce = [==[Returns the last force in the object]==],
	foreachi = [==[Similar to table.foreach() except index-value pairs are passed instead of key-value pairs]==],
	Tix = [==[Use Tickets]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Stiffness = [==[Torsional stiffness of the sprin]==],
	NumberOfPlayers = [==[The number of players expected in this test, if any]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Restitution = [==[The restitution coefficient of the cone constrain]==],
	PromptHidden = [==[Triggers when the prompt becomes hidde]==],
	Orbital = [==[The camera has a fixed Y position, but can be rotated around the player]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	resume = [==[Starts or continues the execution of coroutine <code>co</code>]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	bor = [==[Returns the bitwise or of its operands]==],
	InspectPlayerFromHumanoidDescription = [==[Allows a developer to bring up the Inspect menu showing the assets listed in this <code>HumanoidDescription</code> objec]==],
	Location = [==[Determines the relative position where the <code>BodyThrust.Force</code> is exerte]==],
	OnRedo = [==[Fired when the user reverses the undo command. Waypoint describes the type action that has been redone]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	BindActionAtPriority = [==[Behaves like <code>ContextActionService:BindAction</code> but also allows a priority to be assigned to the bound action for overlapping input types (higher before lower]==],
	MinWidth = [==[The minimum pixel width of the PluginGui]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	WeightCurrent = [==[WeightCurrent is a read-only property that gives the current weight of the <code>AnimationTrack</code>. It has a default value of 1]==],
	GetConnectedGamepads = [==[Returns an array of <code>Enum.UserInputType</code> gamepads currently connecte]==],
	fromScale = [==[Returns a UDim2 with the given scale components and no offsets]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	RepeatCount = [==[The number of times the tween repeats after tweening once]==],
	FreeFalling = [==[Fires when the <code>Humanoid</code> enters or leaves the <em>Freefall</em> <code>Enum.HumanoidStateType</code]==],
	Y = [==[Whether the Y axis is enabled]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	HatAccessory = [==[A comma-separated list of asset IDs that will be added as <code>Accessory</code> to a <code>Humanoid</code> rig when <code>Humanoid:ApplyDescription</code>, usually those attached to its hea]==],
	Dismount = [==[The Dismount butto]==],
	PromptShown = [==[Triggers when the <code>ProximityPrompt</code> becomes visibl]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	TrackDataTypes = [==[When set to true, the replicator stats will sample data about packets that are being sent]==],
	pcall = [==[Runs the provided function and catches any error it throws, returning the function's success and its results]==],
	MaxTorque = [==[Determines the limit of torque that may be exerted on each world axi]==],
	ToEulerAnglesYXZ = [==[Returns approximate angles that could be used to generate the CFrame, if angles were applied in Z, X, Y order]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	RequestNavigation = [==[Requests navigation to the specified <code>DataType.CFrame</code>, using the specified <code>Enum.UserCFrame</code> as the origin for the visualizer parabola]==],
	Lerp = [==[Returns a Vector3 linearly interpolated between this Vector3 and the given goal by the given alpha]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Time = [==[The relative time at which the keypoint is positioned]==],
	DebuggerRemoved = [==[Fired when a registered <a href="/api-reference/class/ScriptDebugger" class="mw-redirect" title="ScriptDebugger">ScriptDebugger</a> has been discontinued]==],
	Offset = [==[The absolute offset component of the UDim]==],
	Coasting = [==[Skateboard is coasting (not actively speeding up / being pushed)]==],
	PrimaryPart = [==[Points to the primary part of the <code>Model</code>]==],
	MaxHealth = [==[The maximum value of a <code>Humanoid</code> <code>Humanoid.Health</code>]==],
	ClickToMove = [==[Change the movement controller to click to move]==],
	GettingUp = [==[The Humanoid is getting back on their feet after ragdolling]==],
	AddMenu = [==[Adds the given menu as a separato]==],
	Looped = [==[This sets whether or not the <code>Sound</code> repeats once it has finished when it is playing]==],
	Thickness = [==[The visualized thickness of the RopeConstraint]==],
	VerticalAlignment = [==[Determines the vertical alignment of UI elements within the parent element]==],
	InitialEnabledShouldOverrideRestore = [==[If true, will override any saved enabled state with the <code>InitialEnabled</code> value]==],
	MouseButton2Up = [==[Fired when the right mouse button has been released on a GUI Objec]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Changed = [==[.Fired whenever the Value of the IntConstrainedValue is changed]==],
	Delta = [==[A Vector3 describing the Delta between mouse/joystick movement]==],
	ReactionForceEnabled = [==[If true the constraint applies force on both Attachments to achieve the goal]==],
	GamepadInputEnabled = [==[Controls the overrides of NextSelection{Up, Down, Left, Right}. Defaults to true]==],
	FloorWire = [==[A FloorWire attempts to make a wire from two of its properties: <code>FloorWire.From</code> and <code>FloorWire.From</code>, which both need to be set to a <code>BasePart</code>]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	SimulationRadius = [==[The simulation radius of a Player's <code>Player.Character</code>]==],
	Sports = [==[The game's genre is set to Sports]==],
	LoadAssetVersion = [==[Returns a model inserted into <code>InsertService</code> containing the asset with the given assetVersionId]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	DeviceGravityChanged = [==[Fired when the force of gravity changes on a device that has an enabled accelerometer - such as a mobile devic]==],
	LocalToolUnequipped = [==[Fires when the current player unequips a <a href="/api-reference/class/Tool" class="mw-redirect" title="Tool">Tool</a>]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Coils = [==[The number of coils visualized for the constrain]==],
	Acquire = [==[Indicates the acquisition of an in game resource. For example, a player acquires virtual currency by completing a specific in game tas]==],
	FrontParamA = [==[Determines the first parameter for the SurfaceType on the Front face of a part (-Z direction]==],
	Left = [==[Whether the left face is included]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	MouseDrag = [==[Fired when the mouse moves while the MouseButton1Down event has fired, but the left mouse button has not been released yet]==],
	Active = [==[Indicates if the constraint is currently active in the worl]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Interpolate = [==[Tweens the <code>Camera</code> in a linear fashion towards a new <code>Camera.CFrame</code> and <code>Camera.Focus</code> over a given duratio]==],
	TypeKey = [==[Simulates the user typing a key]==],
	GetCollisionGroupName = [==[Returns the name of the group with the corresponding id]==],
	Back = [==[Tween movement backs into or out of place (See animation)]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	GetLogHistory = [==[Returns a table of tables, each of which corresponds to something which has been displayed in the outpu]==],
	DepthScale = [==[Determines by what factor the depth (back-to-front distance) of a Humanoid rig is scaled; when <code>Humanoid:ApplyDescription</code>, maps to the "DepthScale" <code>NumberValue</code> within the Humanoi]==],
	InProgress = [==[The teleport is currently in progress. The player usually disconnects and teleports to the destination after this]==],
	AddAsync = [==[Adds an item to the queue]==],
	Marble = [==[Applies to <code>BasePart</code> only]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Shirt = [==[Determines the <code>Shirt.ShirtTemplate</code> used by a <code>Shirt</code> when <code>Humanoid:ApplyDescription</code]==],
	Right = [==[Right hand touchpad]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	EquippedEmotesChanged = [==[Fires when the equipped emotes are <code>HumanoidDescription:SetEquippedEmotes</code> on this descriptio]==],
	RespectFilteringEnabled = [==[Sets whether <code>Sound</code> playback from a client will replicate to the server]==],
	TargetPoint = [==[Describes the 3D position where the <code>Player</code> controlling the <code>Humanoid</code> last clicked in the world while using a <code>Tool</code]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Unknown = [==[Unknown R15 Humanoid body part]==],
	AnchorPoint = [==[Determines the origin point of a <code>GuiObject</code>, relative to its absolute siz]==],
	ColumnMajor = [==[The direct siblings are considered columns]==],
	Wedge = [==[The mesh is a wedge]==],
	Dot = [==[Returns a scalar dot product of the two vectors]==],
	MeshId = [==[Used to load a mesh file, and apply it to the given BodyPart]==],
	SetEmotes = [==[Sets all of the emotes on this descriptio]==],
	GetInventory = [==[Returns an <code>InventoryPages</code> object with information about owned items in the users inventory with the given AvatarAssetType]==],
	SetLegacyMaxItems = [==[Controls the behavior of <code>Debris.MaxItems</code]==],
	GameNotFound = [==[The game that this player attempted to teleport to could not be found]==],
	PromptForExistingAssetId = [==[Opens a window in Roblox Studio, which prompts the user to select an asset based on the <i>assetType</i> specified. Returns what assetId was selected, or -1 if the window was closed]==],
	FailStartNotEmpty = [==[Failed to compute path; the starting point is not empty]==],
	bit32 = [==[A library of functions to perform bitwise operations]==],
	IsBestFriendsWith = [==[Returns whether a player is friends with the specified use]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	NoCollisionConstraint = [==[An instance used to prevent collisions between two specific part]==],
	Physics = [==[The Humanoid doesn't apply any force on its own. (Unending PlatformStand) <em>Has to be unset manually using <code>Humanoid.ChangeState</code>.</em]==],
	OnClientInvoke = [==[Called when the client is invoked by <code>RemoteFunction:InvokeClient</code>]==],
	GetEnemiesAsync = [==[Returns a <code>StandardPages</code> object including information on all of the specified group's enemies]==],
	Asset = [==[Asset format type - the product is an asset]==],
	HipHeight = [==[Determines the distance off the ground the <code>Humanoid.RootPart</code> should be]==],
	AllowedGames = [==[Item is purchasable in the Avatar Shop and experiences owned by the item creator]==],
	StarterGui = [==[A container for <code>LayerCollector</code> to be copied into the <code>PlayerGui</code> of <code>Player</code>. Also provides a range of functions for interacting with the <code>CoreGui</code]==],
	fromHSV = [==[Returns a Color3 from the given hue, saturation, and value components]==],
	SetRoll = [==[Sets the current rotation applied around the <code>Camera</code> Z-axi]==],
	GetRotationAtTime = [==[Samples the <code>EulerRotationCurve</code> at a given time and returns the corresponding rotation. Empty Euler angles channels are interpreted as zero]==],
	Face = [==[Sets the side of the parent that the SpotLight comes from]==],
	ReflectionMetadataYieldFunctions = [==[Acts as a <code>Folder</code> containing information about yielding functions for a <code>ReflectionMetadataClass</code>, and should be parented to it.
<code>ReflectionMetadataMember</code>s that are parented to this object will be perceived as yielding functions under the class this is parented to]==],
	StudioLocaleId = [==[The locale currently in-use by Studio, e.g. <code>en_US</code>]==],
	ReadAsync = [==[Reads one or more items from the queue]==],
	CanSendGameInviteAsync = [==[Indicates whether the given <code>Player</code> can invite other player]==],
	LightInfluence = [==[Controls how much the BillboardGui is influenced by the lighting in the game world]==],
	CreatedTime = [==[Indicates when the version was created in milliseconds since epoch]==],
	version = [==[Returns the current version of Roblox as a string, which includes the generation, version, patch and commit]==],
	Size = [==[Sets the size of the BillboardGui as it'll appear in the Roblox "world"]==],
	Speed = [==[The Speed of an <code>AnimationTrack</code> is a read only property that gives the current playback speed of the <code>AnimationTrack</code>. This has a default value of 1. When speed is equal to 1, the amount of time an animation takes to complete is equal to <code>AnimationTrack.Length</code> (in seconds)]==],
	Center = [==[Center of the grid]==],
	Large = [==[Large motor]==],
	CaptureController = [==[Attempts to gain priority over the hardware controller's input, in favor of the VirtualUser's simulated input]==],
	GetLatestAssetVersionAsync = [==[Returns the latest AssetVersionId of an asset for assets created by the place creator.
Can be used in combination with <a href="/api-reference/function/InsertService/LoadAssetVersion" class="mw-redirect" title="LoadAssetVersion">LoadAssetVersion</a> to load the latest version of a model, even if it gets updated while the game is running.]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	TeleportInitFailed = [==[Fires when a teleport fails to start, leaving the player in their current server]==],
	GetUserIds = [==[An array of <code>Player.UserId</code> tagged with a key]==],
	Deactivate = [==[Deactivates the plugi]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	NoAccess = [==[The current user or group roleset doesn't have access]==],
	Connected = [==[The client is connected]==],
	ClusterPacketCache = [==[An internal service meant to cache cluster packets]==],
	Vector2int16 = [==[A Vector2 with signed 16-bit integers for components]==],
	AttachmentForward = [==[Sets the offset position of the object on the Player]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	FireCustomEvent = [==[Fires a custom event with a custom event name and dat]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	CharacterMesh = [==[Modifies the appearance of an R6 body par]==],
	RightLipCornerDown = [==[Lowers the corners of the mouth downwards in a frow]==],
	ParkingLot = [==[Sound reverb is changed to sound like the player is in a parking lot]==],
	NoCraters = [==[Explosion does not generate craters]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Custom = [==[Default mode used by Roblox Core Scripts]==],
	TextLabel = [==[A 2D user interface element that displays non-interactive tex]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	CameraMode = [==[Changes the camera's mode to either first or third person]==],
	GuiButton = [==[An abstract class for interactive 2D user interface element]==],
	TileSize = [==[Sets the tiling size of the ImageLabel]==],
	SetOutgoingKBPSLimit = [==[Sets the maximum outgoing bandwidth that Roblox can use]==],
	End = [==[When an <code>InputObject</code> finishes interacting with the game. For example, a mouse button up, or a key up, or when a touch stops touching the screen]==],
	Attachment0 = [==[The <code>Attachment</code> the <code>Beam</code> originates from]==],
	MouseButton1Click = [==[Fired when the mouse has fully left clicked the GUI butto]==],
	Target = [==[The object in 3D space the <code>Mouse</code> is pointing t]==],
	None = [==[Unusable placeholder in case an unknown state gets triggered internally]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	IsDescendantOf = [==[Returns true if an <code>Instance</code> is a descendant of the given ancestor]==],
	Equipped = [==[Fired when the tool is equippe]==],
	ZIndexBehavior = [==[Changes how ZIndex behaves on all descendants of the LayerCollector]==],
	TouchEnded = [==[Fired when a part stops touching another part]==],
	force = [==[Determines the amount of force applied on each axi]==],
	EyesLookLeft = [==[Moves gaze lef]==],
	GuiService = [==[The GuiService is a service which currently allows developers to control what <code>GuiObject</code> is currently being selected by the gamepad navigator. It also allows clients to check if Roblox's main menu is currently open. 
This service has a lot of hidden members, which are mainly used internally by Roblox's <code>CoreScript</code>]==],
	SetChatStyle = [==[Sets whether BubbleChat and ClassicChat are being used, and tells TeamChat and <code>Chat</code> what to do]==],
	SetUiMessage = [==[Sets the GuiService's Ui message]==],
	SciFi = [==[<img src="/assets/blt0f0196778d82c711/Font-Face-Sample-SciFi.png" class="img-fluid half-sized" /]==],
	new = [==[Returns a new pseudorandom generator using the given seed]==],
	UnbindButton = [==[Removes the bind on button]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	GetSortedAsync = [==[Returns a <code>DataStorePages</code> object]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	StudioModeChanged = [==[Fired when the user's client switches between studio mode and in-game mode.
This gets fired periodically in Roblox Studio when a session starts.]==],
	Message = [==[Fills the entire screen with a semi-transparent grey background, with centered text in the middle of the screen. With the introduction of Roblox's GUI features it has been deprecated and <code>TextLabel</code>s should be used instead for new work]==],
	Max = [==[The coordinates of the bottom-right corner]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	IsSmooth = [==[The state of this property shows whether or not this <code>TerrainRegion</code> contains <em>smooth terrain</em>]==],
	Thumbpad = [==[Change the movement controller to the thumbpad]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	SizeRelativeOffset = [==[The positional offset of the adornment based on the adornee’s  <code>BasePart.Size</code>]==],
	Scale = [==[The Scale of a mesh determines the size of the mesh relative to its original dimensions]==],
	PromptSetFavoriteCompleted = [==[Prompts the <code>LocalPlayer</code> to favorite or unfavorite the given asset or bundl]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	BundleType = [==[An array containing <code>enum.BundleType</code> values to filter the search by]==],
	Part0 = [==[The second <code>BasePart</code> that the constraint connect]==],
	ImageRectOffset = [==[The offset in pixels of the sub-area of an image to be displaye]==],
	Min = [==[The lower bound of the Region3int16]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Ray = [==[A line with a starting point that casts infinitely in a specific direction]==],
	UDim2 = [==[A two-dimensional value where each dimension is composed of a relative scale and an absolute offset]==],
	Chatted = [==[Fires when <code>Chat:Chat</code> is called]==],
	SecondaryAxis = [==[The direction of the goal's Y-Axis, represented as a unit <code>Vector3</code>]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	LinearResponsiveness = [==[Specifies the sharpness of the linear servo motor in reaching the <code>SlidingBallConstraint.TargetPosition</code>]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Group = [==[The place is owned by a grou]==],
	GoodbyeChoiceActive = [==[Toggles whether the goodbye option will be displayed]==],
	MasterVolume = [==[A <a href="/articles/Numbers" class="mw-redirect" title="Float">float</a> between 0 and 1 representing the volume of the game's client]==],
	RenderingTest = [==[An internal testing utility for the rendering pipelin]==],
	PromptSaveAvatar = [==[Prompts the <code>Players.LocalPlayer</code> to update their avatar based on the given <code>HumanoidDescription</code> and <code>Enum.RigType</code> of R6 or R1]==],
	LeftParamB = [==[Determines the second parameter for the SurfaceType on the Left face of a part (-Z direction]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	MaterialColors = [==[MaterialColors represents the editor for the Material Color feature, and <strong>cannot be edited by scripts</strong>.
To get the color of a material, use: <code>Terrain:GetMaterialColor</code>
To set the color of a material, use: <code>Terrain:SetMaterialColor</code]==],
	None = [==[No surface constraint]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	LoadBoolean = [==[Returns a boolean value that was previously saved to the player with <code>Player:SaveBoolean</code> with the same ke]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	TextTruncate = [==[Controls the truncation of the text displayed in this TextButton]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	CoreGui = [==[The CoreGui is a service used to store Guis created in-game by Roblox for the core user interface found in every game (such as the game menu, the playerlist, the backpack, etc.). It can also be used by <code>Plugin</code> in Roblox Studio]==],
	StreamingTargetRadius = [==[Maximum distance that content will be streamed to player]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	EyesLookUp = [==[Moves gaze u]==],
	Color3 = [==[Determines the colorization to be applied to the <code>Clothing</code> textur]==],
	OverrideCoreScriptsDir = [==[The directory used when overriding core scripts.
This should point to a clone of <a rel="nofollow" class="external text" href="https://github.com/ROBLOX/Core-Scripts">Roblox's CoreScript GitHub repository</a>]==],
	Y = [==[The y-coordinate of the position]==],
	toHSV = [==[Returns the hue, saturation, and value of the Color3]==],
	TextStrokeTransparency = [==[Determines the transparency of the text stroke (outline)]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Focus = [==[The client regaining focus of the Roblox window]==],
	AngularLimitsEnabled = [==[Enables the angular limits around the rotation axis]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	IsBackend = [==[Vague value for showing if this depends on backend stuff]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	WaitForDataReady = [==[Used to pause the script until the player's data is available to manipulate, or until a certain amount of time has elapsed without fetching the player's dat]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	GuiObject = [==[An abstract class for all 2D user interface object]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Direct3D11 = [==[Direct3D Version 11 (Microsoft]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Stepped = [==[Fires every <em>frame</em> prior to the physics simulatio]==],
	GetCurrentPlayers = [==[Returns a list of players currently using the Dialog]==],
	ReachedTarget = [==[Fired when the Parent of the BodyPosition reaches the desired <code>BodyPosition.Position</code> (within .1 studs). Once this event fires it will not fire again until <code>BodyPosition.Position</code> is updated]==],
	ImageButton = [==[A 2D user interface element that displays an interactive imag]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	GetAsync = [==[Returns the value of a key in a specified data store and a <code>DataStoreKeyInfo</code> instance]==],
	SetEquippedEmotes = [==[Sets the currently equipped emotes given an array of emote name]==],
	PasteRegion = [==[Applies a chunk of terrain to the Terrain object. Note: <code>TerrainRegion</code> data does not replicate between server and client]==],
	Titlebar = [==[The color of windows' title bar]==],
	PromptThirdPartyPurchase = [==[Prompts a third-party purchase]==],
	LightColor = [==[The color of the emitted ligh]==],
	AutowedgeCells = [==[<em>(OBSOLETE)</em> No longer does anything]==],
	Size = [==[Determines the dimensions of a part (length, width, height]==],
	CollisionGroupSetCollidable = [==[Sets the collision status between two groups]==],
	CurrentDistance = [==[The current distance in studs that the <code>BillboardGui</code> is from the player's camer]==],
	Fail = [==[Indicates the progression faile]==],
	CreateButton = [==[Creates <code>PluginToolbarButton</code> that allows the user to initiate a single, one-off action in Roblox Studio through the <code>PluginToolbarButton.Click</code> even]==],
	exp = [==[Returns the value e^x]==],
	FontSize = [==[Determines the font size of a <code>TextBox</code> objec]==],
	GetObjects = [==[Returns an array of <code>Instance</code> associated with the given <code>Articles.Content</code> UR]==],
	WaterWaveSize = [==[Sets the maximum height of the Terrain water waves in studs]==],
	FormatByKey = [==[Returns the localized text string in a <code>LocalizationTable</code> based on its <code>Translator</code> locale, by key]==],
	Value = [==[The stored Ray]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	UpperAngle = [==[The maximum rotation angle the HingeConstraint will allow if <code>HingeConstraint.LimitsEnabled</code> is true]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	RaycastParams = [==[A container for parameters used in raycasting functions]==],
	CFrame = [==[Determines the position and rotation of a part in the worl]==],
	find = [==[Looks for the first match of pattern in the string s and returns the indices of s where the occurrence starts and ends]==],
	MaxDistance = [==[The maximum distance, in studs, a client's listener can be from the <code>Sound</code> origin and still hear it. Only applies to Sounds parented to a <code>Part</code> or <code>Attachment</code> (3D sounds]==],
	UpdateAsync = [==[Retrieves the value of a key from a sorted map and updates it with a new value]==],
	PointerAction = [==[Fires when the user performs a specific pointer action (wheel, pinch, pan)]==],
	SetInspectMenuEnabled = [==[Allows developers to enable or disable default Inspect and Buy functionalit]==],
	running = [==[Returns the running coroutine]==],
	Color = [==[Determines the color of a part]==],
	MinHeight = [==[The minimum pixel height of the PluginGui]==],
	PrintStreamInstanceQuota = [==[When set to true, debug information is printed to the output regarding the replication of instances when <code>Workspace.StreamingEnabled</code> is set to true]==],
	frexp = [==[Returns m and e such that x = m*2^e]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Gamepad2 = [==[Input from the 2nd plugged in Gamepad]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	LimitsEnabled = [==[Sets whether the SlidingBallConstraint will limit the range of translation]==],
	Follow = [==[Camera moves with the subject and rotates to keep the subject in the center]==],
	HealthChanged = [==[Fires when the <code>Humanoid.Health</code> change]==],
	UserStorageService = [==[asd]==],
	Stop = [==[Stops the <code>AnimationTrack</code>. Once called playback of the <code>AnimationTrack</code> will stop and the weight of the animation will move towards zero over a length of time specified by the optional fadeTime parameter]==],
	Color = [==[Determines the color of all particles emit over their individual lifetime]==],
	RichText = [==[Determines whether the TextBox renders the <code>TextBox.Text</code> string using rich text formatting]==],
	LeftEyeUpperLidRaiser = [==[Raises the left eyelid upwards to reveal more of the eye white above the iri]==],
	ServerCollectResult = [==[Fired when the server should collect a test result]==],
	Paused = [==[The tween is paused in the middle of playing]==],
	CanQuery = [==[Determines whether the part is considered during spatial query operation]==],
	Part1 = [==[The second <code>BasePart</code> that the joint connects]==],
	Sparkles = [==[A particle emitter with the visual aesthetic of sparkle]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	ClassCategory = [==[Describes the category of this class]==],
	Constant = [==[Rotate at a constant velocity of <code>BasePart</code> ParamB]==],
	HairAccessory = [==[The asset is a hair accessory]==],
	OrientationAlignmentMode = [==[The OrientationAlignmentMode Enum is used to select the number of <code>Attachment</code>s used in an alignment]==],
	GameEnded = [==[The game that this player attempted to teleport to has ended]==],
	AlignOrientation = [==[A constraint that applies a torque to make its attachments alig]==],
	AutoJumpEnabled = [==[Sets whether the character will automatically jump when hitting an obstacle on a mobile device]==],
	TouchPinch = [==[Fired when a user pinches their fingers on a <code>UserInputService.TouchEnabled</code> device - such as the screen of a mobile devic]==],
	AtEnd = [==[Text is truncated at the end of the text]==],
	GameSettingsTableItem = [==[The color of items within tables in the game settings windo]==],
	LimitsEnabled = [==[Determines whether the angular motion of attachments’ primary axes is limite]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	DateTime = [==[A datatype that represents a moment in time]==],
	CreatedTime = [==[Indicates when the data store was created in milliseconds since epoch]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Y = [==[The Y dimension of the UDim2]==],
	X = [==[The x-coordinate of the Vector2]==],
	Teleport = [==[Teleports a <code>Player</code> to the place associated with the given <em>placeId</em]==],
	PaddingLeft = [==[The padding to apply on the left side relative to the parent's normal size]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Threshold = [==[Volume level at which point the compressor applies its effect]==],
	ThirdPartyUserService = [==[An internal service that is used to handle third-party related users]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	BodyVelocity = [==[Applies a force to maintain a constant velocit]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	SkyboxRt = [==[The URL link to a picture for the right surface of the sky]==],
	InputHoldEnd = [==[Fires a signal indicating that the user ended pressing the prompt GUI butto]==],
	Reflectance = [==[Determines how much a part reflects the skybox]==],
	new = [==[Returns a Color3 with the given red, green, and blue values]==],
	SurfaceAppearance = [==[An object that allows developers to override the appearance of a MeshPart with advanced graphics option]==],
	GetStatuses = [==[Returns a table of the Humanoid's statuses, and custom statuses]==],
	Animation = [==[The asset is an animation; also see the more specific animation type enums below]==],
	GetMass = [==[Returns the value of the <code>BasePart.Mass</code> property]==],
	Activated = [==[Fires when the button is activate]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	ImageColor3 = [==[Determines how a rendered image will be colorized]==],
	FindPartsInRegion3 = [==[Returns an array of <code>BasePart</code>s in the given <code>DataType.Region3</code>]==],
	Enabled = [==[Toggles whether a trail will be drawn or not]==],
	Glass = [==[Applies to <code>BasePart</code> only]==],
	MotorMaxAcceleration = [==[The maximum angular acceleration a HingeConstraint with <code>HingeConstraint.ActuatorType</code> set to <code>Enum.ActuatorType</code> can apply to achieve its <code>HingeConstraint.AngularVelocity</code>. Measured in radians/(second squared)]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	GetRelativeMousePosition = [==[Returns the position of the mouse relative to the PluginGu]==],
	ReserveServer = [==[Returns an access code that can be used to teleport players to a reserved server, along with the <code>DataModel.PrivateServerId</code> for i]==],
	Origin = [==[The position of the origin]==],
	GetLastForce = [==[Returns the last force in the object]==],
	FuzzyEq = [==[Returns true if the provided Vector3 falls within the given distance from the Vector3]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Orientation = [==[Describes the position of the part in the worl]==],
	VelocityInheritance = [==[Determines how much of the parent's velocity is inherited by particles when emitte]==],
	RaycastParams = [==[A container for parameters used in raycasting functions]==],
	Magnitude = [==[The length of the Vector3]==],
	UseJumpPower = [==[Determines whether the <code>StarterPlayer.CharacterJumpHeight</code> (false) or <code>StarterPlayer.CharacterJumpPower</code> (true) property is use]==],
	NeckAccessory = [==[A comma-separated list of asset IDs that will be added as <code>Accessory</code> to a <code>Humanoid</code> rig when <code>Humanoid:ApplyDescription</code>, usually those attached to its neck (such as scarves or necklaces]==],
	UserChoice = [==[The camera will move based on the player's settings]==],
	MouseButton1Down = [==[Fired when the left mouse button goes down on one of the GUI handles]==],
	SetKeyUp = [==[Simulates the user releasing a key]==],
	RigidityEnabled = [==[If true, the solver reacts as quickly as possible to complete the alignment. If false, the torque is dependent on <code>AlignPosition.MaxForce</code>, <code>AlignPosition.MaxVelocity</code>, and <code>AlignPosition.Responsiveness</code>]==],
	Stiffness = [==[Defines how much the body mesh can be compressed by clothing]==],
	Orbital = [==[The camera has a fixed Y position, but can be rotated around the player]==],
	LivingRoom = [==[Sound reverb is changed to sound like the player is in a living room]==],
	AnimationId = [==[This property is the content ID of the animation an <code>Animation</code> object is referencing. Once an animation has been created and uploaded to Roblox the content ID can be found in the uploaded animation’s URL]==],
	lookAt = [==[Returns a CFrame with the position of the first Vector3 and an orientation pointed toward the second]==],
	SetMetadata = [==[Sets custom metadata to be associated with the key]==],
	Default = [==[Default status. Used for an undefined statu]==],
	AutoJumpEnabled = [==[Sets whether the character will automatically jump when they hit an obstacle as a player on a mobile device]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	AngularVelocity = [==[The angular velocity a HingeConstraint with <code>HingeConstraint.ActuatorType</code> set to <code>Enum.ActuatorType</code> will attempt to achieve. Measured in radians/second]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Force = [==[Determines the amount of force exerted on each axis relative to the par]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Mass = [==[Describes the mass of the part, the product of its density and volum]==],
	Controller = [==[The SkateboardPlatform's active SkateboardController]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	BackParamB = [==[Determines the second parameter for the SurfaceType on the Back face of a part (+Z direction]==],
	EnemyOcclusion = [==[Occlude (hide) all enemy humanoid names]==],
	Click = [==[Fires when the user presses and releases their cursor on the butto]==],
	Classic = [==[Camera tracks the player but will not automatically rotate if the player walks left or right]==],
	RenderFidelity = [==[Determines the level of detail that <span class="text-nowrap">solid-modeled</span> and mesh parts will be shown i]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	RightUpperArm = [==[Reference to a Humanoid's RightUpperArm]==],
	Triggered = [==[Fires when the action is triggered. This can be done by either activating the action from the Quick Access Toolbar, or by using the keyboard shortcut that was bound to it]==],
	Instance = [==[The read-only Instance property of a <code>Tween</code> points to the <code>Instance</code> whose properties are being interpolated by the tween]==],
	Min = [==[The coordinates of the top-left corner]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	StrafingNoPhysics = [==[<em>Doesn't seem to be used. Cannot be set with <code>Humanoid.ChangeState</code>.</em]==],
	GetStateEnabled = [==[Returns whether a <code>Enum.HumanoidStateType</code> is enabled for the <code>Humanoid</code]==],
	Animated = [==[Whether or not to animate transitions between pages]==],
	Classic = [==[Camera tracks the player but will not automatically rotate if the player walks left or right]==],
	Package = [==[The asset is a pack, for example an animation package]==],
	Left = [==[The widget will appear docked to the left of the game scree]==],
	Default = [==[Default mode used by Roblox Core Scripts]==],
	PromptAllowInventoryReadAccessCompleted = [==[Fires when the <code>AvatarEditorService:PromptAllowInventoryReadAccess</code> prompt is responded to by the use]==],
	UserInputType = [==[Describes the kind of input being performed (mouse, keyboard, gamepad, touch, etc]==],
	MinLength = [==[The minimum separation the SpringConstraint will allow if <code>SpringConstraint.LimitsEnabled</code> is true]==],
	AncestryChanged = [==[Fires when the <code>Instance.Parent</code> property of the object or one of its ancestors is changed]==],
	Motor = [==[Makes a movable <code>JointInstance</code> between two part]==],
	Level = [==[The intensity of the effect]==],
	Chat = [==[Makes the local player chat the given messag]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	TeamColor = [==[Determines the Team with which a Player is associated]==],
	WorldRotationAxis = [==[The unit vector direction of the rotation axis in world coordinates]==],
	Invisicam = [==[Any objects between the camera and player will become translucent locally]==],
	MaxForce = [==[Maximum magnitude of the force vector the constraint can apply]==],
	RightInnerBrowRaiser = [==[Raises the interior half of the right brow upward]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	CatalogSearchParams = [==[A container for parameters used in catalog searches]==],
	Gui = [==[Gui element data and rendering]==],
	Level21 = [==[Graphic quality level 21 - the highest quality level]==],
	BackSurfaceInput = [==[Determines the kind of input for the Back face of a part (+Z direction]==],
	ReflectionMetadataClasses = [==[An internal object which cannot be used by developers]==],
	InsertKey = [==[Adds the key passed as argument to this curve]==],
	ZOffset = [==[Offsets the SurfaceGui relative to the normal of the surface it is attached to]==],
	RobotoMono = [==[<style>@import url('https://fonts.googleapis.com/css2?family=Roboto+Mono');</style>
<p class="text-nowrap" style={{fontFamily: 'Roboto Mono', fontSize: '1.45em', margin: '5px 0px'}}>The quick brown fox jumps over the lazy dog.<br />0123456789 , : ! ? # % & ( ) - + ]==],
	DataSendKbps = [==[In a networked game, this describes roughly how many kilobytes of data are being sent by the current instance, per second]==],
	TouchTap = [==[Fired when a user taps their finger on a <code>UserInputService.TouchEnabled</code> device - such as the screen of a mobile devic]==],
	RenderStepped = [==[Fires every <em>frame</em> prior to the frame being rendere]==],
	TouchPinch = [==[Fires when the player performs a pinch or pull gesture using two fingers on the UI elemen]==],
	ImageRectSize = [==[Determines the size in pixels of the sub-area of an image to be displayed]==],
	GetKeyframeSequence = [==[Returns a <code>KeyframeSequence</code> from a given asset URL]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	GripUp = [==[One of the properties that specifies a Tool's orientation in a character's hand. This represents the R01, R11, and R21 values of the Grip CFrame's rotation matri]==],
	Position = [==[The position of the intersection between the ray and the part]==],
	AddItem = [==[The AddItem method allows the developer to schedule the removal of the object without yielding any code]==],
	CursorPosition = [==[Determines the offset of the text cursor in bytes, or -1 if there is no cursor]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Run = [==[Runs the game’s simulation, running physics and script]==],
	Visible = [==[Toggles the visibility of the Attachment in-game]==],
	GetValueAtTime = [==[Samples the 3 FloatCurves (X, Y, Z) at the time passed as argument. Returns the 3 samples as a tuple of 3 numbers. If a channel curve is missing or no key is found in the curve the channel is evaluated as nil]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	RequiresLineOfSight = [==[Whether the prompt is hidden if the path between the player’s <code>Camera</code> and object parented to the <code>ProximityPrompt</code> is obstructe]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	RobloxVersion = [==[The current client version of Roblox. Can also be retrieved by using the version() function]==],
	Strafing = [==[Fires when the <code>Humanoid</code> enters or leaves the <em>StrafingNoPhysics</em> <code>Enum.HumanoidStateType</code]==],
	Reset = [==[Erases the saved state of the UserSettings, and restores its default values]==],
	Left = [==[Left hand touchpad]==],
	PluginDragMoved = [==[Fires when the user's mouse moves within a PluginGui during a drag operation started by <code>Plugin:StartDrag</code]==],
	Raycast = [==[Casts a ray using an origin, direction, and optional <code>datatype.RaycastParams</code>, then returns a <code>datatype.RaycastResult</code> if an eligible object or terrain intersects the ray]==],
	DisplayName = [==[The DisplayName of the UserId associated with the Playe]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	LoadInstance = [==[Returns an instance that was previously saved to the player with <code>Player:SaveInstance</code> with the same ke]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	MaxActivationDistance = [==[Maximum distance between a character and the ClickDetector for the character to be able to click i]==],
	Theme = [==[Used to get/set current <code>StudioTheme</code> used by Studi]==],
	UDim2 = [==[A two-dimensional value where each dimension is composed of a relative scale and an absolute offset]==],
	X = [==[The X dimension of the UDim2]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	MaxAngle = [==[The max angle, in degrees, of the constraint’s limiting con]==],
	IntValue = [==[A container object for a single integer]==],
	Random = [==[A provider of pseudorandom numbers]==],
	Bottom = [==[Whether the bottom face is included]==],
	Line = [==[The line that the breakpoint has been placed on]==],
	DataStoreInfo = [==[Object describing data store information]==],
	White = [==[Returns the BrickColor White]==],
	PlayOnRemove = [==[When true, the <code>Sound</code> will play when it is removed from the game, by parenting the <code>Sound</code> or one if its ancestors to nil]==],
	ClosestNoPath = [==[Path doesn't exist, returns path to closest point]==],
	FillBlock = [==[Fills a block of smooth terrain with a given location, rotation, size, and materia]==],
	SphereHandleAdornment = [==[The SphereHandleAdornment is a sphere that can be adorned to a BasePart]==],
	HorizontalAlignment = [==[Determines the horizontal alignment of UI elements within the parent element]==],
	GetAxis = [==[Returns the value of the Attachment's <code>Attachment.Axis</code]==],
	Bubble = [==[Displays chats in a bubble above the sender's head]==],
	CharacterAppearance = [==[The URL of the asset containing the character's appearance, clothing, and gea]==],
	delay = [==[Schedules a function to be called on the next Heartbeat after the given duration (in seconds) has passed, with throttling]==],
	TargetAngle = [==[The target angle a HingeConstraint will attempt to rotate to if its <code>HingeConstraint.ActuatorType</code> is set to <code>Enum.ActuatorType</code>. Measured in degrees]==],
	NextInteger = [==[Returns a pseudorandom integer uniformly distributed over [min, max]]==],
	PlayEmote = [==[Plays emotes and returns if was successfully ran]==],
	GetGameplayPausedNotificationEnabled = [==[Returns whether or not the <code>Player.GameplayPaused</code> notification has been disabled by the develope]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Value = [==[Used to hold a integer value between <code>IntConstrainedValue.MinValue</code> and <code>IntConstrainedValue.MaxValue</code>]==],
	Chatted = [==[Fires when a player chats in-game using Roblox's provided chat bar]==],
	new = [==[Creates a blank OverlapParams object]==],
	AddCustomStatus = [==[Adds a custom status to the Humanoid]==],
	SmoothPlastic = [==[Applies to <code>BasePart</code> only]==],
	Part = [==[Sets the target of the lasso object]==],
	ManualWeld = [==[Holds two parts together and functions identically to <code>Weld</code]==],
	SetNetworkOwnershipAuto = [==[Lets the game engine dynamically decide who will handle the part's physics (one of the clients or the server)]==],
	Rejected = [==[Text rejected by filter]==],
	printidentity = [==[Prints "Current identity is X", where X corresponds to the current thread's security context level]==],
	PointLight = [==[A light source that emits illumination from a single point]==],
	new = [==[Returns a new DockWidgetPuginGuiInfo object]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	TextInput = [==[Input of Text into a text-based <code>GuiObject</code>. Normally this is only a <code>TextBox</code>]==],
	SetGlobal = [==[Sets the value of the variable <i>name</i> as <i>value</i> in the script's main stack]==],
	Shadows = [==[If set to true, will project shadows if light is blocked by an obstacle]==],
	SelectRibbonTool = [==[Activates the specified Roblox Studio tool]==],
	ShowVideoAd = [==[Historically used to show mobile video advert]==],
	GraphicsTexture = [==[Rendering of textures in the game world]==],
	GetAnglesAtTime = [==[Samples the 3 <code>FloatCurves</code> (X, Y, Z) at the time passed as argument. Returns the result as 3 Euler angles. If a channel curve is missing or no key is found in the curve the channel is evaluated as nil]==],
	upper = [==[Returns a copy of a string with all lowercase letters changed to uppercase]==],
	ReflectionMetadataClass = [==[Registers information about a class, and its members.
Should be parented to <code>ReflectionMetadataClasses</code]==],
	ScrollBar = [==[The color of scrollbar handles, like those seen in the Explorer windo]==],
	BackParamA = [==[Determines the first parameter for the SurfaceType on the Back face of a part (+Z direction]==],
	Loaded = [==[Fires when the <code>VideoFrame.Video</code> is loade]==],
	LoadCharacter = [==[Creates a new character for the player, removing the old one. Also clears the player's <code>Backpack</code> and <code>PlayerGui</code]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Status = [==[An unfinished object which offers no functionality to developers]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Y = [==[Returns the <code>FloatCurve</code> controlling the Y channel. It is the first child instance of type <code>FloatCurve</code> named 'Y'. If none is found an empty <code>FloatCurve</code> is created]==],
	OnUpdate = [==[Refers to <code>GlobalDataStore.OnUpdate</code>]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	RightLegColor = [==[Sets the color of this limb, as a <a href="/api-reference/datatype/BrickColor" class="mw-redirect" title="API:BrickColor"><span>BrickColor</span></a>]==],
	TakeDamage = [==[Lowers the <code>Humanoid.Health</code> of the <code>Humanoid</code> by the given <em>amount</em> if it is not protected by a <code>ForceField</code]==],
	MaxExtents = [==[Displays the boundaries of the largest possible editable region]==],
	FloatingXSize = [==[The initial pixel width of the PluginGui when floating]==],
	GetCell = [==[Returns the closest CellMaterial from the legacy terrain engine that matches the smooth terrain voxel specified]==],
	NoSupports = [==[Truss beams do not contain supports]==],
	yAxis = [==[A Vector2 with a value of 1 on the Y axis]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	TeleportPartyAsync = [==[Teleports a group of <code>Player</code> to the same server of the place with the given <code>DataModel.PlaceId</code>, returning the <code>DataModel.JobId</code> of the server instance they were teleported t]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	P = [==[Determines how aggressive of a force is applied in reaching the goal positio]==],
	MenuIsOpen = [==[Returns true if any menu of CoreGui is ope]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	ShowDecompositionGeometry = [==[When set to true, the underlying collision geometry for <code>PartOperation</code> and <code>MeshPart</code> is rendered]==],
	fromHex = [==[Returns a Color3 from the given hex value]==],
	Center = [==[The object is centered on the center of it's parent (x-axis), expanding equally to the left and right of the parent's center]==],
	CFrame = [==[The goal orientation of the <code>AlignOrientation</code> (the translation component is ignored)]==],
	BodyForce = [==[Applies a constant force to an objec]==],
	Changed = [==[Fired immediately after a property of an object changes]==],
	Constraint = [==[The base class for Constraint-based objects]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	WildWest = [==[The game's genre is set to Wild Wes]==],
	GetOrderedDataStore = [==[Get an <code>OrderedDataStore</code> given a name and optional scop]==],
	IsMotorSupported = [==[Returns true if the specified motor is available to be used with the specified <code>Enum.UserInputType</code]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	P = [==[Determines how aggressive of a force is applied in reaching the goal velocit]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	DesiredAngle = [==[The desired angle to be reached. The motor will attempt to reach this angle]==],
	type = [==[Returns the basic type of the provided object]==],
	RightEyeUpperLidRaiser = [==[Raises the right eyelid upwards to reveal more of the eye white above the iri]==],
	FloatCurve = [==[A sorted list of time-value pairs (<code>DataType.FloatCurveKey</code>) that define a curve. Used to animate a single numerical value]==],
	Beam = [==[A Beam object connects two <code>Attachment</code>s by drawing a texture between them]==],
	NoReverb = [==[No sound reverb. Audio is not changed from default]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	FrontAccessory = [==[A comma-separated list of asset IDs that will be added as <code>Accessory</code> to a <code>Humanoid</code> rig when <code>Humanoid:ApplyDescription</code>, usually those attached to front of its torso (such as medals or ties]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	TorsoColor3 = [==[Sets the color of this limb, as a <a href="/api-reference/datatype/Color3" title="API:Color3"><span>Color3</span></a>]==],
	ElevatedOnServer = [==[Less throttling if on the server]==],
	StatusAdded = [==[Fired when a status is added to the Humanoid]==],
	Explosion = [==[An Explosion applies force to <code>BaseParts</code> within the explosion's <code>Explosion.BlastRadius</code>. This force breaks joints between parts and kills <code>Humanoid</code> characters not protected by a <code>ForceField</code>]==],
	AutoButtonColor = [==[Determines whether the button automatically changes color when the mouse hovers over or clicks on i]==],
	Event = [==[The event that is fired when <code>BindableEvent:Fire</code> is calle]==],
	TextXAlignment = [==[Determines the horizontal alignment of rendered text]==],
	TwistLowerAngle = [==[Sets the lower twist rotation limit of the BallSocketConstraint, as long as <code>BallSocketConstraint.TwistLimitsEnabled</code> is <code>true</code>]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	AssemblyMass = [==[The total mass of the part’s assembl]==],
	DialogChoiceSelected = [==[Fired when a player chooses something to say, through a <code>Dialog</code> instance]==],
	Steer = [==[The direction of movement, tied to the keys A and D. Must be 1 (right), 0 (straight), or -1 (left). Will refresh back to 0 unless constantly set]==],
	Disabled = [==[Toggles whether the <code>VehicleSeat</code> is active or not]==],
	Size352x352 = [==[Thumbnail resolution is 352 pixels x 352 pixels]==],
	LineHeight = [==[Scales the spacing between lines of text in the <code>TextButton</code]==],
	typeof = [==[Returns the type of the given object as a string, also supporting Roblox-specific types (e.g. Vector3)]==],
	Stopped = [==[Fires whenever the <code>AnimationTrack</code> finishes playing]==],
	LowerLimit = [==[The lower position limit along the x-axis of <code>Constraint.Attachment0</code> for a SlidingBallConstraint if <code>SlidingBallConstraint.LimitsEnabled</code> is true]==],
	Vector3Curve = [==[Represents a 3D vector curve, it groups 3 <code>FloatCurve</code>, stored as 3 <code>FloatCurve</code> children instances]==],
	WetLevel = [==[The output volume of the echoed effect]==],
	IsActivatedWithExclusiveMouse = [==[Returns true if this plugin is currently active with an exclusive mouse, after having been activated via the <code>Plugin:Activate</code> functio]==],
	GetCanUndo = [==[Returns whether there are actions that can be undone, and, if there are, returns the last of them]==],
	ActionText = [==[The action text shown to the use]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	AreHingesDetected = [==[Displays how many hinges are detected by the VehicleSeat. Useful for debugging vehicle designs]==],
	GetEntries = [==[Returns an array of dictionaries, where each dictionary represents an entry of localization data]==],
	Distance = [==[The distance between the ray origin and the intersection point]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Climbing = [==[The Humanoid is climbing (e.g. up a <code>TrussPart</code> or ladder). <em>This state is only found being active when stopping with climbing.</em]==],
	GetTranslatorForPlayer = [==[Returns a <code>Translator</code> to be used for translations using the locale data loade]==],
	RecenterUserHeadCFrame = [==[Recenters the <code>DataType.CFrame</code> of the VR headset to the current orientation of the headset worn by the use]==],
	MaxThrust = [==[Determines the maximum amount of thrust that will be exerted to move the par]==],
	Attachment1 = [==[The <code>Attachment</code> the <code>Beam</code> ends at]==],
	Size48x48 = [==[Thumbnail resolution is 48 pixels x 48 pixels]==],
	collectgarbage = [==[Performs the specified operation of the garbage collector]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	TweenBase = [==[Abstract base class for in-between interpolation handlers. <code>Tween</code> inherits from <code>BaseTween</code>]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Enabled = [==[Whether this prompt should be show]==],
	GetPlayers = [==[Returns a table of all presently connected <code>Player</code> object]==],
	X = [==[The x-coordinate of the Vector3]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	AttachmentRight = [==[Sets the offset position of the object on the Player]==],
	UnbindAllActions = [==[Removes all functions bound. No actionNames will remain. All touch buttons will be removed]==],
	AvatarBust = [==[The returned thumbnail shows the bust (chest up) of the user's avatar]==],
	Neutral = [==[Whether or not a <code>SpawnLocation</code> is affiliated with a specific team. This means that any <code>Player</code>, of any <code>Team</code>, can spawn on it if this property is set to true]==],
	Massless = [==[Determines whether the part contributes to the total mass or inertia of its rigid bod]==],
	Transparency = [==[Determines the transparency of particles over their individual lifetime]==],
	AlphaMode = [==[Determines how the alpha channel of the <code>SurfaceAppearance.ColorMap</code> of a <code>SurfaceAppearance</code> is use]==],
	GetKeys = [==[Returns a copy of all the keys in the RotationCurve as a Lua array of RotationCurveKey]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Color3 = [==[A color value comprised of R, G, and B components]==],
	IsLoaded = [==[This property will be true when the <code>Sound</code> has loaded loaded from Roblox servers and is ready to play]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Elasticity = [==[Used to control the Elasticity of the part, but it no longer does anythin]==],
	EasingStyle = [==[The easing style to use when performing an animation]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	GetJoinMode = [==[Returns the <code>Enum.JointCreationMode</code> the user has set in studio under the Model tab]==],
	BottomImage = [==[The Down image on the vertical scrollbar. Size of this is always ScrollBarThickness by ScrollBarThickness. This is also used as the image on the horizontal scroll bar]==],
	Friction = [==[The deceleration of the part when rubbing against another part]==],
	CloseLate = [==[Fired immediately after the <code>ServiceProvider.Close</code> signal is fired]==],
	Color = [==[Changes the <code>Atmosphere</code> hue for subtle environmental moods]==],
	DistanceStep = [==[Distance will be rounded to increments of this valu]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	FaceAccessory = [==[A comma-separated list of asset IDs that will be added as <code>Accessory</code> to a <code>Humanoid</code> rig when <code>Humanoid:ApplyDescription</code>, usually those attached to the front of its face (such as glasses]==],
	StudsBetweenTextures = [==[The number of studs between each FloorWire segment]==],
	Min = [==[Returns a <code>Vector3</code> where each component is the lowest among the respective components of the provided <code>Vector3</code>s]==],
	D = [==[Determines the amount of dampening to use in reaching the goal <code>BodyGyro.CFrame</code]==],
	LeftArm = [==[The left arm BodyPart]==],
	tan = [==[Returns the tangent of x (assumed to be in radians)]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	DryLevel = [==[The output volume of the original sound]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Feature = [==[The base class for the legacy motor system]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	ServoMaxTorque = [==[The maximum torque a HingeConstraint with <code>HingeConstraint.ActuatorType</code> set to <code>Enum.ActuatorType</code> can apply when trying to reach its desired <code>HingeConstraint.TargetAngle</code>]==],
	AwardBadge = [==[Award a badge to a player given the ID of eac]==],
	SaveInstance = [==[Saves an instance which can be loaded again at a later tim]==],
	TextureMode = [==[Determines the manner in which the <code>Beam.Texture</code> scales and repeats]==],
	FilterStringForPlayerAsync = [==[Filters a string appropriate to the given player's age settings, so they see what is appropriate to them]==],
	AbsoluteSize = [==[Describes the actual screen size of a UI element, in pixels]==],
	bnot = [==[Returns the bitwise negation of a given number]==],
	Heartbeat = [==[Fires every <em>frame</em> after the physics simulation has complete]==],
	Radius = [==[The visualized radius of the BallSocketConstraint]==],
	ContextActionService = [==[A service used to bind user input to contextual actions]==],
	Size = [==[Determines the blur radiu]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	RightLowerLeg = [==[Reference to a Humanoid's RightLowerLeg]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	LoginService = [==[An internal service whose functionality is not available to developers]==],
	SizeInCells = [==[The size of this TerrainRegion in cells]==],
	GetCharacterAppearanceAsync = [==[Returns a <code>Model</code> containing the assets which the player is wearing, excluding gea]==],
	Enabled = [==[Whether <code>ProximityPrompt</code> are enabled, and therefore shown, in-gam]==],
	format = [==[Returns a formatted version of its variable number of arguments following the description given in its first argument (which must be a string)]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	DataStoreObjectVersionInfo = [==[An instance describing version information for a key]==],
	ServoMaxForce = [==[The maximum force a SlidingBallConstraint with <code>SlidingBallConstraint.ActuatorType</code> set to <code>Enum.ActuatorType</code> can apply when trying to reach its desired <code>SlidingBallConstraint.Speed</code>]==],
	SolidModelContentProvider = [==[An internal service which serves no functionality to developers]==],
	VIPServerOwnerId = [==[The <code>Player.UserId</code> of the account who owns the VIP serve]==],
	new = [==[Returns a Region3int16 from the provided boundaries]==],
	new = [==[Returns a Vector3int16 from the given x, y, and z components]==],
	Hole = [==[The <code>Hole</code> linked to this VelocityMotor]==],
	UserHasBadge = [==[Checks whether a player has the badge given the <code>Player.UserId</code> and the badge ID]==],
	FireInGameEconomyEvent = [==[Fire an event used to track player actions pertaining to the in-game econom]==],
	ReplicatedFirst = [==[A container whose contents are replicated to all clients (but not back to the server) first before anything else]==],
	PlayerOwnsAsset = [==[Returns whether the given player has the given asset]==],
	LocalTransparencyModifier = [==[Determines a multiplier for <code>BasePart.Transparency</code> that is only visible to the local clien]==],
	LightInfluence = [==[Determines the degree to which the <code>Beam</code> is influenced by the environment's lighting]==],
	FilterDescendantsInstances = [==[An array of objects whose descendants will be used in filtering candidates]==],
	SelectedObject = [==[Sets the GuiObject currently being focused on by the GUI Navigator (used for Gamepads]==],
	SortOrder = [==[Determines the manner in which the next UI element is chosen when being laid out]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	VertexColor = [==[Changes the hue of a mesh's texture, used with <code>FileMesh.TextureId</code>]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	OffsetStudsV = [==[Determines the offset in studs of the rendered texture's vertical coordinate]==],
	MouseButton2 = [==[The right mouse button]==],
	StoneRoom = [==[Sound reverb is changed to sound like the player is in a stone room]==],
	P = [==[Determines how aggressive of a torque is applied in reaching the goal angular velocit]==],
	LeftNoseWrinkler = [==[Raise the left nostril, pulls the brow down slightly, and wrinkles on the side of the nos]==],
	Adornee = [==[Sets the object that the SurfaceGui is adorned too. In other words, this defines which <code>BasePart</code> the SurfaceGui is attached to]==],
	Instance = [==[Instance is the base class for all classes in the Roblox class hierarchy]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	LeftOuterBrowRaiser = [==[Raises the outer part of the left brow upward]==],
	FocusLost = [==[The FocusLost event fires when the client lets their focus off the <code>TextBox</code>]==],
	Quad = [==[Similar to Quart and Quint, but at a different speed (See animation)]==],
	Speed = [==[Determines the random range of speeds a new particle will have when emit, measured in studs per secon]==],
	GetCreatorAssetID = [==[Returns the UserId of the account who created the the creationID asset]==],
	Size8 = [==[Font size 8]==],
	Z = [==[Whether the Z axis is enabled]==],
	ClipsDescendants = [==[Determines if descendant <code>GuiObject</code> outside of the bounds of a parent GUI element should rende]==],
	UIGradient = [==[A <code>UIComponent</code>, that blends a color gradient to its parent <code>GuiObject</code>, so you can layer multiple colors into your text, UI background or other UI content]==],
	time = [==[Returns the amount of time in seconds that has elapsed since the current game instance started running]==],
	LinkedSource = [==[Used to store a URL that points to an online script source. Binds the online code to the script's <code>Script.Source</code]==],
	GetInspectMenuEnabled = [==[Returns whether the Inspect and Buy menu functionality is enable]==],
	Hopper = [==[Deprecated. Hopper has been replaced by StarterPack and should not be used]==],
	RunAnimation = [==[When this description is <code>Humanoid:ApplyDescription</code> to a <code>Humanoid</code>, this determines the <code>Animation.AnimationId</code> to play when its <code>Humanoid:GetState</code> is <code>enum.HumanoidStateType</code> at a moderate speed]==],
	InputBegan = [==[Fired when a user begins interacting via a Human-Computer Interface device - such as a mouse or gamepa]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	TranslateBy = [==[Shifts a <code>Model</code> by the given <code>Vector3</code> offset, preserving the <code>Model</code>'s orientation. If another <code>BasePart</code> or <code>Terrain</code> already exists at the new position then the <code>Model</code> will overlap said object]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Scriptable = [==[No default behavior. Used when developers need to script custom behavior]==],
	Border = [==[The stroke is applied to the parent UI element’s borde]==],
	fromUnixTimestampMillis = [==[Returns a DateTime representing the given Unix timestamp in milliseconds]==],
	HasCustomStatus = [==[Returns boolean based on if custom statuses exist]==],
	new = [==[Returns a Region3 using the provided vectors as boundaries]==],
	Sibling = [==[The ZIndex property will control the order that the GuiObject will be rendered relative to its siblings]==],
	StarterPlayerScripts = [==[A container for objects to be copied to a Player's PlayerScripts when they join a gam]==],
	GearGenreSetting = [==[Not functional. Historically described the gear permissions of the <code>Articles.Place</code> as set on the Roblox websit]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Merriweather = [==[<style>@import url('https://fonts.googleapis.com/css2?family=Merriweather');</style>
<p class="text-nowrap" style={{fontFamily: 'Merriweather', fontSize: '1.6em', margin: '5px 0px'}}>The quick brown fox jumps over the lazy dog.<br />0123456789 , : ! ? # % & ( ) - + ]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	rshift = [==[Returns a number whose bits have been logically shifted to the right by a given displacement]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Teams = [==[The Teams service holds a game's <code>Team</code> objects. <code>Team</code> objects must be parented to the Teams service]==],
	TweenInfo = [==[A container of parameters for <code>Tween</code>s]==],
	Elasticity = [==[The amount of energy retained when colliding with another part]==],
	WorldToViewportPoint = [==[Returns the 2D screen location of a <code>DataType.Vector3</code> position in the world, but does not account for the GUI inse]==],
	Style = [==[Sets the GUI style of the handles. Currently there are only two types; Resize and Movement]==],
	CFrame = [==[The <code>CFrame</code> that will be applied to the <code>Motor6D</code> corresponding with the <code>Pose</code>. This <code>CFrame</code> is applied by changing the <code>Motor6D\Transform</code> property of the motor]==],
	NetworkPeer = [==[The NetworkPeer object is the most basic class of the network objects]==],
	JobId = [==[A unique identifier for the game server instance running. Defaults to an empty string in Roblox Studi]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Insertable = [==[Toggles whether or not this object can be inserted through the Advanced Objects menu]==],
	ReceiverConnected = [==[Fires when a receiver is connected to the <code>CustomEvent</code]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	PVInstance = [==[Abstract class for all objects that have a physical location in the world, specifically <code>BasePart</code> and <code>Model</code>]==],
	SpreadAngle = [==[Determines the angles at which particles may be randomly emit, measured in degree]==],
	GetButton = [==[Returns whether or not Button is being pressed]==],
	ExpandToGrid = [==[Expands the Region3 to fit a grid based on the provided resolution]==],
	SetTimeout = [==[Limits how long a script is allowed to run without yielding]==],
	GetModelSize = [==[Returns the Vector3 size of the Model]==],
	ShrinkFactor = [==[Allows slight shrinking/expanding of the resulting render mesh, without affecting any other layers]==],
	AttachmentPos = [==[Sets the position of the object on the Player]==],
	Lerp = [==[Returns a UDim2 interpolated linearly between the value and the given goal]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Accelerometer = [==[The accelerometer of a mobile device]==],
	BodyTypeScale = [==[Determines the factor by which the shape of a Humanoid rig is interpolated from the standard R15 body shape (0) to a taller and more slender body type (1); when <code>Humanoid:ApplyDescription</code>, maps to the "BodyTypeScale" <code>NumberValue</code> within the HumanoidDescriptio]==],
	GetRoll = [==[Returns in radians the current roll, or rotation around the <code>Camera</code> Z-axis, applied to the <code>Camera</code> using <code>Camera:SetRoll</code]==],
	Feedback = [==[The echo decay every time the echo plays]==],
	ColorPickerFrame = [==[The background color of the color picke]==],
	RangedWeapons = [==[Gear with the 'Ranged' attribute.
![<a href="/assets/blt4aaa5534850ad583/GearType_Ranged.png">Ranged Attribute</a]==],
	X = [==[Canvas can only be scrolled along the X axi]==],
	GetAccessories = [==[Returns an array of <code>Accessory</code> that the <code>Humanoid</code> parent is currently wearin]==],
	Intensity = [==[Determines the opacity of the sun ray]==],
	TriggerEnded = [==[Triggers when <code>ProximityPrompt.KeyboardKeyCode</code>/button is released, for longer events where the user is required to hold down the butto]==],
	GetNonChatStringForUserAsync = [==[Returns the text in a properly filtered manner for the specified <code>Player.UserId</code>. This should be used in the context of non-chat text that another user can see, such as the name of a pet]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	SaveString = [==[Saves a string value that can be loaded again at a later tim]==],
	ConversationDistance = [==[The furthest distance that I player can be from the Dialog's parent to start a conversation]==],
	Size12 = [==[Font size 12]==],
	ScrollingEnabled = [==[Determines whether or not scrolling is allowed on the frame. If false, no scroll bars will be rendered]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	GetMouse = [==[Returns a <code>Mouse</code> that can be used while the plugin is active]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Level10 = [==[Graphic quality level 10]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Color3Value = [==[A container object for a single Color3 value]==],
	FlagStandService = [==[An internal service responsible for handling the now deprecated <code>FlagStand</code> and <code>Flag</code> object]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	atan2 = [==[Returns the arc tangent of y/x (in radians) while using the signs of both parameters to find the quadrant of the result]==],
	RightArmColor = [==[Sets the color of this limb, as a <a href="/api-reference/datatype/BrickColor" class="mw-redirect" title="API:BrickColor"><span>BrickColor</span></a>]==],
	ClosestPoint = [==[Returns a Vector3 projected onto the ray so that it is within the Ray's line of sight]==],
	PlayerAdded = [==[Fires when a player enters the game]==],
	IsLoaded = [==[Indicates whether the Image has finished loading from the Roblox website]==],
	GetLastForce = [==[Not implemented and will always return the 0 vecto]==],
	TextColor = [==[Determines the color of tex]==],
	UISizeConstraint = [==[Ensures a GuiObject does not become larger or smaller than the constraint's max size or min size]==],
	AdjustSpeed = [==[This function changes the <code>AnimationTrack.Speed</code> of an animation.  A positive value for speed plays the animation forward, a negative one plays it backwards, and 0 pauses it]==],
	DevTouchCameraMovementMode = [==[Lets developer overwrite the default camera movement mode for each player if the player is on a mobile device]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	GetPlayingAnimationTracks = [==[Returns the list of currently playing <code>AnimationTracks</code>]==],
	Root = [==[The object that is being targeted for localization by this table. Localization is applied to it and all of it's descendants]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	GetColor = [==[Returns the color corresponding to the arguments provide]==],
	GetDataStore = [==[Creates a <code>GlobalDataStore</code> instance with the provided name and scope]==],
	DataComplexity = [==[The total amount of data currently being stored in the <code>Player</code> cache on the current plac]==],
	CurveSize0 = [==[Determines, along with <code>Beam.Attachment0</code> the position of the first control point in the <code>Beam</code>'s Bézier curve]==],
	MaxSize = [==[The largest size in pixels the object is allowed to be]==],
	Pitch = [==[Deprecated. Sets how high pitched and fast a <code>Sound</code> is when it is played. The greater the integer, the higher and faster the <code>Sound</code> is]==],
	new = [==[Returns a blank RaycastParams]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	BlastRadius = [==[This property determines the radius of the <code>Explosion</code>, in studs. This radius determines the area of effect of the explosion, not the size of the explosion's visuals]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Checkpoint = [==[Prints "Test checkpoint: ", followed by text, to the output, in blue text]==],
	Gamepad7 = [==[Input from the 7th plugged in Gamepad]==],
	Sink = [==[If <em>functionToBind</em> from <code>ContextActionService.BindAction</code> returns Enum.ContextActionResult.Sink, the input event will stop at that function and no other bound actions under it will be . This is the default behavior if <em>functionToBind</em> does not return anything or yields in any way]==],
	Text = [==[Sets the text of a <code>Message</code> or <code>Hint</code>]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Walk = [==[Walk action needed to reach the next waypoin]==],
	IsEnabled = [==[Whether or not the breakpoint is enabled]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	JumpRequest = [==[Fires whenever the client makes a request for their character to jum]==],
	UpVector = [==[The up-direction component of the CFrame's orientation]==],
	TorsoColor = [==[Sets the color of this limb, as a <a href="/api-reference/datatype/BrickColor" class="mw-redirect" title="API:BrickColor"><span>BrickColor</span></a>]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	AddEmote = [==[Adds the emote to the description given a name and its asset I]==],
	DateTime = [==[A datatype that represents a moment in time]==],
	acos = [==[Returns the arc cosine of x]==],
	Swimming = [==[The Humanoid is currently swimming in <code>Terrain</code> water]==],
	PointToWorldSpace = [==[Returns a Vector3 transformed from Object to World space]==],
	DeathAnimation = [==[The asset is a death animation]==],
	CollisionFidelity = [==[Determines the level of detail the part's physics will adhere to its mes]==],
	GetRecommendedBundles = [==[Returns a list of recommended bundles for a given bundle i]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	new = [==[Returns a Ray with the given origin and directio]==],
	Redo = [==[Executes the last action that was undone]==],
	Ball = [==[A ball shaped par]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	GetCoreGuiEnabled = [==[Returns whether the given <code>Enum.CoreGuiType</code>is enabled or if it has been disabled using <code>StarterGui:SetCoreGuiEnabled</code]==],
	TargetFilter = [==[Determines an object (and its descendants) to be ignored when determining <code>Mouse.Hit</code> and <code>Mouse.Target</code]==],
	TintColor = [==[Determines by how much the RGB channels of pixels are scale]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	TextSize = [==[Determine the line height of text in pixels]==],
	RecenterUserHeadCFrame = [==[Recenters the CFrame to the current location of the VR headset being worn by the user]==],
	IsLegal = [==[Determines if a given badge is associated with the current gam]==],
	Cancel = [==[A special circumstance state that indicates this input is no longer relevant, particularly with <code>ContextActionService</code>. For example, binding two action-handling functions will cause the first to Cancel if an input was already in-progress when the second was bound]==],
	Backpack = [==[A container object that holds a <code>Player</code>'s inventory. Any <code>Tool</code> in a player's Backpack will be displayed in their inventory at the bottom of their screen]==],
	FaceCamera = [==[Determines whether the <code>Beam.Segments</code> of the <code>Beam</code> will always face the camera regardless of its orientation]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	new = [==[Returns a UDim from the given components]==],
	EmissionDirection = [==[Determines the face towards which particles will be emi]==],
	LineVelocity = [==[Float value of the velocity when <code>LinearVelocity.VelocityConstraintMode</code> is set to <strong>Line</strong>]==],
	BaseUrl = [==[The base URL that is used by the <code>ContentProvider</code> for downloading assets from the Roblox website]==],
	ZIndex = [==[The ZIndex property determines the draw order of the HandleAdornment]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	ThrustP = [==[Determines how aggressive of a force is applied in reaching the <code>RocketPropulsion.Target</code]==],
	PostAsync = [==[Performs a POST request to the specified <a rel="nofollow" class="external text" href="http://api.roblox.com/docs">Roblox Web API</a>. The <i>apiUrlPath</i> parameter is prefixed by <a href="/articles/String" title="String"><span>"https://api.roblox.com/"</span></a> when the post request is made]==],
	LeftCheekPuff = [==[Puffs up the left chee]==],
	Connected = [==[The state of the RBXScriptConnection]==],
	Begin = [==[The tween is beginning to play]==],
	MouseLockSwitch = [==[Similar to classic, but allows the player to toggle mouse locking, causing the camera to rotate as the player moves the mouse (without holding down a button)]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	PromptPremiumPurchase = [==[Used to prompt a user to purchase Premiu]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	LuaHeap = [==[All of the data in Lua. this includes everything happening in CoreScripts, the built-in datatypes, etc]==],
	DistanceFromCharacter = [==[Returns the distance between the character's head and the given Vector3 point. Returns 0 if the player has no character]==],
	IgnoreWater = [==[Determines whether the water material is considered when raycasting against <code>Terrain</code>]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	ShouldReserveServer = [==[A flag to indicate if a reserved server should be allocated and the players should then be teleported to this allocatio]==],
	EdgeBump = [==[Disables swipe to pan on mobile devices, and enables edge bump camera controls. It does not affect PC or Mac users]==],
	Loaded = [==[Fires on the client when the game finishes loading for the first tim]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	PlatformStand = [==[Determines whether the <code>Humanoid</code> is currently in the <em>PlatformStanding</em> <code>Enum.HumanoidStateType</code>]==],
	DataModel = [==[The DataModel (commonly known as <strong>game</strong> after the global variable used to access it) is the root of Roblox's parent-child hierarchy. Its direct children are services (such as the <code>Workspace</code> and <code>Lighting</code>) that act as the fundamental components of a Roblox game]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	CharacterAutoLoads = [==[Indicates whether <code>Character</code>s will respawn automatically]==],
	GetMouseLocation = [==[Returns the current screen location of the player's <code>Mouse</code> relative to the top left corner of the scree]==],
	LockFirstPerson = [==[Exclusively first-person camera]==],
	Contrast = [==[Determines the change in separation between the dark and light color]==],
	UDim = [==[A one-dimensional value with two components, a relative scale and an absolute offset]==],
	zero = [==[A Vector2 with a magnitude of zero]==],
	SecondaryTangentAxis = [==[The secondary axis in the plane, when <code>LinearVelocity.VelocityConstraintMode</code> is set to <strong>Plane</strong>]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Miter = [==[The corners are mitered (see image above]==],
	Orbital = [==[The camera has a fixed Y position, but can be rotated around the player]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	LightDirection = [==[A <code>DataType.Vector3</code> representing the direction of the light source from the position 0, 0, ]==],
	TeleportService = [==[Enables transporting <code>Player</code> between places and servers]==],
	Linear = [==[Linear interpolation between the values of the first and second key]==],
	InputChanged = [==[Fired when a user changes how they're interacting via a Human-Computer Interface device (Mouse button down, touch begin, keyboard button down, etc]==],
	Follow = [==[Camera tracks the player and automatically rotates if the player walks left or right]==],
	GetMessage = [==[<strong><em>[OBSOLETE]:</em></strong> This function will always return a blank strin]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Reset = [==[Resets the current game to a waypoint set when <code>RunService:Run</code> was calle]==],
	DebuggerAdded = [==[Fired when a new <a href="/api-reference/class/ScriptDebugger" class="mw-redirect" title="ScriptDebugger">ScriptDebugger</a> is created through the <a href="/api-reference/function/DebuggerManager/AddDebugger" class="mw-redirect" title="AddDebugger">AddDebugger</a> method]==],
	Modal = [==[If true while the GUI element is visible, the mouse will not be locked unless the right mouse button is down]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	TargetRadius = [==[Determines the maximum distance from the <code>RocketPropulsion.Target</code> the part must be in order for <code>RocketPropulsion.ReachedTarget</code> to be fire]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	new = [==[Returns a new FloatCurveKey from the given time and value]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Classic = [==[Allows the camera to be moved by clicking and dragging with the right mouse button]==],
	SaveSelectedToRoblox = [==[Opens an upload window for the user's current selection]==],
	ThrottleAdjustTime = [==[If the <code>PhysicsSettings.PhysicsEnvironmentalThrottle</code> is set to <i>DefaultAuto</i>, this specifies the maximum time that the physics environmental throttle has to wait before it is allowed to automatically change]==],
	LoadCharacterBlocking = [==[Functions similar to <code>Player:LoadCharacter</code>, but the request is processed synchronously instead of asynchronously]==],
	Manual = [==[Network ownership is set manually by the developer]==],
	Mode = [==[The way the constraint determines its goal]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	RegisterActiveKeyframeSequence = [==[Generates a temporary asset ID from a <code>KeyframeSequence</code> that can be used for localized testing of an animation. Generates an <em>active://</em> URL]==],
	Pants = [==[Displays a Pants texture from the Roblox website to display on a <code>Humanoid</code> ri]==],
	Played = [==[Fires whenever the <code>Sound</code> is played using the <code>Sound:Play</code> function]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	ClickDetector = [==[An object that provides user input on in-world <code>BasePart</code> and <code>Model</code]==],
	Left = [==[Alignment starts at the left side of the GUI object]==],
	DevTouchMovementMode = [==[Lets developer overwrite the player's movement mode if the player is on a touch device]==],
	ReceiveAge = [==[Time since last recorded physics updat]==],
	BreakpointAdded = [==[Fired when a breakpoint is added to the script]==],
	Gamepad8 = [==[Input from the 8th plugged in Gamepad]==],
	MovingPrimitivesCount = [==[A measurement of how many physically simulated components are currently moving in the game world]==],
	CenterOfMass = [==[Describes the world position in which a part's center of mass is located]==],
	Padding = [==[Determines the empty space between cells]==],
	WebOS = [==[The client is running on WebOS]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	ScrollBarImageTransparency = [==[Determines the transparency of the rendered scroll bar imag]==],
	Motor6D = [==[Creates an animatable joint between two <code>BasePart</code>]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Playing = [==[The tween is currently in progress]==],
	ReactionForceEnabled = [==[Enables an equal and opposite reaction force on the parent of Attachment1]==],
	PromptGamePassPurchase = [==[Used to prompt a user to purchase a game pass with the given assetId]==],
	Undo = [==[Undos the last action taken, for which there exists a waypoint]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	ReactionTorqueEnabled = [==[When true the constraint will apply torque on both Attachments to achieve the goal]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	ViewportFrame = [==[<code>GuiObject</code> that can display children 3D object]==],
	Classic = [==[Displays chats in the chat user interface at the top-left corner of the screen]==],
	ControllingHumanoid = [==[The <code>Humanoid</code> that is controlling the SkateboardPlatform]==],
	CFrame = [==[The <code>DataType.CFrame</code> of the <code>Camera</code>, defining its position and orientation in the 3D worl]==],
	ClickablePrompt = [==[Whether the prompt can be activated by clicking/tapping on the prompt U]==],
	G = [==[The green value of the color]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Default = [==[Default priorit]==],
	Offset = [==[Determines the scalar translation of the gradient from the center of the parent GuiObject]==],
	DisplayName = [==[Sets the text of a Humanoid, displayed above their head]==],
	AssemblyLinearVelocity = [==[The linear velocity of the part’s assembl]==],
	Cubic = [==[Cubic interpolation of first key value and its right tangent and second key value and its left tangent]==],
	GoodbyeDialog = [==[Sets the sentence that the dialog will show to the player when the chat end]==],
	FallAnimation = [==[The asset is a fall animation]==],
	Face = [==[Sets what face of the brick the object appears on]==],
	Button1Up = [==[Simulates the user releasing the left mouse button]==],
	new = [==[Returns a ColorSequenceKeypoint from the given time and color]==],
	Touched = [==[Fires when one of the <code>Humanoid</code> limbs come in contact with another <code>BasePart</code]==],
	TextureId = [==[The texture icon that is displayed for a tool in the <code>Player</code>'s backpack]==],
	Premium = [==[The player has an active <a href="https://www.roblox.com/premium/membership" target="_new">Premium</a> membership]==],
	Enabled = [==[Determines whether flame particles are emi]==],
	RiseVelocity = [==[Determines the velocity of the smoke particle]==],
	High = [==[High priorit]==],
	Done = [==[Prints Testing Done to the output, in blue text]==],
	PointToObjectSpace = [==[Returns a Vector3 transformed from World to Object space]==],
	RemoveTargetLocale = [==[Removes all translations from the LocalizationTable with the specified localeId]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	AddAccessory = [==[Attaches the specified <code>Accessory</code> to the <code>Humanoid</code> paren]==],
	Chat = [==[Fires the <code>Chat.Chatted</code> event with the parameters specified in this method]==],
	TextScaled = [==[Changes whether text is resized to fit within the TextButton]==],
	ZIndex = [==[Determines the rendering order when multiple Decals are assigned the same fac]==],
	MaxForce = [==[The maximum force the SpringConstraint can apply on its <code>Attachment</code>]==],
	GetValue = [==[Returns the StatsItem's value]==],
	RequestQueueSize = [==[RequestQueueSize gives the number of items in <code>ContentProvider</code>'s request queue that need to be loaded]==],
	TimerService = [==[An internal service responsible for scheduling timed events. It is used by the <code>Debris</code> class. Its functionality can not be accessed by developers]==],
	PromptButtonHoldBegan = [==[Triggered when a player begins holding down the <code>ProximityPrompt.KeyboardKeyCode</code>/button connected to a prompt with a non-zero <code>ProximityPrompt.HoldDuration</code]==],
	RespawnTime = [==[Controls the amount of time taken for a players character to respaw]==],
	Keypoints = [==[An array of keypoints within the NumberSequence]==],
	Depth = [==[Controls how much the volume will raise and lower]==],
	ToolTip = [==[Controls the message displayed when the player's mouse hovers over the tool in their backpac]==],
	FindService = [==[Returns the service specified by the given className if it's already created, errors for an invalid name]==],
	LineHeight = [==[Scales the spacing between lines of text in the <code>TextLabel</code]==],
	Cross = [==[Returns the cross product of the two vectors]==],
	LeftLeg = [==[If the limb is a part of the Humanoid's Torso. <em>This includes UpperLeftLeg and LowerLeftLeg for R16 rigs.</em]==],
	P = [==[Determines how aggressive of a torque is applied in reaching the goal orientatio]==],
	Restitution = [==[How elastic <code>Attachment</code> connected by a SlidingBallConstraint will be when they reach the end of the range specified by <code>SlidingBallConstraint.UpperLimit</code> and <code>SlidingBallConstraint.LowerLimit</code> when <code>SlidingBallConstraint.LimitsEnabled</code> is set to true. Constrained between 0 and 1]==],
	FillWedge = [==[Fills a wedge-shaped volume of Terrain with the given <code>enum.Material</code> and the area's CFrame and Size]==],
	RightNoseWrinkler = [==[Raises the right nostril, pulls the brow down slightly, and wrinkles on the side of the nos]==],
	PathWaypoint = [==[A description of the steps required to reach the next waypoint in a path]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	SkyboxDn = [==[The URL asset link to a picture for the Bottom surface of the sky]==],
	Angle = [==[The angle of which the light is shone from the SurfaceLight]==],
	GetDebuggers = [==[Returns a list of <code>ScriptDebugger</code> present in the game]==],
	LowerLipSuck = [==[Rolls the lower lip up over the teet]==],
	GetAsync = [==[Send an HTTP GET reques]==],
	RightLeg = [==[A reference to the humanoid's <em>Right Leg</em> part]==],
	ToHex = [==[Returns the hex code of the Color3]==],
	Flooded = [==[Too many teleport requests have been made recently]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	PVAdornment = [==[The PVAdornment class is an abstract class of which the inheritors can be adorned to objects of the PVInstance class]==],
	PointsAwarded = [==[Fires when points have been successfully awarded to a player, whilst also passing along the updated balance of points the player has in the current game and all games]==],
	FireClient = [==[Fires <code>RemoteEvent.OnClientEvent</code> for the specified player]==],
	Script = [==[The script object this debugger is linked to]==],
	ServiceAdded = [==[Fired when a service is created]==],
	Active = [==[Determines whether a UI element sinks inpu]==],
	Region3int16 = [==[A Region3 stored as two boundaries as opposed to position and size components]==],
	GetKeysPressed = [==[Returns an array of <code>InputObject</code> associated with the <code>Enum.KeyCode</code> currently being pressed dow]==],
	GetPlayerPlaceInstanceAsync = [==[Returns the <code>DataModel.PlaceId</code> and <code>DataMode.lJobId</code> of the server the user with the given <code>Player.UserId</code> is in provided it is in the same game as the current plac]==],
	GetKeyAtIndex = [==[Returns a copy of a key at a given index]==],
	TweenInfo = [==[A container of parameters for <code>Tween</code>s]==],
	InputHoldBegin = [==[Fires a signal indicating that the user began pressing the prompt GUI butto]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	DockWidgetPluginGuiInfo = [==[DockWidgetPluginGuiInfo** is a datatype used to describe details for a <code>DockWidgetPluginGui</code>]==],
	DepthOfFieldEffect = [==[Simulates a camera lens by blurring parts of a scene not in focu]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Pirate = [==[The game's genre is set to Pirate]==],
	LineDirection = [==[The normalized <code>datatype.Vector3</code> direction for constraining the velocity along a line, when <code>LinearVelocity.VelocityConstraintMode</code> is set to <strong>Line</strong>]==],
	Clear = [==[Clears the segments of the trail]==],
	CurrentEditor = [==[The <a href="/api-reference/class/Player" class="mw-redirect" title="Player">Player</a> who is currently editing this script. This property is only used when in <a href="/articles/Team-Create" title="Team Create">Team Create</a> mode]==],
	GamePassService = [==[A service associated with the legacy game pass system. Use <code>MarketplaceService</code> for all new wor]==],
	PromptSetFavorite = [==[Prompts the <code>Players.LocalPlayer</code> to favorite or unfavorite the given asset or bundl]==],
	Playing = [==[Indicates whether the <code>VideoFrame.Video</code> is currently playing. It can be set to start or pause playbac]==],
	SetPrimaryPartCFrame = [==[Sets the <code>BasePart.CFrame</code> of the <code>Model</code>'s <code>Model.PrimaryPart</code>. All other parts in the model will also be moved and will maintain their orientation and offset respective to the <code>Model.PrimaryPart</code>]==],
	DevelopmentLanguage = [==[The default IETF tag to use if the ''languageKey'' parameter is excluded from the <code>LocalizationTable:GetString</code> method]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	cosh = [==[Returns the hyperbolic cosine of x]==],
	AngularVelocity = [==[Determines the axis of rotation (direction) and the rotational velocity (magnitude) in radians/]==],
	Brightness = [==[Determines the factor by which the GUI's light is scaled when <code>BillboardGui.LightInfluence</code> is 0]==],
	RootLocalizationTable = [==[A reference to a <code>LocalizationTable</code> to be used to apply automated localization to this ProximityPrompt’s <code>ProximityPrompt.ActionText</code> and <code>ProximityPrompt.ObjectText</code]==],
	Default = [==[The mouse moves freely around the user's screen]==],
	IsPaused = [==[This read-only property will return true when the <code>Sound</code> is not playing]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Classic = [==[Default mode used by Roblox Core Scripts]==],
	ListVersionsAsync = [==[Enumerates all versions of a key]==],
	SetMinutesAfterMidnight = [==[Sets <code>Lighting.TimeOfDay</code> and <code>Lighting.ClockTime</code> to the given number of minutes after midnigh]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	SkyboxFt = [==[The URL link to a picture for the front surface of the skybox]==],
	InverseSquareLaw = [==[When true, the force magnitude is multiplied by the inverse square of the distance]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Transparency = [==[Sets the transparency of the Trail's segments over the trail's <code>Trail.Lifetime</code>]==],
	LockCurrentPosition = [==[The mouse is locked, and cannot move from, it's current position on the user's screen at the time of locking]==],
	create = [==[Returns a new table populated with many instances of the specified value]==],
	GenericReverb = [==[Sound reverb is changed to a generic reverb effect]==],
	move = [==[Moves the specified range of elements from one table to another]==],
	Revoke = [==[A player revokes (cancels) a previously invoked (sent) friend request]==],
	NumberSequence = [==[A series of floats across a period of time]==],
	HeadShot = [==[The returned thumbnail shows just the headshot (head and up) of the user's avatar]==],
	Animator = [==[The main class responsible for the playback and replication of <code>Animation</code]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Tooltip = [==[The background color of tooltips, like those seen when hovering over buttons on the ribbon bar or properties in the Properties windo]==],
	ClearTextOnFocus = [==[Determines whether clicking on the TextBox will clear its <code>TextBox.Text</code> propert]==],
	new = [==[Creates a new Axes using list of axes and/or faces. NormalIds (faces) are converted to the corresponding axes]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Transparency = [==[Sets the stroke opacity independently of the parent object’s <code>GuiObject.BackgroundTransparency</code> or <code>TextLabel.TextTransparency</code]==],
	fromLocalTime = [==[Returns a DateTime using the given units from a local time]==],
	CurrentAngle = [==[Displays the angle that the motor is at in radians]==],
	Icon = [==[The content ID of the image used as the <code>Mouse</code>'s icon]==],
	CFrame = [==[The position and rotation of the object relative to its <code>PVAdornment.Adornee</code>]==],
	BeOS = [==[The client is running on BeOS]==],
	Bottom = [==[The object is below its parent]==],
	GetActor = [==[Returns the Actor associated with the Instance, usually the first Actor ancesto]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	WaitingForServer = [==[The client is waiting for the server to respond to the teleport request]==],
	Archivable = [==[Determines if an <code>Instance</code> can be cloned using <code>Instance:Clone</code> or saved to file]==],
	GetAppliedDescription = [==[Returns back a copy of the <code>Humanoid</code> cached <code>HumanoidDescription</code>, which describes its current loo]==],
	X = [==[Automatically resize element along X-axis to fit child content]==],
	CurrentAngle = [==[Displays the current rotation of the motor in radians]==],
	Button2Up = [==[Simulates the user releasing the right mouse button]==],
	Ouya = [==[The client is running on an Ouya Operating System (Android-Based)]==],
	TeleportAsync = [==[The all encompassing method to teleport a player or group of players from one server to another]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	ReflectionMetadataFunctions = [==[Acts as a <code>Folder</code> containing information about functions for a <code>ReflectionMetadataClass</code>, and should be parented to it.
<code>ReflectionMetadataMember</code>s that are parented to this object will be perceived as functions under the class this is parented to]==],
	LuaWebService = [==[An internal service, which is responsible for retrieving HTTP data from websites. Used by a range of services, including <code>MarketplaceService</code>, <code>InsertService</code> and <code>HttpService</code>. Its functions cannot be accessed by developers]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Back = [==[The back face of a Part]==],
	CharacterJumpPower = [==[Determines the starting value of <code>Humanoid.JumpPower</code> for <code>Player.Character</code]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	FlagCaptured = [==[Fires when a player bearing an opposing flag, and having the same <code>Player.TeamColor</code> as the stand, touches the <code>FlagStand</code>]==],
	ReplicatedStorage = [==[A container service for objects that are replicated to all game clients]==],
	Motor = [==[Acts the same as a Hinge, but has a grey ring around it and automatically rotates any part connected to it]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	HeadColor = [==[Determines the <code>BodyColors.HeadColor3</code> of a <code>Humanoid</code> when <code>Humanoid:ApplyDescription</code]==],
	LowerAngle = [==[Lower limit for the angle (in degrees) between the reference axis and the SecondaryAxis of Attachment1 around the rotation axis. Value in [-180, 180]]==],
	RightTrigger = [==[Right motor trigger]==],
	GetNetworkOwner = [==[Returns the current player who is the network owner of this part, or nil in case of the server]==],
	ChinRaiserUpperLip = [==[Moves the upper lip when ChinRaiser is engaged and touching the upper li]==],
	CelestialBodiesShown = [==[Sets whether the Sun, Moon, and stars will show]==],
	GridSize = [==[Determines the distance in studs by which studio's drag and move tools move objects each tic]==],
	JumpAnimation = [==[The asset is a jump animation]==],
	GetGamePlacesAsync = [==[Returns a <code>StandardPages</code> object which contains the name and placeId of places within the current 'Game' (otherwise known as a 'Universe')]==],
	RemoveTag = [==[Remove a tag from an objec]==],
	Health = [==[The CoreGui displaying a player's health]==],
	Sand = [==[Applies to <code>BasePart</code> and <code>Terrain</code>]==],
	Died = [==[Fires when the <code>Humanoid</code> die]==],
	GetComponents = [==[Returns the values: x, y, z, R00, R01, R02, R10, R11, R12, R20, R21, R22, where R00-R22 represent the 3x3 rotation matrix of the CFrame, and xyz represent the position of the CFrame]==],
	Backpack = [==[The CoreGui displaying a player's backpack (containing a player's tools, gear, etc.)]==],
	GraphicsTextureCharacter = [==[Rendering of texture composition maps that are generated for Humanoids]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	GetCameraYInvertValue = [==[Returns the camera's Y-invert value]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	EnvironmentDiffuseScale = [==[Ambient light that is derived from the environmen]==],
	Length = [==[A read only property that returns the length (in seconds) of an <code>AnimationTrack</code>. This will return 0 until the animation has fully loaded and thus may not be immediately available]==],
	Change = [==[Occurs each frame an <code>InputObject</code> has already begun interacting with the game and part of its state is changing. For example, a movement of the mouse position, a gamepad thumbstick, gamepad trigger button, or screen touch point]==],
	r = [==[The red component of the BrickColor (between 0 and 1)]==],
	Mud = [==[Applies to <code>Terrain</code> only]==],
	Pyramid = [==[The mesh is a pyramid]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	HasStatus = [==[Returns a boolean based on if a status exists]==],
	StateChanged = [==[Fired when the state of the <code>Humanoid</code> is change]==],
	SteppingMotor = [==[Functions identically to a motor. It may have functioned differently in the past, but that functionality no longer seems to exis]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	isfrozen = [==[Returns <code>true</code> if the given table is frozen and <code>false</code> if it isn't frozen]==],
	R15 = [==[The R15 character rig]==],
	Text = [==[Determines the string rendered by the UI element]==],
	MenuOpened = [==[Fires when the user <b>opens</b> the Roblox coregui escape menu]==],
	CameraMinZoomDistance = [==[The minimum distance the player's camera is allowed to zoom in]==],
	TeleportAsyncResult = [==[The return structure of the <code>TeleportAsync</code> function cal]==],
	ApplyImpulse = [==[Apply an impulse to the assembly at the assembly’s <code>BasePart.AssemblyCenterOfMass</code]==],
	ScrollBarImageColor3 = [==[Determines how a rendered scroll bar image will be colorize]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	TopbarTransparencyChangedSignal = [==[Fires when the transparency of the Topbar CoreGui changes]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Video = [==[The content ID of the video file a <code>VideoFrame</code> object is associated with]==],
	ApplyJointVelocities = [==[Computes relative velocities between parts and apply them to <code>Motor6D.Part1</code>. These relative velocity calculations and assignments happen in the order provided]==],
	Internal = [==[General data that doesn't have any categorization. This could be due to either internal reasons, or because it simply isn't being tracked categorically]==],
	HostWidgetWasRestored = [==[Describes whether the previous state of this DockWidgetPluginGui was restored when it was created]==],
	Volume = [==[Indicates how loud the <code>VideoFrame.Video</code> is currently playing bac]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Automatic = [==[The quality level of graphics is determined automatically depending on the client's setting for either game performance or graphic quality]==],
	TimeLength = [==[Indicates the length of the <code>VideoFrame.Video</code> in second]==],
	SlidingBallConstraint = [==[A currently unfinished and unavailable type of constraint]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	one = [==[A Vector3 with a value of 1 on every axis]==],
	ClearComputerMovementModes = [==[Unregisters all ComputerMovementMode enums from the game settings menu]==],
	Resumed = [==[Fires when the <code>Sound</code> is resumed using <code>Sound:Resume</code>]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	palette = [==[Constructs a BrickColor from its palette index]==],
	Failure = [==[The teleport failed for an unknown reason]==],
	RightParamB = [==[Determines the second parameter for the SurfaceType on the Right face of a part (-X direction]==],
	GetAccessories = [==[Returns a table of an avatar’s current accessories]==],
	BindToClose = [==[Binds a function to be called before the game shuts down. The game will wait for all functions bound to complete before shutting dow]==],
	Cross = [==[Returns the cross product of the two vectors]==],
	GetFriendsOnline = [==[Returns a dictionary of online friend]==],
	fromIsoDate = [==[Returns a DateTime from an ISO 8601 date-time string (in UTC)]==],
	Running = [==[Currently running while physics of parts in range are being calculated (e.g. After a jump, close to other players, ...)]==],
	AnalyticsService = [==[An internal service used by Roblox to collect analytics from <code>CoreScripts</code>]==],
	LeftLeg = [==[Determines the asset ID of the LeftLeg to be applied to the <code>Humanoid</code]==],
	FaceId = [==[Sets what side of the Parent the object is on]==],
	GetPartsObscuringTarget = [==[Returns an array of <code>BasePart</code> that are obscuring the lines of sight between the <code>Camera</code> <code>Camera.CFrame</code> and the <em>castPoints</em]==],
	Game = [==[Member must have no security permissions in order to be shown]==],
	Y = [==[Automatically resize element along Y-axis to fit child contents. Text Objects will only resize along the Y-axis if TextWrapped is enable]==],
	BindableFunction = [==[An object used to expose one function to other script]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	CharacterLeft = [==[The player moved left]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	LocalScript = [==[An object that runs Lua code on the client (player's computer) instead of the server]==],
	EnableDebugging = [==[Enables the DebuggerManager]==],
	UnbindActivate = [==[Unbind a <code>Enum.KeyCode</code> with a specific <code>Enum.UserInputType</code> from triggering <code>Tool.Activation</code> when bound with <code>ContextActionService:BindActivate</code]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	OverlapParams = [==[A container for parameters used in boundary-querying functions]==],
	SetImage = [==[If <i>actionName</i> key contains a bound action, then <i>image</i> is set as the image of the touch button]==],
	Head = [==[Determines the asset ID of the Head to be applied to the <code>Humanoid</code]==],
	TongueUp = [==[Bends the tongue u]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Size = [==[The size of the file on disk, in byte]==],
	MouseClick = [==[Fires when a player left clicks on the ClickDetecto]==],
	Head = [==[The CFrame of the user's head]==],
	ReflectionMetadataEnumItem = [==[Contains information about a specific EnumItem embedded within an Enu]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	AllowSleep = [==[When set to true, physically simulated objects will stop being simulated if they have little to no motion for a set period of time]==],
	TestService = [==[A service used by Roblox to run controlled tests of the engine. 
It is available for developers to use, to a limited degree]==],
	TextStrokeColor3 = [==[Determines the color of the text stroke (outline)]==],
	LocalTransparencyModifier = [==[Acts as a multiplier for the <code>Decal</code>'s <code>Decal.Transparency</code> property. The effects are only visible to the local player]==],
	Order = [==[Controls the composition order for layered clothing]==],
	Ninja = [==[The game's genre is set to Ninja]==],
	math = [==[A library of math functions]==],
	band = [==[Returns the bitwise <em>and</em> of its operands]==],
	RightLipStretcher = [==[Stretches the corners of the mouth apar]==],
	FrontSurfaceInput = [==[Determines the kind of input for the Front face of a part (-Z direction]==],
	LineThickness = [==[Determines the thickness of the boxes outlines, in stud]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Size = [==[The visualized size of the SlidingBallConstraint]==],
	Density = [==[The mass per unit volume of the part]==],
	GetWatchValue = [==[Returns the current value of a variable being watched by a <code>DebuggerWatch</code>]==],
	Quart = [==[Similar to Quad and Quint, but at a different speed (See animation)]==],
	BorderColor3 = [==[Determines the color of a <code>GuiObject</code> borde]==],
	AngularResponsiveness = [==[Specifies the sharpness of the angular servo motor in reaching the <code>CylindricalConstraint.TargetAngle</code>]==],
	PurchaseGranted = [==[The purchase has been processed and granted to the user who initiated the purchase request]==],
	Rotation = [==[Determines the range of rotations in degrees for a newly emit particle]==],
	PlayerToHideFrom = [==[Allows you to define a player who is unable to see the BillboardGui]==],
	SpecificGravity = [==[The ratio of the part's density to the density of water determined by the <code>BasePart.Material</code]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	GetRecommendedAssets = [==[Returns a list of recommendations based on the given <code>Enum.AssetType</code]==],
	Fire = [==[Causes the rocket to fly towards Target]==],
	GetNameFromUserIdAsync = [==[Sends a query to the Roblox website for the username of an account with a given <code>Player.UserId</code]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	GetConnectedParts = [==[Returns a table of parts connected to the the object by any kind of rigid joint]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	GetJoints = [==[Return all Joints or Constraints that is connected to this Part]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Room = [==[Sound reverb is changed to sound like the player is in a room]==],
	EmotesMenu = [==[Allows the Emotes Menu to be disabled using the existing <code>StarterGui.SetCoreGuiEnabled</code> API. Disabling all CoreGui types using <code>/Enum/CoreGuiType/All</code> would also disable the Emotes Menu]==],
	Sit = [==[Forces the character with the specified <a href="/api-reference/class/Humanoid" class="mw-redirect" title="Humanoid">Humanoid</a> to sit in the Seat]==],
	GetMetadata = [==[Gets the custom metadata set with this <code>DataStoreIncrementOptions</code> instance]==],
	ColorCorrectionEffect = [==[Adjusts color-related properties of the rendered world like saturation, tint, brightness, and contras]==],
	WindowFocusReleased = [==[Fires when the user stops interacting with the window of the PluginGui]==],
	PrivateServerOwnerId = [==[Describes the <code>Player.UserId</code> of the <code>Player</code> that owns the <code>Articles/Creating a VIP Server on Roblox|VIP server</code>, if the server is a VIP serve]==],
	Freefall = [==[The Humanoid is currently freefalling (jumped from a height)]==],
	SetAxis = [==[Sets the value of the Attachment's <code>Attachment.Axis</code]==],
	UnbindAction = [==[Unbind an action from input given its name]==],
	Distance = [==[Returns the distance between the given point and the closest point on the Ray]==],
	Model = [==[The asset is a model]==],
	Stop = [==[Stops the <code>Sound</code>. Sets <code>Sound.Playing</code> to false then sets <code>Sound.TimePosition</code> to 0]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	GetTagged = [==[Returns a table of objects in the game with a given ta]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	MenuClosed = [==[Fires when the user <b>closes</b> the Roblox coregui escape menu]==],
	Left = [==[The user swiped left]==],
	TongueDown = [==[Bends the tongue dow]==],
	Deactivate = [==[Simulates the deactivation of a Too]==],
	GetWaypoints = [==[Returns an array of points in the path]==],
	TextBoxFocused = [==[Fired when the client focuses on a <code>TextBox</code]==],
	OverlayTextureId = [==[The assetId of the overlay texture. The overlay covers Shirts, Pants, T-Shirts, and the <code>CharacterMesh.BaseTextureId</code>]==],
	BoolValue = [==[A container object for a single boolean value]==],
	IncrementAsync = [==[Increments the value of a key by the provided amount (both must be integers)]==],
	Force = [==[The strength and direction of the force]==],
	Torso = [==[A reference to a humanoid's root driving part]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	GetCurrentPage = [==[Returns the items on the current page. The keys in the item are determined by the source of this object]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	TextureLength = [==[Sets length of texture if <code>Trail.TextureMode</code> is <em>Wrap</em> or <em>Static</em>. If mode is <em>Stretch</em> sets number of times texture will repeat]==],
	BinaryStringValue = [==[An internal type of <code>StringValue</code> object, that stores a <code>BinaryString</code> value]==],
	StatusTip = [==[The description of the action, when viewing it from the keyboard shortcuts window in Roblox Studio]==],
	CornerRadius = [==[Determines the radius, in pixels, of the <code>UICorner</code> UIComponen]==],
	DataStoreKeyPages = [==[A special type of <code>Pages</code> object whose pages contain <code>DataStoreKey</code> instances]==],
	Enabled = [==[Toggles the visibility of the LayerCollector]==],
	SurfaceGui = [==[Container for GuiObjects that are rendered on the surface of a par]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	CanCollideWith = [==[Returns whether the parts can collide with each other]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Size = [==[The 3D size of the Region3]==],
	Enums = [==[A root access point of all <code>datatype.Enum</code>s]==],
	Opacity = [==[Determines how opaque smoke particles rende]==],
	All = [==[A global message that everyone can receive]==],
	Density = [==[Controls the particulate density of clouds]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	TextSize = [==[Determine the line height of text in pixels]==],
	Ubuntu = [==[<style>@import url('https://fonts.googleapis.com/css2?family=Ubuntu');</style>
<p class="text-nowrap" style={{fontFamily: 'Ubuntu', fontSize: '1.65em', margin: '5px 0px'}}>The quick brown fox jumps over the lazy dog.<br />0123456789 , : ! ? # % & ( ) - + ]==],
	Padding = [==[Determines the amount of free space between each element]==],
	FillBall = [==[Fills a ball of smooth terrain in a given spac]==],
	TargetPosition = [==[The target position a SlidingBallConstraint will attempt to translate to if its <code>SlidingBallConstraint.ActuatorType</code> is set to <code>Enum.ActuatorType</code>. Measured in studs]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	FirePlayerProgressionEvent = [==[Fire an event used to track player progression through the gam]==],
	Audio = [==[The asset is an audio clip]==],
	AngularSpeed = [==[The desired angular speed a HingeConstraint with <code>HingeConstraint.ActuatorType</code> set to <code>Enum.ActuatorType</code> will attempt to maintain while rotating towards its <code>HingeConstraint.TargetAngle</code>. Measured in radians/second]==],
	OverrideStarterScript = [==[Describes a path to a .lua file that will be ran in place of the default StarterScript]==],
	AssemblyRootPart = [==[A reference to the root part of the assembl]==],
	RobotoCondensed = [==[<style>@import url('https://fonts.googleapis.com/css2?family=Roboto+Condensed');</style>
<p class="text-nowrap" style={{fontFamily: 'Roboto Condensed', fontSize: '1.65em', margin: '5px 0px'}}>The quick brown fox jumps over the lazy dog.<br />0123456789 , : ! ? # % & ( ) - + ]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	CategoryFilter = [==[The category to filter the search by]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	InclinationAngle = [==[Direction of the rotation axis as an angle from the x-axis in the xy-plane of Attachment0. Value in [-180, 180]]==],
	LocalizedText = [==[Sets whether a <code>TextButton</code> should be <code>GuiBase2d.Localize</code> or not]==],
	ResponseDialog = [==[Sets what the NPC will say when the player chooses this DialogChoice]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	ForceField = [==[A <code>ForceField</code> protects a <code>Humanoid</code> from taking damage using the <code>Humanoid:TakeDamage</code> function, and protects <code>BasePart</code>s from having their joints broken due to an <code>Explosion</code>]==],
	Ray = [==[A line with a starting point that casts infinitely in a specific direction]==],
	BadgeService = [==[Provides information on badges and awards the]==],
	Unit = [==[A normalized copy of the vector]==],
	RightSurface = [==[Determines the type of surface for the Right face of a part (+X direction]==],
	LeftRight = [==[Controls whether the feature is shifted to the left, center, or right on the surface]==],
	GetTiltSpeed = [==[Returns the current ‘tilt’ speed of the <code>Camera</code]==],
	MouseButton2Down = [==[Fired when the mouse is in the right mouse down state on the GUI objec]==],
	MaxPlayersInternal = [==[<code>Players.MaxPlayers</code> for internal use]==],
	GraphicsParts = [==[Rendering of regular parts]==],
	DataStoreListingPages = [==[A special type of <code>Pages</code> object whose pages contain <code>DataStoreInfo</code> instances]==],
	CaptureFocus = [==[Forces the client to focus on the TextBox]==],
	KeyName = [==[The name of the key]==],
	HeadLocked = [==[Toggles whether the <code>Camera</code> will automatically track the head motion of a player using a VR devic]==],
	UsePartColor = [==[Sets whether the PartOperation can be recolored using the BrickColor property]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	ArialBold = [==[<p class="text-nowrap" style={{fontFamily: 'Arial', fontSize: '1.5em', fontWeight: 'bold', margin: '5px 0px'}}>The quick brown fox jumps over the lazy dog.<br />0123456789 , : ! ? # % & ( ) - + ]==],
	Timeout = [==[The maximum amount of time that tests are allowed to run for]==],
	AngularRestitution = [==[Restitution of the two limits, or how elastic they are. Value in [0, 1]]==],
	Vector3 = [==[A 3D value representing a direction and magnitude]==],
	Scriptable = [==[The player will not respond to default controls; any character movement must be defined in custom scripts]==],
	FireEvent = [==[Report a custom event to PlayFa]==],
	Rate = [==[How frequently the pitch variation changes]==],
	AreMechanismsShown = [==[When set to true, every individual mechanism of parts is given a unique color]==],
	BlockMesh = [==[The BlockMesh object applies a 'brick' mesh to the <code>BasePart</code> it is parented to. It behaves identically to a <code>SpecialMesh</code> with <code>SpecialMesh.MeshType</code> set to 'Brick']==],
	SurfaceTransparency = [==[Determines the transparency of the sphere's surface, similar to <code>BasePart.Transparency</code]==],
	TimePosition = [==[Shows the progress in seconds of the <code>Sound</code>. Can be changed to move the playback position of the <code>Sound</code> both before and during playback]==],
	Part0 = [==[The first part connected by the constraint]==],
	Abort = [==[Causes the Rocket to stop moving towards its target, making it fall]==],
	LeftSurface = [==[Determines the type of surface for the Left face of a part (-X direction]==],
	MoveTo = [==[Moves the <code>Model.PrimaryPart</code> to the given position. If a primary part has not been specified then the root part of the model will be used]==],
	AlignType = [==[The constraint's axis alignment type (parallel or perpendicular)]==],
	X = [==[Returns the <code>FloatCurve</code> controlling the X Euler angle channel. It is the first child instance of type <code>FloatCurve</code> named <code>X</code>. If none is found an empty <code>FloatCurve</code> is created]==],
	len = [==[Returns the length of a string]==],
	IsA = [==[Returns true if an <code>Instance</code>'s class matches or inherits from a given clas]==],
	OuterBox = [==[Dynamically sized collision boxes based on mesh size]==],
	AmbientReverb = [==[The ambient sound environment preset used by <code>SoundService</code>]==],
	NegateOperation = [==[Creates a CSG part that can be removed from other part via solid modelin]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	ChildRemoved = [==[Fires when a child is removed from this <code>Instance</code>]==],
	CollisionGroup = [==[The CollisionGroup used for the operation]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	lrotate = [==[Returns a number after its bits have been rotated to the left by a given number of times]==],
	GetFVariable = [==[Returns the value of an FVariable, if it exists]==],
	GetPrimaryPartCFrame = [==[Returns the <code>CFrame</code> of the <code>Model</code>'s <code>Model.PrimaryPart</code>. This function will throw an error if no primary part exists for the <code>Model</code>]==],
	CharacterWalkSpeed = [==[Determines the starting value of <code>Humanoid.WalkSpeed</code> for <code>Player.Character</code]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	FileMesh = [==[The FileMesh object applies a mesh to a <code>BasePart</code> when parented to it.  Its properties are inherited by the <code>SpecialMesh</code> object]==],
	MaxVelocity = [==[The maximum amount of velocity able to be reached]==],
	RaycastResult = [==[A container for results from a raycast operation]==],
	Level09 = [==[Graphic quality level 9]==],
	ReplaceMaterial = [==[Replaces the terrain of a material within a region with another materia]==],
	VideoCaptureEnabled = [==[Toggles whether or not video capture is enabled]==],
	OnClose = [==[Invoked before the game is shut down. When this callback returns, or the timeout period is hit, the game finishes shutting down]==],
	ComputerMovementMode = [==[The movement type in-use by the client via Computer input]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	StreamingMinRadius = [==[Minimum distance that content will be streamed to players with high priorit]==],
	GetTotalMemoryUsageMb = [==[Returns the total amount of memory being consumed by the current game session, in megabytes]==],
	VeryFast = [==[0.1 seconds per cycl]==],
	SideChain = [==[Applies a <a rel="nofollow" class="external text" href="https://en.wikipedia.org/wiki/Ducking">ducking</a> effect to the compressor sound effect.<br />
The behavior of the sidechain depends on the `Sound` or `SoundGroup` linked to it.]==],
	Angles = [==[Equivalent to fromEulerAnglesXYZ]==],
	UnderWater = [==[Sound reverb makes it sound like the player is under water]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	MemoryStoreQueue = [==[Provides access to a queue within MemoryStore]==],
	PhysicsSendKbps = [==[In a networked game, this describes roughly how many kilobytes of physics data are being sent by the current instance, per second]==],
	NumPlayers = [==[Returns the number of people in the server at the current tim]==],
	Fire = [==[Fires the <code>BindableEvent</code>, which fires the <code>BindableEvent.Event</code> even]==],
	RenameCollisionGroup = [==[Renames specified collision group]==],
	SaveData = [==[Used by an ancient data persistence method to save the user's dat]==],
	CanCollide = [==[Determines whether a part may collide with other parts]==],
	AddTag = [==[Assign a tag to an objec]==],
	FireServer = [==[Fires the <code>RemoteEvent.OnServerEvent</code> event on the server using the arguments specified with an additional player argument at the beginning]==],
	GuiLabel = [==[An abstract class for non-interactive 2D user interface element]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	MouseButton1Up = [==[Fired when the left mouse button is released on one of the GUI handles]==],
	DynamicThumbstick = [==[Change the movement controller to the dynamic thumbstick]==],
	ShoulderAccessory = [==[The asset is a shoulder accessory]==],
	FieldOfView = [==[Sets the angle of the <code>Camera</code> vertical field of vie]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	MeshCacheSize = [==[The size in bytes of the mesh cache.
Defaults to 32 MBs.]==],
	one = [==[A Vector2 with a value of 1 on every axis]==],
	GetAnimations = [==[This function returns an <code>InventoryPages</code> object which can be used to iterate over animations owned by a specific user]==],
	PreloadAsync = [==[Yields until all of the assets associated with the given <code>Instance</code> have loade]==],
	GuiBase2d = [==[GuiBase2d is an abstract class inherited by 2D GUI Objects]==],
	GetStudioUserId = [==[Returns the studio user’s userId if they're logged in, otherwise returns 0]==],
	EyesLookRight = [==[Moves gaze righ]==],
	LeftHand = [==[The CFrame of the user's left hand]==],
	TriggerOffset = [==[Sets the offset of the dialog relative to the dialog's parent]==],
	PanUnits = [==[Pans the <code>Camera</code> around the <code>Camera.Focus</code> in 45 degree increments around the Y axi]==],
	ldexp = [==[Returns x*2^e (e should be an integer)]==],
	TimeOfDay = [==[A 24 hour string representation of the current time of day used by <code>Lighting</code>]==],
	Lua = [==[The asset is Lua code, for example a <code>ModuleScript</code>]==],
	PartOperation = [==[An abstract class that all parts based on solid modeling inherit from]==],
	SurfaceColor = [==[A <code>BrickColor</code> version of <code>SelectionSphere.SurfaceColor3</code>]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Gravity = [==[Determines the acceleration due to gravity applied to falling <code>BasePart</code>s]==],
	FillEmptySpaceRows = [==[Determines whether cells are sized such that they occupy the vertical space of the parent UI element]==],
	Enabled = [==[Toggles whether or not this Constraint is enabled]==],
	ContentText = [==[A copy of <code>TextLabel.Text</code> that contains exactly what is being rendered by the <code>TextLabel</code>]==],
	JawLeft = [==[Moves mouth and jaw to the left (character left]==],
	SurfaceLight = [==[A light source that emits illumination of a specified color and brightness from a face for a specified range]==],
	Color3 = [==[A color value comprised of R, G, and B components]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	LimitsEnabled = [==[Sets whether the HingeConstraint will limit the range of rotation]==],
	g = [==[The green component of the BrickColor (between 0 and 1)]==],
	PhysicsEnvironmentalThrottle = [==[Controls the throttle rate of Roblox's physics engine]==],
	Cover = [==[Defines the cloud cover within the overall skyscape layer]==],
	StateEnabledChanged = [==[Fires when <code>Humanoid:SetStateEnabled</code> is called on the <code>Humanoid</code]==],
	GetTimeOfKeyframe = [==[Returns the time position of the first <code>Keyframe</code> of the given name in an <code>AnimationTrack</code>]==],
	DelayTime = [==[The amount of time that elapses before tween starts in seconds]==],
	InOut = [==[Controls how the Feature is positioned on it's parent's surface, in correspondence to the Feature's <code>Feature.LeftRight</code> and <code>Feature.TopBottom</code> properties]==],
	WalkToPoint = [==[The position that a humanoid is trying to reach, after a call to <code>Humanoid:MoveTo</code> is made]==],
	ChangeState = [==[Set the <code>Humanoid</code> to enter the given <code>Enum.HumanoidStateType</code]==],
	X = [==[Returns the FloatCurve controlling the X channel. It is the first child instance of type FloatCurve named <code>X</code>. If none is found an empty FloatCurve is created]==],
	Size48 = [==[Font size 48]==],
	ReflectionMetadataEvents = [==[Acts as a <code>Folder</code> containing information about events for a <code>ReflectionMetadataClass</code>, and should be parented to it.
<code>ReflectionMetadataMember</code>s that are parented to this object will be perceived as events under the class this is parented to]==],
	Decoration = [==[Enables or disables terrain decoration]==],
	ArePartsTouchingOthers = [==[Returns true if any of the given <code>BasePart</code> are touching any other part]==],
	FindPathAsync = [==[Finds a <code>Path</code> between the two provided point]==],
	LineForce = [==[A constraint used to apply a force along a line between two point]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	None = [==[Unknown UserInputType]==],
	LightInfluence = [==[Determines how much particles are influenced by the the environment ligh]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	random = [==[Returns a random BrickColor]==],
	SetAccessories = [==[Accepts a table that sets the accessories and related properties for an avatar]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	WorldOrientation = [==[Describes the orientation (in degrees) of the <code>Attachment</code> relative to the world, rather than the parent of the Attachment]==],
	CreateJoinAfterMoveJoints = [==[Updates all visible joints for the parts assigned by the <code>JointsService:SetJoinAfterMoveTarget</code> and <code>JointsService:SetJoinAfterMoveInstance</code> methods]==],
	DataStoreService = [==[A game service that gives access to persistent data storage across places in a gam]==],
	MouseMove = [==[Tries to move the currently dragged part to the point where MouseRay hits another part]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	MinValue = [==[The lowest number that the <code>DoubleConstrainedValue.Value</code> property can b]==],
	Decal = [==[The asset is a decal (image)]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Get = [==[Returns an array of currently selected <code>Instance</code>s in Roblox Studio]==],
	Head = [==[If the limb is a part of the Humanoid's Head]==],
	None = [==[The mouse icon behavior is not overridden - default behavior is used]==],
	CustomStatusAdded = [==[Fired when a status is added to the Humanoid]==],
	ParallelRamp = [==[The mesh is a parallel ramp]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Depth = [==[The intensity of the effect]==],
	ToEulerAnglesXYZ = [==[Returns approximate angles that could be used to generate the CFrame, if angles were applied in Z, Y, X order]==],
	ButtonChanged = [==[Fired when the pressed state of a bound button is changed. This event can be used in conjunction with <code>Controller:GetButton</code> to see whether a bound button is being pressed down or not]==],
	Depth = [==[Controls how intense the effect is]==],
	AnimationController = [==[An object which allows animations to be loaded and applied to a character or model in place of a <code>Humanoid</code> when a Humanoid is not neede]==],
	SparkleColor = [==[Determines the color of the sparkle particles]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Quint = [==[Similar to Quad and Quart, but at a different speed (See animation)]==],
	UpdateAsync = [==[Updates a key's value with a new value from the specified callback function]==],
	Brightness = [==[The intensity of illumination in the place]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Height = [==[The Y axis]==],
	ReplicationFocus = [==[Sets the part to focus replication aroun]==],
	TransformedCFrame = [==[Describes the combined <code>Attachment.CFrame</code> offset of the bone and the current animation offset in the bone local space]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Spread = [==[Determines how wide the sun rays will spread ou]==],
	FogStart = [==[The depth from the <code>Workspace.CurrentCamera</code>, in studs, at which fog begins to show]==],
	FloatCurveKey = [==[A time-value pair used with <code>FloatCurve</code> instances]==],
	EncounteredBreak = [==[Fired when a breakpoint is encountered by the script]==],
	SavePlaceAsync = [==[Saves the state of the current place]==],
	TweenSizeAndPosition = [==[Smoothly moves a GUI to a new size and positio]==],
	rad = [==[Returns the angle x (given in degrees) in radians]==],
	FarIntensity = [==[Intensity of the far field blu]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	create = [==[Creates a new coroutine, with body f. f must be a Lua function]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	GameInvitePromptClosed = [==[Fires when a player closes a game invite promp]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	SourceSansSemibold = [==[<style>@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:ital,wght@0,300;0,400;0,600;0,700;1,400');</style>
<p class="text-nowrap" style={{fontFamily: 'Source Sans Pro', fontSize: '1.7em', fontWeight: 600, margin: '5px 0px'}}>The quick brown fox jumps over the lazy dog.<br />0123456789 , : ! ? # % & ( ) - + ]==],
	ScreenOrientation = [==[Sets the default <code>Enum.ScreenOrientation</code> for users with mobile device]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	ApplySpecificImpulse = [==[Adds ''impulseWorld'' to the SkateboardPlatform's <code>BasePart.Velocity</code>]==],
	ExperimentalSolverIsEnabled = [==[Returns true if the game has the PGS Physics solver enabled]==],
	Sit = [==[Forces the character with the specified <a href="/api-reference/class/Humanoid" class="mw-redirect" title="Humanoid">Humanoid</a> to sit in the VehicleSeat]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	GetTeleportData = [==[Returns the teleport data stored in the <code>TeleportOptions</code> instance by <code>TeleportOptions:SetTeleportData</code]==],
	GetBoundActionInfo = [==[Get a table of information about a bound action given its name originally passed to <code>ContextActionService:BindAction</code]==],
	Glare = [==[When used with increased <code>Atmosphere.Haze</code>, specifies the glow/glare of the <code>Atmosphere</code> around the sun. More glare results in an increased effect of sunlight cast onto the sky and world]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	fromEulerAnglesYXZ = [==[Returns a rotated CFrame using angles (rx, ry, rz) in radians. Rotations are applied in Y, X, Z order]==],
	TouchEnabled = [==[Describes whether the user’s current device has a touch-screen availabl]==],
	GuiBase3d = [==[An abstract class for 3D GUI elements that are rendered in the world]==],
	GetTeams = [==[Returns a table containing the game's <code>Team</code> objects. Will only return <code>Team</code> objects that are parented to the <code>Teams</code> service]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	SliceCenter = [==[Sets the slice boundaries of a 9-sliced image]==],
	AdvancedDragger = [==[An unfinished advanced variant of the <code>Dragger</code> class]==],
	TopParamA = [==[Determines the first parameter for the SurfaceType on the Top face of a part (+Y direction]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	DockWidgetPluginGuiInfo = [==[DockWidgetPluginGuiInfo** is a datatype used to describe details for a <code>DockWidgetPluginGui</code>]==],
	SchedulerRate = [==[The current average rate of the task scheduler]==],
	PlaceId = [==[Describes the ID of the <code>Articles.Place</code> running on the serve]==],
	CFrame = [==[A datatype that represents both a 3D position and orientation]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	GetNonChatStringForBroadcastAsync = [==[Returns the text in a properly filtered manner for all users]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	SetMetadata = [==[Sets custom metadata to be associated with the key]==],
	Script = [==[All memory being manipulated and referenced by scripts]==],
	Fast = [==[Compute time using a faster, but less precise method]==],
	Fast = [==[0.25 seconds per cycl]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	InputFieldBackground = [==[The background color of input fields, like those found in the Explorer windo]==],
	FindFirstAncestorWhichIsA = [==[Returns the first ancestor of the <code>Instance</code> for whom <code>Instance:IsA</code> returns true for the given className]==],
	PlayerConnecting = [==[Fired when a player is connecting to the game]==],
	StreamingSounds = [==[Playback of sounds in-game]==],
	Y = [==[The y-coordinate of the Vector2int16]==],
	MaxDistance = [==[Sets the maximum distance a billboard can be from the camera and still be drawn]==],
	MoveDirection = [==[Describes the direction that the Humanoid is walking in, as a unit vector along the X/Z axis]==],
	UpdateAsync = [==[Refers to <code>GlobalDataStore.UpdateAsync</code>]==],
	FullscreenChanged = [==[Fires if the user's full screen mode is changed]==],
	Value = [==[Holds a reference to an instance]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Neutral = [==[Causes the dialog to have a blue bar on its left-hand side]==],
	NeckAccessory = [==[The asset is a neck accessory]==],
	Viewer = [==[Name and healthbar will be displayed based on the distance settings of the humanoid viewing them]==],
	AngularVelocity = [==[A <code>DataType.Vector3</code> force applied to achieve and maintain an angular velocity for the bod]==],
	Visible = [==[This property determines whether or not the visual effect of an <code>Explosion</code> is shown or not]==],
	Robux = [==[Use Robux]==],
	X = [==[Whether the X axis is enabled]==],
	GetPlayingAnimationTracks = [==[Returns an array of all <code>AnimationTrack</code> that are currently being played by the <code>AnimationController</code>]==],
	Stretch = [==[The image is stretched to fit within the element]==],
	FromNormalId = [==[Returns a Vector3 in the given direction]==],
	MouseLeave = [==[Fired when the mouse leaves the GUI handle]==],
	LimitsEnabled = [==[Sets whether the SpringConstraint enforces a minimum and maximum length]==],
	Disconnected = [==[The client is disconnected]==],
	WorldAxis = [==[Represents the direction of the <code>Attachment</code> <code>Attachment.Axis</code> relative to the world, as a unit <code>DataType.Vector3</code> with a length of ]==],
	CreateToolbar = [==[Creates a new <code>PluginToolbar</code> with the given name]==],
	IsScriptStackTracingEnabled = [==[Whether or not a stacktrace is displayed in the output for an error]==],
	ComputeRawPathAsync = [==[Computes and returns a <code>Path</code> between two <code>DataType.Vector3</code>. If the given MaxDistance is greater than 512, an error will be thrown. (MaxDistance is too large)]==],
	F1 = [==[Determines the face of a <code>Glue</code>]==],
	RichText = [==[Determines whether the TextButton renders the <code>TextButton.Text</code> string using rich text formatting]==],
	Zoom = [==[Camera will zoom in until there is nothing between the player and camera]==],
	Value = [==[Used to hold a double value]==],
	GetService = [==[Returns the service with the requested class name, creating it if it does not exist]==],
	R15 = [==[Indicates that a character is using the new R15 rig]==],
	fromEulerAnglesXYZ = [==[Returns a rotated CFrame using angles (rx, ry, rz) in radians. Rotations are applied in Z, Y, X order]==],
	TremoloSoundEffect = [==[Creates a trembling effect on a sound by varying the volume of the sound up and down]==],
	PreferredPlayers = [==[The preferred amount of players for this server]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Delay = [==[The amount of time between echoes]==],
	GetLastInputType = [==[Returns the <code>Enum.UserInputType</code> associated with the user’s most recent inpu]==],
	HeadColor3 = [==[Sets the color of this limb, as a <a href="/api-reference/datatype/Color3" title="API:Color3"><span>Color3</span></a>]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Texture = [==[A Texture object applies a repeating texture to the face of a <code>BasePart</code>]==],
	AlignPosition = [==[A constraint used to apply a force towards a locatio]==],
	TextTransparency = [==[Determines the transparency of rendered text]==],
	RelativeXY = [==[The scale of X and Y are independent]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	TouchRotate = [==[Fires when a user rotates two fingers on a <code>UserInputService.TouchEnabled</code> device - such as the screen of a mobile devic]==],
	AddWatch = [==[Adds a watch with the given expression]==],
	Tone = [==[Sets the color of the NPC's speech bubble]==],
	RegisterChatCallback = [==[Register a function to be called upon the invocation of some chat system event (<code>Chat:InvokeChatCallback</code>]==],
	AreAwakePartsHighlighted = [==[When set to true, parts that are actively being physically simulated will have a red outline]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	MoonTextureId = [==[The texture of the moon while using this skybox]==],
	Value = [==[The Color3 value of the keypoint]==],
	SourceLocaleId = [==[The locale of source string]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Size9 = [==[Font size 9]==],
	UserHeadCFrame = [==[Describes the orientation and position of a user's head, if they are actively using a virtual reality headse]==],
	PrivateServerId = [==[The private server id of the reserved server that the players are being teleported t]==],
	Idled = [==[Usually fired two minutes after the game engine classes the player as idle. Time is the amount of seconds since this point]==],
	MouseButton1Down = [==[Fired when the left mouse button goes down on one of the GUI handles]==],
	Texture = [==[The ContentId of the image to be applied by the <code>Decal</code>]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	GetDescendants = [==[Returns an array containing all of the descendants of the instanc]==],
	Bottom = [==[Alignment starts at the bottom of the GUI object]==],
	abs = [==[Returns the absolute value of x]==],
	JoinToOutsiders = [==[Creates joints between the specified <code>BasePart</code> and any touching parts depending on the parts' surfaces and the specified joint creation mode]==],
	GetEmotes = [==[Returns a dictionary of emotes that have been <code>HumanoidDescription:AddEmote</code> or <code>HumanoidDescription:SetEmotes</code> to this descriptio]==],
	Radius = [==[The radius of the sphere adornment]==],
	UpdatedTime = [==[The date and time the object was last updated]==],
	ToInstance = [==[The teleport destination is an instance of a place]==],
	JumpAnimation = [==[When this description is <code>Humanoid:ApplyDescription</code> to a <code>Humanoid</code>, this determines the <code>Animation.AnimationId</code> to play when its <code>Humanoid:GetState</code> is <code>enum.HumanoidStateType</code]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Insert = [==[Inserts <code>Instance</code> into Workspac]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	None = [==[Permission data is not available for the current user or group roleset]==],
	ReflectionMetadataProperties = [==[Acts as a <code>Folder</code> containing information about properties for a <code>ReflectionMetadataClass</code>, and should be parented to it.
<code>ReflectionMetadataMember</code>s that are parented to this object will be perceived as properties under the class this is parented to]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	TextTransparency = [==[Determines the transparency of rendered text]==],
	Mouse = [==[Legacy object that contains members useful for pointer inpu]==],
	FlatPucker = [==[Also known as lip tightener; brings the corners of the mouth inward and pressing the lips back against the teet]==],
	PluginDragDropped = [==[Fires when the user releases their mouse when hovering over a PluginGui during a drag operation started by <code>Plugin:StartDrag</code]==],
	DeviceRotationChanged = [==[Fired when a user rotates a device that has a gyroscop]==],
	FrictionWeight = [==[The importance of the part's friction when calculating the friction with the colliding part]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	DataCost = [==[The cost of saving the instance using data persistence]==],
	Mode = [==[The way the constraint determines its goal orientation]==],
	Level20 = [==[Graphic quality level 20]==],
	AutoLocalize = [==[Whether the prompt’s <code>ProximityPrompt.ActionText</code> and <code>ProximityPrompt.ObjectText</code> will be localized according to the <code>ProximityPrompt.RootLocalizationTable</code]==],
	GetDeviceAcceleration = [==[Returns an <code>InputObject</code> that describes the device's current acceleratio]==],
	DataStoreKey = [==[Object representing a key on a <code>DataStoreKeyPages</code> object]==],
	Quarry = [==[Sound reverb is changed to sound like the player is in a quarry]==],
	BreakJoints = [==[Goes through all <code>BasePart</code>s given, breaking any joints connected to these parts]==],
	EnableMouseLockOption = [==[Determines if a player can toggle mouse lock by default]==],
	GetUserCFrame = [==[Returns a <code>DataType.CFrame</code> describing the position and orientation of a specified virtual reality devic]==],
	zAxis = [==[A Vector3 with a value of 1 on the Z axis]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	LeftLipStretcher = [==[Stretches the corners of the mouth apar]==],
	Color = [==[The color of the constraint]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	AlternatingSupports = [==[Truss beams contain alternating supports]==],
	MaxForce = [==[Maximum absolute force that can be applied]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Enabled = [==[Sets whether or not the <code>SpawnLocation</code> is enabled. When disabled players cannot spawn at the <code>SpawnLocation</code> and the AllowTeamChangeOnTouch functionality is disabled]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Middle = [==[As <code>GuiObject.BorderSizePixel</code> increases, the border grows evenly inward and outward. The dimensions of the GuiObject's contents are reduced at a 1:1 ratio]==],
	Played = [==[Fires whenever the <code>VideoFrame.Video</code> is played using the <code>VideoFrame:Play</code> function or by setting <code>VideoFrame.Playing</code> to tru]==],
	Rotation = [==[The rotation of the part in degrees for the three axe]==],
	GetTouchingParts = [==[Returns a table of all <code>BasePart.CanCollide</code> true parts that intersect with this par]==],
	LeftUpperLipRaiser = [==[Raises the left upper lip away from the lower lip revealing the upper teet]==],
	BottomParamB = [==[Determines the second parameter for the SurfaceType on the Bottom face of a part (-Y direction]==],
	remove = [==[Removes the specified element from the array, shifting later elements down to fill in the empty space if possible]==],
	Air = [==[Applies to <code>Terrain</code> only]==],
	WoodPlanks = [==[Applies to <code>BasePart</code> and <code>Terrain</code>]==],
	GetMarkerReachedSignal = [==[This function returns an <code>DataType.RBXScriptSignal</code> that fires when a specified <code>KeyframeMarker</code> has been hit in an <code>Animation</code]==],
	FilterDescendantsInstances = [==[An array of objects whose descendants will be used in filtering raycasting candidates]==],
	Max = [==[Returns a <code>Vector3</code> where each component is the highest among the respective components of the provided <code>Vector3</code>s]==],
	Faces = [==[Sets which sides the GUI handles will appear]==],
	Enabled = [==[Determines whether sparkles are emi]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	RightArmColor = [==[Determines the <code>BodyColors.RightArmColor3</code> of a Humanoid when applie]==],
	ShowNativeInput = [==[If set to true, input native to the platform is used instead of Roblox's built-in keyboard]==],
	DidLoop = [==[This event fires when an <code>AnimationTrack</code> loops on the next update following the end of the previous animation loop]==],
	require = [==[Returns the value that was returned by the given ModuleScript, running it if it has not been run yet]==],
	GetMoonPhase = [==[Returns the moon's current phas]==],
	Transparency = [==[Determines how much a part can be seen through (the inverse of part opacity]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	PermissionLevelShown = [==[Sets the highest permission level that APIs have to have in order to be shown in the Object Browser.
See <code>Enum.PermissionLevelShown</code> for more info]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Transform = [==[Determines the current animated offset of the bone in its local spac]==],
	Controller = [==[The base class for controller objects, such as the <code>HumanoidController</code> object]==],
	Size100x100 = [==[Thumbnail resolution is 100 pixels x 100 pixels]==],
	GetFreeDecals = [==[Retrieves a list of Free Decals from the Catalo]==],
	RightSurfaceInput = [==[Determines the kind of input for the Right face of a part (-X direction]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	GetUserSets = [==[Returns an array of dictionaries, containing information about sets owned by the user]==],
	fromMatrix = [==[Returns a CFrame from a translation and the columns of a rotation matrix]==],
	ServerScriptService = [==[A container service for server-only <code>Script</code> objects]==],
	Snow = [==[Applies to <code>Terrain</code> only]==],
	ConnectionFailed = [==[Fired if the client fails to connect to the server]==],
	PlaceholderColor3 = [==[Sets the text color that gets used when no text has been entered into the TextBox yet]==],
	MaxTorque = [==[The maximum torque the constraint can use to reach its goal]==],
	Steer = [==[The direction of movement, tied to the keys A and D. Must be one of 1 (right), 0 (straight), or -1 (left). Will refresh back to 0 unless constantly set]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Enabled = [==[Toggles rendering of the <code>Clouds</code> object]==],
	BasePlayerGui = [==[The BasePlayerGui is an abstract class which the GUI drawing storage classes inherit fro]==],
	LocalizedText = [==[Sets whether a <code>TextLabel</code> should be <code>GuiBase2d.Localize</code> or not]==],
	CollisionGroup = [==[The CollisionGroup used for the operation]==],
	SetPlaceId = [==[Sets the <code>DataModel.PlaceId</code> of the current game instance to the given <em>placeId</em]==],
	AreJointCoordinatesShown = [==[When set to true, XYZ axes are rendered at the <code>BasePart.CFrame</code> of every part]==],
	CrackedLava = [==[Applies to <code>Terrain</code> only]==],
	Play = [==[The Play function starts the playback of its <code>Tween</code>. Note that if a tween has already begun calling Play will have no effect unless the tween has finished or has been stopped (either by <code>TweenBase:Cancel</code> or <code>TweenBase:Pause</code>)]==],
	Attack = [==[The time the effect takes to become active after its Threshold has be reached]==],
	Region3 = [==[A datatype that describes a rectangular volume in 3D space]==],
	ColorSequence = [==[A gradient of color values comprised of <code>datatype.ColorSequenceKeypoint</code>s]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Size = [==[Determines the radius of the bloom in pixel]==],
	Clone = [==[Returns a new Random object with the same state as the original]==],
	LimitsEnabled = [==[Determines whether <code>RodConstraint.LimitAngle0</code> and <code>RodConstraint.LimitAngle1</code> control the angles between the rod and the respective attachment]==],
	FrontAccessory = [==[The asset is a front accessory]==],
	DarkGray = [==[Returns the BrickColor Dark stone grey]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	PhysicsReceiveKbps = [==[In a networked game, this describes roughly how many kilobytes of physics data are being received by the current instance, per second]==],
	GetTouchpadMode = [==[Returns the VRTouchpadMode indicating the mode of a specified VRTouchpad]==],
	GetNetworkPing = [==[Returns the engine-calculated latency in second]==],
	maxTorque = [==[Determines how much force can be applied to each axi]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	IKMoveTo = [==[Moves the specified part to the specified location via inverse kinematics rather than moving it there directly, to ensure any joints, constraints, or collisions that part is participating in remain physically satisfie]==],
	Adornee = [==[The <a href="/api-reference/class/PVInstance" class="mw-redirect" title="PVInstance">PVInstance</a> the PVAdornment is attached to]==],
	DebuggingEnabled = [==[Whether the debugger is enabled or disabled]==],
	Pants = [==[The asset is a pants item]==],
	HttpCache = [==[A cache of HTTP responses]==],
	SetCell = [==[Sets the occupancy and material of a specific terrain voxel]==],
	StatusBar = [==[The color of the status bar shown at the bottom of Studio, if it is visibl]==],
	MaxAngularVelocity = [==[The maximum angular velocity the constraint can use to reach its goal]==],
	RemoveKeyAtIndex = [==[Removes a given number of Keys starting from a given index. Returns the number of keys that were removed]==],
	Y = [==[Canvas can only be scrolled along the Y axi]==],
	LocalizationTable = [==[A LocalizationTable is a database of translations. It contains source strings and translations for various languages]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	R = [==[The red value of the color]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Attachment0 = [==[Determines where the Trail will start drawing its segments]==],
	Glue = [==[Glue is a type of joint that can break when enough force is applie]==],
	ColorSequenceKeypoint = [==[A color and time value that represents a keypoint in a <code>datatype.ColorSequence</code>]==],
	Bottom = [==[Whether the bottom face is included]==],
	AutoJumpEnabled = [==[Determines whether the character of a player using a mobile device will automatically jump upon hitting an obstacle]==],
	Ambient = [==[The lighting hue applied to the area within the <code>ViewportFrame</code]==],
	MotorMaxAngularAcceleration = [==[The maximum angular acceleration of the motor in radians per second squared. Value in [0, inf)]==],
	Image = [==[The image to draw for the adornment]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	ModalEnabled = [==[Toggles whether Roblox's mobile controls are hidden on mobile device]==],
	Responsiveness = [==[Controls how quickly the constraint reaches its goal. Higher values will cause the attachment(s) to align more rapidly. Value can be between 5 and 200]==],
	ImageColor3 = [==[Determines how a rendered image will be colorize]==],
	Activate = [==[Sets the state of the calling plugin to activate]==],
	Studio = [==[Member must have security permissions &lt;= <strong>LocalUserSecurity</strong> to be shown]==],
	select = [==[Returns all arguments after the given index]==],
	BackAccessory = [==[A comma-separated list of asset IDs that will be added as <code>Accessory</code> to a <code>Humanoid</code> rig when <code>Humanoid:ApplyDescription</code>, usually those attached to its back (such as capes]==],
	BlurEffect = [==[Applies a blur to the entire game worl]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	LayerCollector = [==[An abstract class inherited by 2D Gui Objects which render <code>GuiObject</code> in layers]==],
	GetGamepadState = [==[Returns an array of <code>InputObject</code> for all available inputs on the given gamepad, representing each input’s last input stat]==],
	GamepadDisconnected = [==[Fires when a gamepad is disconnected from the client. Passes the <code>Enum.UserInputType</code> of the gamepad that was disconnecte]==],
	CameraSubject = [==[The <code>Humanoid</code> or <code>BasePart</code> that is the <code>Camera</code> subjec]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Animation = [==[An object that references an animation asset (AnimationId) which can be loaded by a <code>Humanoid</code> or <code>AnimationController</code]==],
	StarterPack = [==[A service-level container whose contents are copied into each <code>Player</code>'s <code>Backpack</code> when the player spawns. It is generally used to hold <code>Tools</code>, but is sometimes used to hold <code>LocalScript</code>s to ensure that each player gets a copy]==],
	AccessoryType = [==[Specifies the AccessoryType of the Accessory (eg. Hat, Tshirt, Waist)]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	RightArm = [==[Determines the asset ID of the RightArm to be applied to the <code>Humanoid</code]==],
	Intensity = [==[Determines the additive blending intensit]==],
	UICorner = [==[A UIComponent that will apply deformation to shapes of corners of its parent <code>GuiObject</code]==],
	TextEditable = [==[Determines whether the user can change the <code>TextBox.Text</code>]==],
	fmod = [==[Returns the remainder of the division of x by y that rounds the quotient towards zero]==],
	VideoAdClosed = [==[Historically fired when an `AdService video close]==],
	ReservedServerAccessCode = [==[The reserved server access code that indicates the reserved server that the teleport should be t]==],
	KeyframeSequenceProvider = [==[The KeyframeSequenceProvider is a service that is used to load and preview <code>KeyframeSequence</code>s. It includes a number of functions that are useful when working with <code>Animation</code>s]==],
	CustomPhysicalProperties = [==[Determines several physical properties of a par]==],
	GripForward = [==[One of the properties that specifies a Tool's orientation in a character's hand. This represents the R02, R12, and R22 values of the Grip CFrame's rotation matri]==],
	Size14 = [==[Font size 14]==],
	Coils = [==[The number of coils visualized on the SpringConstraint. This can only be set between 0 and 8]==],
	SetKeys = [==[Resets this curve keys using the RotationCurveKey array passed as argument]==],
	AllowInsertFreeModels = [==[Indicates whether ''Free Models'' can be inserted into the gam]==],
	Right = [==[The right face of a Part]==],
	identity = [==[An identity CFrame, one with no translation or rotation]==],
	RolloffScale = [==[Sets how fast 3D <code>Sound</code> volume attenuates, or 'rolls off']==],
	Origin = [==[A <code>DataType.CFrame</code> positioned at the <code>Workspace.CurrentCamera</code> and oriented toward the <code>Mouse</code>'s 3D position]==],
	FredokaOne = [==[<style>@import url('https://fonts.googleapis.com/css2?family=Fredoka+One');</style>
<p class="text-nowrap" style={{fontFamily: 'Fredoka One', fontSize: '1.6em', margin: '5px 0px'}}>The quick brown fox jumps over the lazy dog.<br />0123456789 , : ! ? # % & ( ) - + ]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Z = [==[The z-coordinate of the Vector3]==],
	Locked = [==[Determines whether a part is selectable in Studio]==],
	GetPointCoordinates = [==[Returns a table of <code>Path</code> instance]==],
	Completed = [==[The Tween has successfully completed]==],
	JobCount = [==[Returns the number of internal DataModel jobs actively being processed]==],
	TownAndCity = [==[The game's genre is set to Town and City]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	ClimbAnimation = [==[When this description is <code>Humanoid:ApplyDescription</code> to a <code>Humanoid</code>, this determines the <code>Animation.AnimationId</code> to play when its <code>Humanoid:GetState</code> is <code>enum.HumanoidStateType</code]==],
	Tab = [==[The color of tabs on the tab bar, like the ones opened when the script editor is opene]==],
	Resume = [==[Resumes the Lua Debugger if it paused]==],
	AmaticSC = [==[<style>@import url('https://fonts.googleapis.com/css2?family=Amatic+SC');</style>
<p class="text-nowrap" style={{fontFamily: 'Amatic SC', fontSize: '1.9em', margin: '5px 0px'}}>The quick brown fox jumps over the lazy dog.<br />0123456789 , : ! ? # % & ( ) - + ]==],
	GrenzeGotisch = [==[<style>@import url('https://fonts.googleapis.com/css2?family=Grenze+Gotisch');</style>
<p class="text-nowrap" style={{fontFamily: 'Grenze Gotisch', fontSize: '1.95em', margin: '5px 0px'}}>The quick brown fox jumps over the lazy dog.<br />0123456789 , : ! ? # % & ( ) - + ]==],
	ShadowColor = [==[This is supposed to change the color of player shadows, but currently doesn't do anything]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	GridSize = [==[Returns the grid size the user has set in studio under the Model tab]==],
	ThirdPartyPurchaseFinished = [==[Fires when a third-party purchase has been completed]==],
	WarnCount = [==[Measures how many warning calls have been recorded in the test session]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	TouchRotate = [==[Fires when the player performs a rotation gesture using two fingers on the UI elemen]==],
	Label = [==[The name of the navigation area inside or on top of the <code>Part</code> volum]==],
	Jura = [==[<style>@import url('https://fonts.googleapis.com/css2?family= Jura');</style>
<p class="text-nowrap" style={{fontFamily: 'Jura', fontSize: '1.75em', margin: '5px 0px'}}>The quick brown fox jumps over the lazy dog.<br />0123456789 , : ! ? # % & ( ) - + ]==],
	DataStoreVersionPages = [==[A special type of <code>Pages</code> object whose pages contain <code>DataStoreObjectVersionInfo</code> instances]==],
	Selected = [==[A boolean property which indicates whether the object has been selecte]==],
	DevComputerMovementMode = [==[Determines player's character movement mode when using a desktop version of Roblox]==],
	ClickableWhenViewportHidden = [==[Determines whether the button can be clicked when the game viewport is hidden, such as while editing a script in a different Studio ta]==],
	FindPartOnRay = [==[Returns the first <code>BasePart</code> or <code>Terrain</code> cell intersecting with the given <code>DataType.Ray</code]==],
	Skin = [==[Historically changed the colors of body parts to match the <code>Skin.SkinColor</code> property. Superceded by the <code>BodyColors</code> class]==],
	Basalt = [==[Applies to <code>Terrain</code> only]==],
	AreContactPointsShown = [==[When set to true, sphere adorns will be drawn at the contact points of each part where physics interactions are occurring]==],
	UserOwnsGamePassAsync = [==[Returns true if the player with the given <code>Player.UserId</code> owns the game pass with the given game pass ID]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	RibbonButton = [==[The background color of buttons on the ribbon men]==],
	OnScreenKeyboardVisible = [==[Describes  whether an on-screen keyboard is currently visible on the user's scree]==],
	WorldToCell = [==[Returns the grid cell location that contains the point <b>position</b>]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Title = [==[The text to be displayed when used as a sub men]==],
	RightLipCornerPuller = [==[Raises the corners of the mouth upwards in a smil]==],
	MaxTorque = [==[Maximum allowable torque provided by the sprin]==],
	MaxForce = [==[Maximum force the constraint can apply to achieve its goal. Only used if RigidityEnabled is false]==],
	MarketplaceService = [==[The game service responsible for in-game transaction]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	MaxVisibleGraphemes = [==[The maximum number of graphemes the <code>TextLabel</code> can show]==],
	Enabled = [==[Determines whether the two constrained parts will collide with each othe]==],
	RightHand = [==[Right hand]==],
	CellPadding = [==[Determines how much space there is between elements in the grid]==],
	MouseButton1Up = [==[Fired when the left mouse button is released on one of the GUI handles]==],
	Geometry = [==[An internal Roblox service which cannot be used by developers]==],
	NavigationEnhancers = [==[Gear with the 'Navigation' attribute.
<img alt="Navigation Attribute" src="/assets/bltb4bbcb97611d3ab5/GearType_Navigation.png" /]==],
	ElasticBehavior = [==[Determines how elastic scrolling behaves for touch inpu]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	GyroscopeEnabled = [==[Describes whether the user's device has a gyroscop]==],
	ScriptsDisabled = [==[Sets whether <code>BaseScript</code> objects run their code. Scripts that are already running won't stop running]==],
	Blue = [==[Blue chat color]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	VerticalScrollBarPosition = [==[Indicates the side that the vertical scrollbar will be located at]==],
	Constant = [==[The value of the first ke]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Enabled = [==[Determines whether the stroke in visibl]==],
	new = [==[Returns a PathWaypoint object from the position and action provided]==],
	LeftArmColor = [==[Determines the <code>BodyColors.LeftArmColor3</code> of a <code>Humanoid</code> when applie]==],
	AutoLocalize = [==[When set to true, localization will be applied to this GuiBase2d and its descendants based on the <code>GuiBase2d.RootLocalizationTable</code> specified for this GuiBase2d]==],
	ReleaseFocus = [==[Forces the client to unfocus the TextBox]==],
	VectorVelocity = [==[<code>datatype.Vector3</code> velocity value when <code>LinearVelocity.VelocityConstraintMode</code> is set to <strong>Vector</strong>]==],
	LinkedSource = [==[The content ID of an uploaded script. When set binds the uploaded code to the script's <code>Script.Source</code>]==],
	Salt = [==[Applies to <code>Terrain</code> only]==],
	TextStrokeTransparency = [==[Determines the transparency of the text stroke (outline)]==],
	MouseMoved = [==[Fires whenever a user moves their mouse while it is inside a GUI elemen]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Envelope = [==[The amount of variance allowed from the value]==],
	Max = [==[Returns a <code>Vector2</code> where each component is the highest among the respective components of the provided <code>Vector2</code>s]==],
	Texture = [==[Sets the texture to be displayed on the FloorWire]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Vulkan = [==[Vulkan (Khronos Group]==],
	Dot = [==[Returns a scalar dot product of the two vectors]==],
	Canceled = [==[The tween was cancelled before completio]==],
	settings = [==[Returns the GlobalSettings object, which can be used to access settings objects that configure Roblox Studio's behavior]==],
	NumberSequenceKeypoint = [==[A keypoint within a NumberSequence with a particular time, value, and envelope size]==],
	Vector3Value = [==[A container object for a single Vector3 value]==],
	LeftLeg = [==[A reference to the humanoid's <em>Left Leg</em> part]==],
	UseCSGv2 = [==[If set to true, version 2 of Roblox's CSG solver will be used instead of version 1]==],
	FollowUserId = [==[Describes the user ID of the player who was followed into a game by a player]==],
	Restitution = [==[The restitution coefficient of the cone constrain]==],
	DevTouchMovementMode = [==[Determines player's character movement mode when using a touch device]==],
	DebuggerBreakpoint = [==[Represents a breakpoint in Roblox's Lua Debugger.
This object cannot be created, but it can be retrieved from the <code>ScriptDebugger</code> class]==],
	Back = [==[Whether the back face is included]==],
	Red = [==[Red chat color]==],
	TextScaled = [==[Changes whether text is resized to fit the GUI object that renders it]==],
	LipPresser = [==[Presses the lips togethe]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	GetMaxCollisionGroups = [==[Returns the maximum number of collision groups]==],
	Invoke = [==[Calls the <code>BindableFunction.OnInvoke</code> callback of the <code>BindableFunction</code>, returning any values if there were an]==],
	CreatePlaceAsync = [==[Clones a place with placeId equal to given templatePlaceId]==],
	Value = [==[Used to hold a <a href="/api-reference/datatype/BrickColor" title="BrickColor">BrickColor</a> value]==],
	MinSize = [==[The smallest size in pixels the object is allowed to be]==],
	DiamondPlate = [==[Applies to <code>BasePart</code> only]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	SourceSansItalic = [==[<style>@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:ital,wght@0,300;0,400;0,600;0,700;1,400');</style>
<p class="text-nowrap" style={{fontFamily: 'Source Sans Pro', fontSize: '1.7em', margin: '5px 0px'}}><i>The quick brown fox jumps over the lazy dog.<br />0123456789 , : ! ? # % & ( ) - + =</i]==],
	Value = [==[The value of this key]==],
	AlwaysOnTop = [==[Determines whether the BillboardGui will always be rendered on top of other objects]==],
	SinglePlayer = [==[Only one player can interact with this dialog at a time. The conversation between the player and dialog can be seen by all players]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	MaxVelocity = [==[Maximum speed the Attachment can move when converging. Only used if RigidityEnabled is false]==],
	RegisterTouchCameraMovementMode = [==[Registers that a touch camera movement mode is available to be selected from the game menu]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	IsPlaying = [==[A read only property that returns true when the <code>AnimationTrack</code> is playing]==],
	FireLogEvent = [==[Fire a log event used to track errors and warnings experienced by player]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	ExplorerImageIndex = [==[A number index, which refers to a specific class icon]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	ElasticityWeight = [==[The importance of the part's elasticity when calculating the elasticity with the colliding part]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	SystemLocaleId = [==[The locale id that the local player has set for their operating system]==],
	In = [==[The easing style is applied in a forward direction. (See animation]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	RightMouseClick = [==[Fires when a player right clicks on the ClickDetecto]==],
	PlayerHasPass = [==[Returns <em>true</em> if the <code>Player</code> has the specified legacy game pass. Does not work with new game passe]==],
	ShowBoundingBoxes = [==[If set to true, renders bounding boxes around each individual rendered entity in the scene]==],
	Size32 = [==[Font size 32]==],
	Inset = [==[The object's located is inset from its parent's location]==],
	CreatedTime = [==[The date and time the object was created]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	TextYAlignment = [==[Determines the vertical alignment of rendered text]==],
	Camera = [==[A class which defines a view of the 3D game world]==],
	Fire = [==[A particle emitter with the visual aesthetic of fir]==],
	Name = [==[The name associated with the BrickColor]==],
	OffsetStudsU = [==[Determines the offset in studs of the rendered texture's horizontal coordinate]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Level03 = [==[Graphic quality level 3]==],
	CharacterUseJumpPower = [==[Determines the starting state of <code>Humanoid.UseJumpPower</code> for <code>Player.Character</code]==],
	Haze = [==[Defines the haziness of the <code>Atmosphere</code> with a visible effect both above the horizon and into the distance]==],
	IsTreeShown = [==[When set to true, the joint connections of each part, and the states of their underlying primitive components are visualized as a spanning tree]==],
	FrontParamB = [==[Determines the second parameter for the SurfaceType on the Front face of a part (-Z direction]==],
	R6 = [==[Indicates that a character is using the legacy R6 rig]==],
	NameDisplayDistance = [==[Sets the distance at which this player will see other Humanoid’s names. If set to 0, names are hidden]==],
	AnimationPlayed = [==[Fires when an <code>AnimationTrack</code> begins playing on the <code>Humanoid</code]==],
	stats = [==[Returns the Stats service]==],
	PluginManager = [==[Refers to the PluginManager, a deprecated singleton that was previously required to create plugins]==],
	Velocity = [==[Determines a part's change in position over tim]==],
	KeyUp = [==[Fires when a Key is release]==],
	DebuggerManager = [==[Refers to the DebuggerManager, which acts as an interface for the Lua debugger feature]==],
	LeftLowerLeg = [==[Reference to a Humanoid's LeftLowerLeg]==],
	Signals = [==[Events, signals, connections, etc]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	tostring = [==[Returns the provided value converted to a string, or nil if impossible]==],
	ScrollBar = [==[The ScrollingFrame will only be insetted if this scrollbar is being shown]==],
	Received = [==[Fired when the server has finished replicating the world to the client]==],
	Max = [==[The maximum value of the NumberRange]==],
	Color = [==[Determines the color of the smoke particle]==],
	GetAwardablePoints = [==[Returns the number of points the current game has available to award to player]==],
	AreUnalignedPartsShown = [==[When set to true, parts that aren't aligned on the 1x1x1 grid will be outlined yellow]==],
	MaxActivationDistance = [==[The maximum distance a Player’s <code>Player.Character</code> can be from the <code>ProximityPrompt</code> for the prompt to appea]==],
	TouchInputEnabled = [==[Controls touch scrolling, in case this is a non-interactive layout. Defaults to true]==],
	ActuatorType = [==[Sets whether the translation of the PrismaticConstraint is actuated and, if so, what kind of actuation]==],
	MouseEnter = [==[Fired when a mouse "enters" the GUI handle]==],
	print = [==[Prints all provided values to the output]==],
	AllowedGearTypeChanged = [==[Fires when SetGearSettings is called with a different value for <em>allowedGenres</em]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	CharacterRemoving = [==[Fired right before a player's character is removed]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	loadstring = [==[Returns the provided code as a function that can be executed]==],
	UWP = [==[The client is running on UWP]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	error = [==[Halts thread execution and throws an error]==],
	Stopping = [==[Skateboard is stopping, but still moving]==],
	GetUserInfosByUserIdsAsync = [==[Returns an array of user information including user name and display name]==],
	Right = [==[Whether the right face is included]==],
	AreBodyTypesShown = [==[When set to true, <code>Part</code> will be outlined with a specific color, depending on the state of its root simulation body]==],
	Lerp = [==[Returns a Vector3 linearly interpolated between this Vector3 and the given goal by the given alpha]==],
	TileSize = [==[Sets the tiling scale of the ImageButton]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	spawn = [==[Calls/resumes a function/coroutine immediately through the engine scheduler]==],
	Blacklist = [==[Every <code>BasePart</code> in the game will be considered <strong>except</strong> those that are descendants of objects in the filter list]==],
	IsSmooth = [==[Returns true if the current game is using the smooth terrain system]==],
	DoubleConstrainedValue = [==[An instance which is used to create a number value which can never be less than the MinValue or more than the MaxValu]==],
	RequiresHandle = [==[Determines whether a tool functions without a handl]==],
	CanUserChatAsync = [==[Will return false if the player with the specified <code>Player.UserId</code> is not allowed to chat because of their account settings]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	TopSurfaceInput = [==[Determines the kind of input for the Top face of a part (+Y direction]==],
	MeshId = [==[The <strong>MeshId</strong> is the content ID of the mesh that is to be displayed on the <code>MeshPart</code]==],
	getn = [==[Returns the number of elements in the table passed]==],
	ProcessReceipt = [==[A callback to process receipts of product purchases]==],
	LineHeight = [==[Scales the spacing between lines of text in the <code>TextBox</code]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	ApplyAtCenterOfMass = [==[When set to false, the force will be applied to the part at the Attachment0’s location. This means that if the attachment is not at the center of the part, it can create a torque on the par]==],
	Rect = [==[A value that represents a two-dimensional rectangle]==],
	freeze = [==[Makes the given table read-only]==],
	ClassName = [==[A read-only string representing the class this <code>Instance</code> belongs t]==],
	foreach = [==[Iterates over the provided table, passing the key and value of each iteration over to the provided function]==],
	find = [==[Returns the index of the first occurrence of <code>needle</code> within <code>haystack</code> starting from <code>init</code>]==],
	GetLargestCutoffDistance = [==[Returns how much the <code>Camera</code> needs to be pushed towards its <code>Camera.Focus</code> in order to make sure there is no obstructions between the <code>Camera.Focus</code> and <code>Camera.CFrame</code]==],
	concat = [==[Returns the given range of table elements as a string where each element is separated by the given separator]==],
	PackageId = [==[The id of the asset this package corresponds to]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	FontSize = [==[Determines the height in pixels of one line of tex]==],
	CanSetNetworkOwnership = [==[Checks whether you can set a <code>BasePart</code> network ownershi]==],
	TouchpadModeChanged = [==[Fires if the VRTouchpadMode of a VRTouchpad is changed]==],
	clear = [==[Sets all keys in the given table to nil]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Instance = [==[Holds the constructor for Instances]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	split = [==[Splits a string into parts based on the defined separator character(s), returning a table of ordered results]==],
	PhysicalProperties = [==[A container for properties that affect the physical behavior of <code>BasePart</code>s]==],
	CellSize = [==[Determines the size of each element in the grid]==],
	match = [==[Looks for the first match of pattern in the string s. If a match is found, it is returned; otherwise, it returns nil. A third, optional numerical argument, init, specifies where to start the search]==],
	rawget = [==[Gets the real value of table[index], bypassing any metamethods]==],
	LeftLeg = [==[The left leg BodyPart]==],
	RemoveAsync = [==[Removes the specified key while also retaining an accessible version]==],
	Attachment1 = [==[Determines where the Trail will start drawing its segments]==],
	TextBox = [==[A 2D user interface element that displays player-editable tex]==],
	Linux = [==[The client is running on a Linux Operating System (desktop)]==],
	Plate = [==[Increases by a rate of 1 along the x- and z- axes, 0.4 along the y-axis]==],
	BackgroundColor3 = [==[Determines a<code>GuiObject</code> background colo]==],
	new = [==[Creates a new TweenInfo from the provided parameters]==],
	Play = [==[Sets <code>VideoFrame.Playing</code> to true, playing the <code>VideoFrame.Video</code> from the current <code>Video.TimePosition</code]==],
	lower = [==[Returns a copy of a string with all uppercase letters changed to lowercase]==],
	Color = [==[The color of the emitted light]==],
	Brick = [==[Applies to <code>BasePart</code> and <code>Terrain</code>]==],
	gmatch = [==[Returns an iterator function that returns the next captures from pattern over the string <code>s</code> each time it's called]==],
	IsLoaded = [==[Indicates whether the Image has finished loading from the Roblox website]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	AutoAssignable = [==[This property determines whether <code>Player</code>s will be automatically placed onto the <code>Team</code> when joining. If multiple teams have this property set to true, Roblox will attempt to even the teams out when <code>Player</code>s are added]==],
	SelectionSphere = [==[Renders a 3D sphere around its <code>PVAdornment.Adornee</code]==],
	rawset = [==[Sets the real value of table[index], bypassing any metamethods]==],
	byte = [==[Returns the internal numerical codes of the characters s[i], s[i+1], ..., s[j]. The default value for i is 1; the default value for j is i. These indices are corrected following the same rules of function string.sub]==],
	char = [==[Converts zero or more codepoints to UTF-8 byte sequences]==],
	clock = [==[Returns a high-precision amount of CPU time used by Lua in seconds, intended for use in benchmarking]==],
	date = [==[Formats the given string with date/time information based on the given time (or if not provided, the value returned by os.time)]==],
	ToObjectSpace = [==[Returns a CFrame transformed from World to Object space]==],
	os = [==[This library provides time and date related functions]==],
	tanh = [==[Returns the hyperbolic tangent of x]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	round = [==[Returns the integer with the smallest difference between it and the given number]==],
	AddPose = [==[This function adds a <code>Pose</code> to the <code>Keyframe</code> by parenting it to the keyframe]==],
	GetAllBoundActionInfo = [==[Get a table of information about all bound actions (key is the name passed to <code>ContextActionService:BindAction</code>, value is a table from <code>ContextActionService:GetBoundActionInfo</code> when called with the key]==],
	pow = [==[Returns x^y]==],
	Disabled = [==[No change to gameplay due to streaming region availabilit]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Compatibility = [==[An approximation of Legacy rendering using newer Future is Bright technology. <a href="https://devforum.roblox.com/t/deprecating-lighting-legacy-introducing-lighting-compatibility/232667">More details</a>
<img alt="Compatibility" src="/assets/bltb74b240924f43951/Technology.Compatibility.jpg" /]==],
	Attach = [==[Camera moves with the subject at a fixed offset and will rotate as the subject rotates]==],
	Face = [==[Sets the side of the parent that the SurfaceLight comes from]==],
	TickCountPreciseOverride = [==[Sets the internal sampling method used to measure elapsed time with consistency across platforms]==],
	log10 = [==[Returns the base-10 logarithm of x]==],
	Max = [==[The upper bound of the Region3int16]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	floor = [==[Returns the largest integer smaller than or equal to x]==],
	tick = [==[Returns the amount of time in seconds since the Unix epoch according to this device's time]==],
	VelocitySpread = [==[Determines how offset a particle can be fired from the local emitter direction of its paren]==],
	LineJoinMode = [==[Determines how corners are interprete]==],
	SoundEffect = [==[SoundEffect is the base class that all other sound effects derive from. A SoundEffect can be applied to either a <code>Sound</code> or <code>SoundGroup</code> by being parented to either]==],
	Level07 = [==[Graphic quality level 7]==],
	UIBase = [==[UIBase is the base class for UI layout and constraint classes]==],
	deg = [==[Returns the angle x (given in radians) in degrees]==],
	Time = [==[The relative time at which the keypoint is located]==],
	DynamicRotate = [==[The base class for classic motor joints]==],
	Precise = [==[Specifically set a solid-modeled and mesh part’s level of detail regardless of its distance from the camera (lowest, medium, or highest]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Enabled = [==[Toggles the constraint on and off]==],
	RightArm = [==[The asset is a right arm]==],
	atan = [==[Returns the arc tangent of x (in radians)]==],
	LightingChanged = [==[This event fires when a <code>Lighting</code> property is changed or a <code>Sky</code> is added or removed from <code>Lighting</code>]==],
	BodyGyro = [==[Applies a torque to maintain a constant orientatio]==],
	Play = [==[Plays the <code>AnimationTrack</code>. Once called an <code>AnimationTrack</code> will play with the specified fadeTime, weight and speed]==],
	GameplayPaused = [==[Whether player client-side gameplay is currently pause]==],
	PromptPurchase = [==[Used to prompt a user to purchase an item with the given assetId]==],
	ApplicationUrlEncoded = [==[The HTTP request data is URL encode]==],
	GetItemDetails = [==[Returns the item details for the given ite]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	AssetTypes = [==[An array containing <code>enum.AssetType</code> values to filter the search by]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	resetmemorycategory = [==[Resets the tag assigned by <code>debug.setmemorycategory</code> to the automatically assigned value (typically, the script name)]==],
	MaxSlopeAngle = [==[The maximum slope angle that a humanoid can walk on without slippin]==],
	setmemorycategory = [==[Assign a custom tag to the current thread's memory category in the Developer Console]==],
	profileend = [==[Stops profiling for the most recent MicroProfiler label as opened by debug.profilebegin]==],
	InvokeServer = [==[Calls the method bound to the RemoteFunction by <code>RemoteFunction.OnServerInvoke</code>. Use from a <code>LocalScript</code>. Returns what <code>RemoteFunction.OnServerInvoke</code> returns]==],
	UnixTimestamp = [==[The number of seconds between January 1st, 1970 at 00:00 UTC (the Unix epoch)]==],
	Automatic = [==[Dynamically control a solid-modeled and mesh part’s level of detail depending on its distance from the camera (see table above]==],
	PlaneVelocity = [==[<code>datatype.Vector2</code> value of the velocity in each tangent direction of the plane, when <code>LinearVelocity.VelocityConstraintMode</code> is set to <strong>Plane</strong>]==],
	debug = [==[This library provides functions useful for debugging and profiling code]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Default = [==[The current default is <b>Fixed</b>]==],
	yield = [==[Suspends execution of the coroutine]==],
	Animation = [==[The <code>Animation</code> object that was used to create this <code>AnimationTrack</code>]==],
	status = [==[Returns the status of coroutine co as a string]==],
	MainBackground = [==[The primary background color used by the ribbon bar and window]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	WaitForChild = [==[Returns the child of the <code>Instance</code> with the given name. If the child does not exist, it will yield the current thread until it does]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Terrain = [==[A reference to the <code>Terrain</code> object parented to the <code>Workspace</code]==],
	offset = [==[Returns the position (in bytes) where the encoding of the n-th codepoint of s (counting from byte position i)
starts]==],
	extract = [==[Extract a range of bits from a number and return them as an unsigned number]==],
	CylinderMesh = [==[The CylinderMesh object applies a 'cylinder' mesh to the <code>BasePart</code> it is parented t]==],
	Throttle = [==[The direction of movement, tied to the keys W and S. Must be an integer 1 (forward), 0 (null), or -1 (reverse). Will refresh back to 0 unless constantly set]==],
	UserSettings = [==[Returns the UserSettings object, which is used to read information from the current user's game menu settings]==],
	Weld = [==[Makes the side appear with thick diagonal "X"]==],
	PaddingRight = [==[The padding to apply on the right side relative to the parent's normal size]==],
	TargetAngle = [==[Target angle (in degrees) between the reference axis and the secondary axis of Attachment1 around the rotation axis. Value in [-180, 180]]==],
	Segments = [==[Sets how many straight segments the <code>Beam</code> is made up of]==],
	PivotTo = [==[Transforms the <code>PVInstance</code> along with all of its descendant <code>PVInstance</code> such that the pivot is now located at the specified <code>datatype.CFrame</code>]==],
	Attachment1 = [==[The <code>Attachment</code> that is connected to <code>Constraint.Attachment0</code]==],
	ListKeysAsync = [==[Returns a <code>DataStoreKeyPages</code> object for enumerating through keys of a data store]==],
	Touch = [==[The touchpad is treated as ButtonB if it is the left touchpad, or ButtonA if it is the right touchpad]==],
	Right = [==[The grid is placed starting along the left edge of the parent, extending to the left according to the size of the grid relative to the x-axis]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Touch = [==[A tap on the screen from a mobile device]==],
	LeftTrigger = [==[Left motor trigger]==],
	Small = [==[Small motor]==],
	Right = [==[Right side of the <code>ScrollingFrame</code>]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Bottom = [==[Bottom of the grid]==],
	Size36 = [==[Font size 36]==],
	Vector = [==[Sets the <code>LinearVelocity</code> object to constrain its velocity to a vector]==],
	Plane = [==[Sets the <code>LinearVelocity</code> object to constrain its velocity to a plane]==],
	Line = [==[Sets the <code>LinearVelocity</code> object to constrain its velocity to a line]==],
	Gamepad6 = [==[Input from the 6th plugged in Gamepad]==],
	Gamepad1 = [==[Input from the 1st plugged in Gamepad]==],
	MouseWheel = [==[The mouse wheel]==],
	MouseButton3 = [==[The middle mouse button]==],
	PGSIsEnabled = [==[Returns true if the game has the PGS Physics solver enabled]==],
	UIGridStyleLayout = [==[The base class for grid style UI layouts]==],
	LowGain = [==[The output volume of frequencies lower than 400 Hz]==],
	Accept = [==[A player accepts a friend request]==],
	WorldPosition = [==[Describes the position of the attachment relative to the world, rather than the parent of the <code>Attachment</code]==],
	ShouldersAccessory = [==[A comma-separated list of asset IDs that will be added as <code>Accessory</code> to a <code>Humanoid</code> rig when <code>Humanoid:ApplyDescription</code>, usually those attached to its shoulders (such as shoulder-mounted critters]==],
	Size24 = [==[Font size 24]==],
	Funny = [==[The game's genre is set to Funny]==],
	UiMessageInfo = [==[The message info]==],
	DPad = [==[Change the movement controller to the DPad]==],
	PhysicalProperties = [==[A container for properties that affect the physical behavior of <code>BasePart</code>s]==],
	SmoothingAngle = [==[An angle in degrees which affects the smooth shading of a solid modeled part]==],
	Steer = [==[The direction of movement, tied to the keys A and D. Must be 1 (right), 0 (straight), or -1 (left). Will refresh back to 0 unless constantly set]==],
	AvatarThumbnail = [==[The returned thumbnail shows the entire body of the user's avatar]==],
	Size150x150 = [==[Thumbnail resolution is 150 pixels x 150 pixels]==],
	LastInputTypeChanged = [==[Fires when the client's <code>Enum.UserInputType</code> is change]==],
	GetTopbarTransparency = [==[Returns the transparency of the Topbar]==],
	Center = [==[Aligned starts at the center of the GUI object and spreads equally left and right]==],
	Wrap = [==[The texture will be tiled as the length of the trail changes, but the textures will remain stationary relative to their attachments.
<img alt="The Wrap TextureMode" src="/assets/bltc03da7a8d8b16fb1/Enum_TextureMode_Wrap.gif" /]==],
	Stretch = [==[The texture will be stretched out based on the lifetime of the trail, and will shrink inwards if the trail stops moving.
<img alt="The Stretch TextureMode" src="/assets/bltf90e4251e486066f/Enum_TextureMode_Stretch.gif" /]==],
	BrickColor = [==[A data type that provides a predefined list of named colors]==],
	ToReservedServer = [==[The destination of the teleport is a reserved server (a place instance that is reserved for a select group of players)]==],
	AutoRotate = [==[AutoRotate sets whether or not the Humanoid will automatically rotate to face in the direction they are moving in]==],
	ToPlace = [==[The teleport destination is a place (no specific instance)]==],
	GoodbyeChoiceActive = [==[Toggles whether the goodbye option will be displayed]==],
	Dragger = [==[A helper object used to create tools that can drag part]==],
	Default = [==[Standard throttling]==],
	Failed = [==[The teleport failed]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	RequestedFromServer = [==[The server has requested that the client teleport]==],
	Success = [==[The teleport was successful]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Top = [==[The widget will appear docked above the game scree]==],
	ExposureCompensation = [==[The exposure compensation valu]==],
	Color = [==[Sets color used for the debug rendering. See <code>WrapTarget.DebugMode</code]==],
	Voxel = [==[Future-Is-Bright lighting features. Shadows are created using a 4x4x4 voxel map.
<img alt="Voxel" src="/assets/blt87d45df6d6aacbdc/Technology.Voxel.jpg" /]==],
	RightHand = [==[Reference to a Humanoid's RightHand]==],
	Up = [==[The user swiped up]==],
	PolicyService = [==[Helps you build gameplay components for international compliance]==],
	SmoothNoOutlines = [==[Same as Smooth, but removes the <em>outlines</em> of the surfac]==],
	Motor = [==[Acts the same as a Hinge, but has a grey ring around it and automatically rotates any part connected to it, however, using <code>HingeConstraint</code> to join parts is preferre]==],
	Hinge = [==[Makes the side appear with a yellow hinge. Any part connected to this hinge will stick to the side and rotate using physics, however, using <code>HingeConstraint</code> to join parts is preferre]==],
	RightTangent = [==[The tangent to the right of this key]==],
	MaxPlayers = [==[The maximum amount of players that can be in this server]==],
	CorrodedMetal = [==[Applies to <code>BasePart</code> only]==],
	TextYAlignment = [==[Determines the vertical alignment of rendered text]==],
	TouchSwipe = [==[Fired when a user swipes their fingers on a <code>UserInputService.TouchEnabled</code> device - such as the screen of a mobile devic]==],
	TeleportToPrivateServer = [==[Teleport a group of <code>Player</code> to a reserved server created using <code>TeleportService:ReserveServer</code]==],
	Smooth = [==[Makes the side appear without any surface detail (except for <em>outlines</em>]==],
	InterpolationFinished = [==[Fired when the <code>Camera</code> has finished interpolating using<code>Camera:Interpolate</code]==],
	SteppingMotor = [==[Functions identically to a motor. It may have functioned differently in the past, but that functionality no longer seems to exist]==],
	BridgeStyleSupports = [==[Truss beams contain bridge style supports]==],
	Part1 = [==[The first <code>BasePart</code> that the constraint connect]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Horizontal = [==[Scrolling along the X-axis (fixed Y-Axis)]==],
	SkyboxBk = [==[The URL link to a picture for the back surface of the sky]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	ScheduleNotification = [==[<b>(UNIMPLEMENTED)</b]==],
	SteerFloat = [==[Functions identically to <code>VehicleSeat.Steer</code>, but the value is not an integer]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	RemoveEmote = [==[Removes any emotes that have been added under the given nam]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	PromptShown = [==[Triggers client-side when a prompt becomes visibl]==],
	Character = [==[This should run after Camer]==],
	Draggable = [==[Determines whether a <code>GuiObject</code> (and its descendants) can be dragged around the scree]==],
	Y = [==[The Y axi]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	GetGuiObjectsAtPosition = [==[Returns a list of visible <code>GuiObject</code> occupying the given point on the scree]==],
	Enabled = [==[Sets whether the joint is active or no]==],
	Arial = [==[<p class="text-nowrap" style={{fontFamily: 'Arial', fontSize: '1.5em', margin: '5px 0px'}}>The quick brown fox jumps over the lazy dog.<br />0123456789 , : ! ? # % & ( ) - + ]==],
	EmulatorBar = [==[The color of the bar shown when the mobile emulator is activ]==],
	GameSettingsTooltip = [==[The color of tooltips in the game settings windo]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	RotSpeed = [==[Determines the range of angular speeds emitted particles, measured in degrees per secon]==],
	Head = [==[The mesh is the default <code>Humanoid</code> head mesh]==],
	PromptCreateOutfitCompleted = [==[Fires when the PromptSaveOutfit operation is complete]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	SetPosition = [==[Given the name of a bound action with a touch button, sets the position of the button within the ContextButtonFrame]==],
	FrontSurface = [==[Determines the type of surface for the Front face of a part (-Z direction]==],
	IsSleepAllowed = [==[Sets whether or not physics objects will be allowed to fall asleep while the test simulation is running]==],
	Active = [==[Indicates if the WeldConstraint is currently active in the worl]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Neon = [==[Applies to <code>BasePart</code> only]==],
	FilterType = [==[Determines how the <code>FilterDescendantsInstances</code> list will be used]==],
	StepOut = [==[Performs a <a href="/articles/Lua-debugger" class="mw-redirect" title="Lua Debugger">step out</a> operation on the Lua Debugger]==],
	CancelAllNotification = [==[<b>(UNIMPLEMENTED)</b]==],
	wait = [==[Yields the current thread until the specified amount of time in seconds have elapsed, with throttling]==],
	Begin = [==[Indicates the beginning of progressio]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	NextSelectionDown = [==[Sets the GuiObject which will be selected when the Gamepad selector is moved in this directio]==],
	BottomRight = [==[Grid starts in bottom right corner]==],
	LinearSquare = [==[Volume attenuates between <code>Sound.EmitterSize</code> and <code>Sound.MaxDistance</code> with a linear squared relationshi]==],
	StudsOffsetWorldSpace = [==[Determines how the BillboardGui is offset from its <code>BillboardGui.Adornee</code>, relative to the global axes and units in studs]==],
	MaxVelocity = [==[The maximum velocity the motor can use to reach <code>Motor.DesiredAngle</code> measured in radians per physics frame (1/60th of a second)]==],
	PromptAllowInventoryReadAccess = [==[Prompts the <code>Players.LocalPlayer</code> to allow the developer to read what items the user has in their inventory and other avatar editor related informatio]==],
	LayoutOrder = [==[Elements will be ordered by LayoutOrder in ascending order (e.g. 0 will be placed before 1)]==],
	SunRaysEffect = [==[Renders dynamic rays from the su]==],
	Position = [==[Determines the goal position towards which force will be applie]==],
	Foil = [==[Applies to <code>BasePart</code> only]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Name = [==[Elements will be ordered by their name in alphabetical order (e.g. Apple will be placed before Banana)]==],
	SetJoinAfterMoveInstance = [==[Sets the PVInstance that will be connected with the target PVInstance specified by <code>JointsService:SetJoinAfterMoveTarget</code>]==],
	XY = [==[Canvas can be scrolled along both X and Y axe]==],
	GetRootPart = [==[Returns the base part of an assembly of part]==],
	bxor = [==[Returns the bitwise exclusive or of its operands]==],
	Elastic = [==[Moves as if the GUI element is attached to a rubber band (See animation)]==],
	SetNavigationGamepad = [==[Sets whether or not the specified <code>Enum.UserInputType</code> can move the <code>GuiObject</code> navigato]==],
	LandscapeLeft = [==[A preference where the game is displayed landscape (horizontally) with the bottom of the device on the left side of the screen]==],
	Crop = [==[The image is cropped to fit within the element]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Fit = [==[The image is scaled fit within the element X or Y dimension (whichever fits first)]==],
	Tile = [==[The image is is tiled to fit within the element. For example, if the element is twice the X dimension of the image, the image will appear twice (2 tiles)]==],
	Slice = [==[The part of the image contained within the <code>ImageLabel.SliceCenter</code> or <code>ImageButton.SliceCenter</code> maintains its aspect ratio within the element, while everything outside is stretched and used as borders]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	WatchRemoved = [==[Fired when an expression watch is removed from this script debugger]==],
	InverseTapered = [==[Volume attenuates between <code>Sound.EmitterSize</code> and <code>Sound.MaxDistance</code> with a linear relationshi]==],
	Linear = [==[A hybrid model. Follows the Inverse model when close to <code>Sound.EmitterSize</code> and the Linear Square model when close to <code>Sound.MaxDistance</code]==],
	BehaviorType = [==[Sets whether the Dialog can be used by multiple players at once]==],
	ActuatorType = [==[Sets whether the rotation of the HingeConstraint is actuated and, if so, what kind of actuation]==],
	now = [==[Returns a DateTime representing the current moment in time]==],
	ColorMap = [==[Determines the color and opacity of the surfac]==],
	MotorMaxTorque = [==[The maximum torque the motor can apply to achieve the target angular velocity. The units are mass * studs^2 / second^2. Value in [0, inf)]==],
	DefaultScriptFileDir = [==[Specifies the default prompt directory that will be opened when the user activates the <i>Execute Script</i> button in Roblox Studio]==],
	ChatRed = [==[Causes the frame to appear similar to a Dialog with its Tone property set to "Enemy." Like "ChatBlue" and "ChatGreen" this has a padding of fifteen pixels on all sides]==],
	SewerPipe = [==[Sound reverb is changed to sound like the player is in a sewer pipe]==],
	City = [==[Sound reverb is changed to sound like the player is in city]==],
	Forest = [==[Sound reverb is changed to sound like the player is in a forest]==],
	StoneCorridor = [==[Sound reverb is changed to sound like the player is a stone corridor]==],
	Hallway = [==[Sound reverb is changed to sound like the player is in a hallway]==],
	Arena = [==[Sound reverb is changed to sound like the player is in an arena]==],
	ApplyAngularImpulse = [==[Apply an angular impulse to the assembl]==],
	Cave = [==[Sound reverb is changed to sound like the player is in a cave]==],
	nfcnormalize = [==[Converts the input string to Normal Form C]==],
	ManualSurfaceJointInstance = [==[ManualSurfaceJointInstance is the base class for <code>ManualGlue</code> and <code>ManualWeld</code>]==],
	CreateLocalPlayer = [==[Used by the game to create the <code>Player.LocalPlayer</code]==],
	ClearAllChildren = [==[This function destroys all of an <code>Instance</code>'s children]==],
	IsVibrationSupported = [==[Returns true if the specified <code>Enum.UserInputType</code> supports haptic feedbac]==],
	Performance = [==[Push performance as much as possible, trying to maintain quality if possible, and discarding appearance if that's necessary to reach performance. This means that the performance will always be excellent, but mesh visuals may be affected negativel]==],
	Benchmark = [==[Dynamically decide between using ''Fast'' and ''Precise'' depending on performance]==],
	Whitelist = [==[Only <code>BasePart</code> which are descendants of objects in the filter list will be considered in the raycast operation]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Level19 = [==[Graphic quality level 19]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	LoadCharacterWithHumanoidDescription = [==[Spawns an avatar so it has everything equipped in the passed in <code>HumanoidDescription</code]==],
	Level17 = [==[Graphic quality level 17]==],
	Level15 = [==[Graphic quality level 15]==],
	UserChoice = [==[The player's character will moved based on the user's settings]==],
	Level12 = [==[Graphic quality level 12]==],
	TextWrap = [==[Determines if text wraps to multiple lines within the UI element space, truncating excess tex]==],
	Level08 = [==[Graphic quality level 8]==],
	PlayerRemoved = [==[Fires whenever a <code>Player</code> is removed from a <code>Team</code>. This can be due to the <code>Player</code> leaving the game, <code>Player.Neutral</code> being set to true or the <code>Player</code> joining a different team]==],
	Level05 = [==[Graphic quality level 5]==],
	Level01 = [==[Graphic quality level 1 - the lowest quality level]==],
	Custom = [==[Custom prompt UI style as set by the developer. For more information, see <code>ProximityPrompt.Style</code]==],
	RightVector = [==[The right-direction component of the CFrame's orientation]==],
	AlwaysShow = [==[This prompt will always show when in range and visibl]==],
	R6 = [==[The R6 character rig]==],
	OnePerButton = [==[Only one prompt will be shown with this settin]==],
	Close = [==[Fires when the current place is exited]==],
	JumpHeight = [==[Provides control over the force with which a <code>Humanoid</code> jump]==],
	GetPartsInPart = [==[Returns an array of parts whose occupied space is shared with the given par]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	PositionAlignmentMode = [==[The PositionAlignmentMode Enum is used to select the number of <code>Attachment</code>s used in an alignment]==],
	Folder = [==[A simple container used to hold and organize Roblox objects. Unlike other container classes like <code>Model</code>, it offers no additional functionalit]==],
	TwoAttachment = [==[Use two attachments]==],
	OneAttachment = [==[Use one attachment]==],
	Style = [==[Sets what the frame looks like from a selection of pre-determined styles]==],
	LogService = [==[A service that allows you to read outputted tex]==],
	Ratio = [==[The ratio between the <code>CompressorSoundEffect.SideChain</code> sound effect, and this sound effect]==],
	AttachmentPoint = [==[The exact CFrame of the Accoutrement]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Whisper = [==[A whispered message only the person it's whispered to can receive]==],
	DataStorePages = [==[A <code>Pages</code> object that allows iteration through <code>OrderedDataStore</code> key/value pairs]==],
	Delayed = [==[The tween is delayed]==],
	SteamOS = [==[The client is running on Steam]==],
	NoOcclusion = [==[Do not occlude (hide) any humanoid names]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	delay = [==[Schedules a function/coroutine to be called/resumed on the next Heartbeat after the given duration (in seconds) has passed, without throttling]==],
	WiiU = [==[The client is running on a Wii U (console)]==],
	XBox360 = [==[The client is running on an XBox 360 (console)]==],
	PS4 = [==[The client is running on a PS4 (console)]==],
	Deprecated = [==[Whether or not this item is deprecated]==],
	SetWaterCell = [==[Sets the specified terrain voxel's material to ''Water'' and sets its occupancy to 1]==],
	Load = [==[Loads a Roblox Place File from a URL]==],
	LoadAnimation = [==[Loads an <code>Animation</code> onto an <code>Animator</code>, returning an <code>AnimationTrack</code>. Used to load animations on locally controlled models (such as player characters) from the server]==],
	World = [==[The constraint is expressed relative to the game worl]==],
	RotationCurve = [==[A sorted list of <code>RotationCurveKeys</code]==],
	LocaleId = [==[The locale of translated string]==],
	Adaptive = [==[The engine attempts to assign optimal simulation rates for individual assemblies of either 240&nbsp;Hz, 120&nbsp;Hz, or 60&nbsp;Hz. This setting is optimized for performance]==],
	LoadCharacterAppearance = [==[Whether or not the appearance of a player's character should be loaded]==],
	TeamColor = [==[The Team that owns the <code>FlagStand</code>. Corresponds with the TeamColors in the <code>Teams</code> service]==],
	Roblox = [==[Member is shown no matter what security it has]==],
	InStudioMode = [==[Returns true if the client's game session is in Roblox Studio]==],
	RobloxScript = [==[Member must have security permissions &lt;= <strong>RobloxScriptSecurity</strong> to be shown]==],
	HttpService = [==[Allows sending HTTP requests and provides various web-related functions, including JSON function]==],
	Jump = [==[Jump action needed to reach the next waypoin]==],
	ClosestOutOfRange = [==[Goal is out of MaxDistance range, returns path to closest point you can reach within MaxDistance]==],
	UserInputService = [==[The <code>UserInputService</code> is a service used to detect the type of input available on a user's device via the use of a <code>LocalScript</code>. The service is also used to detect input event]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Fabric = [==[Applies to <code>BasePart</code> only]==],
	RunService = [==[Game service responsible for all run-time activity and progression of tim]==],
	CharacterJumpHeight = [==[Determines the starting value of <code>Humanoid.JumpHeight</code> for <code>Player.Character</code]==],
	PlayerScripts = [==[A container for LocalScripts to be run on the clien]==],
	GlobalShadows = [==[Toggles voxel-based dynamic lighting for the gam]==],
	GetCurrentValue = [==[Returns the current value of the reciever's <code>CustomEventReciever.Source</code> property]==],
	BackgroundColor = [==[Determines the color of a <code>GuiObject</code> backgroun]==],
	MinTextSize = [==[The smallest size in pixels the font is allowed to b]==],
	Metal = [==[Metal (Apple]==],
	Selection = [==[The Selection service controls the <code>Instance</code>s that are selected in Roblox Studio]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Revoked = [==[The current user's or group roleset's permission is revoked]==],
	Arcade = [==[<img src="/assets/blt78f78804de9600d9/Font-Face-Sample-Arcade.png" class="img-fluid half-sized" /]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	LeftArm = [==[The asset is a left arm]==],
	TwoAttachment = [==[Use two attachments]==],
	FlyweightService = [==[Internal service with no functionality available to developers]==],
	OneAttachment = [==[Use one attachment]==],
	CurrentPosition = [==[The current offset between the SlidingBallConstraint's <code>Attachment</code>]==],
	Bottom = [==[The bottom face of a Part]==],
	ServiceRemoving = [==[Fired when a service is about to be removed]==],
	DesiredAngle = [==[The desired angle to turn the motor to in radians]==],
	OnContact = [==[The first player to touch a part is given ownership of that part for the server (network). Ownership will not change if another player touches that part unless network ownership has been released by the owner]==],
	BindOffset = [==[<code>datatype.CFrame</code> is used to adjust a binding point for clothing item mesh. Could be used to move and rotate clothing items. This property is intended for fine-tuning only and it is heavily optional]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	AirFree = [==[Skateboard is in the air]==],
	ArePartCoordsShown = [==[An ancient property that hasn't worked correctly since late 2007.
It's supposed to render a large XYZ axis in the center of each <code>BasePart</code>, but the axis rendering component doesn't work correctly]==],
	CameraMode = [==[Changes the default camera's mode to either first or third person]==],
	Occupant = [==[The humanoid that is sitting in the sea]==],
	SaveBoolean = [==[Used to save a boolean value that can be loaded again at a later time using <code>Player:LoadBoolean</code]==],
	Color = [==[Determines the stroke colo]==],
	Front = [==[The front face of a Part]==],
	CornerWedge = [==[The mesh is a corner wedge]==],
	RightAngleRamp = [==[The mesh is a right angle ramp]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Prism = [==[The mesh is a prism]==],
	StartDrag = [==[Starts a drag action given a dictionary of parameter]==],
	Button = [==[The background color of clickable button]==],
	MainButton = [==[The background color of clickable buttons that are the primary actio]==],
	CollisionEnabled = [==[Returns whether the user enabled <i>Collisions</i> in studio under the Model tab]==],
	BuildersClub = [==[(no longer available]==],
	Water = [==[Applies to <code>Terrain</code> only]==],
	Resuming = [==[Fired when the game is resumed after being paused by a breakpoint]==],
	Glacier = [==[Applies to <code>Terrain</code> only]==],
	Ice = [==[Applies to <code>BasePart</code> and <code>Terrain</code>]==],
	PromptPremiumPurchaseFinished = [==[Fires when the Premium purchase modal close]==],
	Asphalt = [==[Applies to <code>Terrain</code> only]==],
	Ground = [==[Applies to <code>Terrain</code> only]==],
	Grass = [==[Applies to <code>BasePart</code> and <code>Terrain</code>]==],
	VerySlow = [==[2 seconds per cycl]==],
	Inlet = [==[Makes the side appear with holes where studs would b]==],
	Sandstone = [==[Applies to <code>Terrain</code> only]==],
	Follow = [==[Camera tracks the player and automatically rotates if the player walks left or right]==],
	Left = [==[The grid is placed starting along the left edge of the parent, extending to the right according to the size of the grid relative to the x-axis]==],
	Granite = [==[Applies to <code>BasePart</code> only]==],
	Limestone = [==[Applies to <code>Terrain</code> only]==],
	Visit = [==[The Visit service is a backend service used by Roblox. Its functions are not accessible to developers in any form]==],
	SliceCenter = [==[Sets the slice boundaries of a 9-sliced image]==],
	Tool = [==[An object, such as a weapon, that can be equipped by a <code>Humanoid</code]==],
	FallingDown = [==[The Humanoid has been tripped, and will attempt to get up in a few moments]==],
	InputEnded = [==[Fired when a user stops interacting via a Human-Computer Interface device (Mouse button down, touch begin, keyboard button down, etc]==],
	Vertical = [==[Scrolling along the Y-axis (fixed X-Axis)]==],
	Unknown = [==[If a part is not a limb (e.g. running the <code>Humanoid.GetLimb</code> function on a <code>BasePart</code> child of a Humanoid will return this Enum)]==],
	LeftArm = [==[If the limb is a part of the Humanoid's Torso. <em>This includes UpperLeftArm and LowerLeftArm for R16 rigs.</em]==],
	CageOrigin = [==[Cage mesh offset relative to parent <code>MeshPart</code>]==],
	Right = [==[The object is on the right side of it's parent (x-axis)]==],
	table = [==[A library of table functions]==],
	LegacyNamingScheme = [==[Determines whether data stores use a new improved naming schem]==],
	HighGain = [==[The output volume of frequencies greater than 4000 Hz]==],
	ZOffset = [==[The distance, in studs, the <code>Beam</code>s display is offset by relative to the <code>Workspace.CurrentCamera</code>]==],
	HoverImage = [==[A textureId that will be used when <code>ImageButton</code> is being hovere]==],
	WidthScale = [==[Determines by what factor the width (left-to-right distance) of a <code>Humanoid</code> is scaled; when <code>Humanoid:ApplyDescription</code>, maps to the "BodyWidthScale" <code>NumberValue</code> within the Humanoi]==],
	InstanceCount = [==[A measurement of how many <code>Instance</code> are currently in memory]==],
	DisplayWhenDamaged = [==[The humanoid's health is only visible when the humanoid is damaged - and not at full health. The display is not visible when the humanoid is at full health]==],
	Border = [==[The color of borders, like those found in the Properties windo]==],
	SetBreakpoint = [==[Sets the specified line of the script as a breakpoint. Returns a <code>DebuggerBreakpoint</code> that you can use to manage the breakpoint]==],
	lighting = [==[Refers to the game's <code>Lighting</code> servic]==],
	SortType = [==[The order in which to sort the results]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Torso = [==[The mesh is the default Humanoid torso mesh]==],
	ClearJoinAfterMoveJoints = [==[Will remove any 'create joints' that were made visible via the <code>JointsService:ShowPermissibleJoints</code> method]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	BottomParamA = [==[Determines the first parameter for the SurfaceType on the Bottom face of a part (-Y direction]==],
	AssemblyAngularVelocity = [==[The angular velocity of the part’s assembl]==],
	LeftBrowLowerer = [==[Lowers the left brow dow]==],
	Width1 = [==[The width in studs of the <code>Beam</code> at its end]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	CSGDictionaryService = [==[CSGDictionaryService is an internal service that stores a cache of <code>BinaryStringValue</code> objects, each value representing a unique data set for solid modeling data]==],
	Enabled = [==[Whether the gradient is enabled or not]==],
	Cancel = [==[The Cancel function halts playback of its <code>Tween</code> and resets the tween variables. If <code>TweenBase:Play</code> is called again the <code>Tween</code>'s properties will resume interpolating towards their destination but, as the tween variables have been reset, take the full length of the animation to do so]==],
	Button1Down = [==[Simulates the user holding the left mouse button down]==],
	TwistLimitsEnabled = [==[Sets whether the BallSocketConstraint sets a limit on twist rotation based on <code>BallSocketConstraint.TwistUpperAngle</code> and <code>BallSocketConstraint.TwistLowerAngle</code>]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	MessagingService = [==[MessagingService allows game servers in the same game to communicate with each othe]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	WhenScrollable = [==[The scrollbar will be elastic when there is content to be scrolled t]==],
	LeftLowerLipDepressor = [==[Lowers the lower lip down away from the upper lip revealing the lower teet]==],
	PaddingTop = [==[The padding to apply on the top side relative to the parent's normal size]==],
	btest = [==[Returns a boolean describing whether the bitwise and of its operands is different from zero]==],
	Parallel = [==[Two parallel axe]==],
	ItemAdded = [==[Fires when a <code>Configuration</code>, <code>CustomEvent</code>, <code>CustomEventReceiver</code>, <code>Dialog</code>, or <code>VehicleSeat</code> is added to the <code>DataModel</code]==],
	Adventure = [==[The game's genre is set to Adventure]==],
	OutrageousBuildersClub = [==[(no longer available]==],
	LeftArm = [==[Determines the asset ID of the LeftArm to be applied to the <code>Humanoid</code]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	UseLocalSpace = [==[Determines whether studio tools will use local space of an object or global space]==],
	TouchStarted = [==[Fired when a user places their finger on a TouchEnabled device - such as the screen of an Apple iPad or iPhone or a Google Android phon]==],
	MouthRight = [==[Moves the mouth righ]==],
	PlayLocalSound = [==[Plays a <code>Sound</code> locally, meaning the sound will only be heard by the client calling this function, regardless of where it's parented to]==],
	LoadStringEnabled = [==[Toggles whether or not the <code>loadstring</code> function can be used by server scripts. Defaults to false]==],
	Visible = [==[Determines whether a <code>GuiObject.GUI</code> and its descendants will be rendere]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Players = [==[A game service that contains presently connected Player objects]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Height = [==[The height of the Rect]==],
	DataStoreSetOptions = [==[Specifies additional parameters for a <code>GlobalDataStore:SetAsync</code> call]==],
	Color3 = [==[Sets the color of a GUI object]==],
	Jump = [==[The Jump butto]==],
	UseView = [==[The current user or group roleset can download a copy of the package from Roblox]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	PrimitivesCount = [==[A measurement of how many physically simulated components currently exist in the game world]==],
	Outline = [==[As <code>GuiObject.BorderSizePixel</code> increases, the border grows outward. The dimensions of the GuiObject's contents do not change]==],
	MouseEnter = [==[Fires when a user moves their mouse into a GUI elemen]==],
	graphemes = [==[Returns an iterator function that iterates over the grapheme clusters of a given string]==],
	None = [==[Joints are never created, no matter wha]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	All = [==[Joints are created between any kind of surface. Functions identically to Surfac]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	ScrollBarBackground = [==[The background color of scrollbars, like those seen in the Explorer windo]==],
	DenkOne = [==[<style>@import url('https://fonts.googleapis.com/css2?family=Denk+One');</style>
<p class="text-nowrap" style={{fontFamily: 'Denk One', fontSize: '1.7em', margin: '5px 0px'}}>The quick brown fox jumps over the lazy dog.<br />0123456789 , : ! ? # % & ( ) - + ]==],
	NameOcclusion = [==[Controls whether a <code>Humanoid</code> name can be seen behind walls or other objects]==],
	RightParamA = [==[Determines the first parameter for the SurfaceType on the Right face of a part (-X direction]==],
	Contextual = [==[The stroke is applied to the parent UI element’s tex]==],
	ViewportPointToRay = [==[Creates a unit <code>DataType.Ray</code> from a position on the viewport (in pixels), at a given depth from the <code>Camera</code> orientated in the <code>Camera</code> direction. Does not account for the GUI inse]==],
	NoInput = [==[Behaves like a weld, and does absolutely nothing]==],
	Center = [==[The object's location is centered on it's parent]==],
	CanBeDropped = [==[Controls whether the player can drop the too]==],
	Edge = [==[The object is located along an edge of its parent]==],
	Right = [==[The widget will appear docked to the right of the game scree]==],
	Product = [==[Product format type - the product is a produce (e.g. Developer product)]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Seated = [==[The Humanoid is currently sitting. Check the <code>Humanoid.Sit</code> property]==],
	Landed = [==[The Humanoid touched the ground after a freefall. <em>This state lasts only briefly.</em]==],
	Jumping = [==[The Humanoid just jumped. (Check <code>Humanoid.Jump</code>). <em>This state lasts only briefly.</em]==],
	Ragdoll = [==[The Humanoid has been hit by a fast moving object (uncontrolled falling). <em>The Humanoid can recover from this.</em]==],
	RunningNoPhysics = [==[Currently running while no physics are being calculated]==],
	AlwaysOff = [==[The humanoid's health display is never visible]==],
	None = [==[Name and healthbar will not be displayed under any circumstance]==],
	CameraMinZoomDistance = [==[The minimum distance in studs the player's default camera is allowed to zoom in]==],
	InnerBox = [==[Fixed size collision boxes, similar to the classic avatar collisio]==],
	TeamColor = [==[Sets what team the <code>SpawnLocation</code> is affiliated to. If <code>SpawnLocation.Neutral</code> property is false, only <code>Player</code>s with the same <code>Player.TeamColor</code> as the spawn's TeamColor will be able to spawn there]==],
	CFrame = [==[The center location and rotation of the Region3]==],
	TextXml = [==[The HTTP request data isformatted in plain text Xm]==],
	IdleAnimation = [==[The asset is an idle animation]==],
	EyesLookDown = [==[Moves gaze dow]==],
	Dead = [==[The Humanoid died. Changing a Humanoid's state to this one will kill it]==],
	ApplicationXml = [==[The HTTP request data is encoded in application Xm]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	SubtractAsync = [==[Creates a new <code>UnionOperation</code> which occupies the same space as the part minus the space(s) occupied by the parts in the given array]==],
	IsReceiveAgeShown = [==[This property is supposed to show the <code>BasePart.ReceiveAge</code> of a part, but it does not work correctly]==],
	nfdnormalize = [==[Converts the input string to Normal Form D]==],
	RightFoot = [==[Reference to a Humanoid's RightFoot]==],
	TeamChat = [==[Makes the <code>LocalPlayer</code> chat the given message, which will only be viewable by users on the same tea]==],
	Direction = [==[The direction vector of the Ray]==],
	Slow = [==[1 second per cycl]==],
	None = [==[Text is not truncated]==],
	PublishAsync = [==[Invokes the supplied callback whenever a message is pushed to the topi]==],
	Slate = [==[Applies to <code>BasePart</code> and <code>Terrain</code>]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	NoGraphics = [==[Game will not be rendered, and instead a <em>Diagnostics</em> window is rendered on screen]==],
	OpenGL = [==[OpenGL (Khronos Group]==],
	RotVelocity = [==[Determines a part's change in orientation over tim]==],
	Tutorial = [==[The game's genre is set to Tutorial]==],
	SkatePark = [==[The game's genre is set to Skate Park]==],
	War = [==[The game's genre is set to War]==],
	Scary = [==[The game's genre is set to Scary]==],
	Corrugator = [==[Brings the left and right brows inward togethe]==],
	SciFi = [==[The game's genre is set to SciFi (Science Fiction)]==],
	Fantasy = [==[The game's genre is set to Fantasy]==],
	sin = [==[Returns the sine of x (assumed to be in radians)]==],
	SocialItems = [==[Gear with the 'Social' attribute.
<img alt="Social Attribute" src="/assets/bltd3ac42c4659a2371/GearType_Social.png" /]==],
	FindFirstChildOfClass = [==[Returns the first child of the <code>Instance</code> whose <code>Instance.ClassName</code> is equal to the given className]==],
	VersionNumber = [==[Refers to a revision of a specific package]==],
	Responsiveness = [==[Controls how quickly the constraint will reach its goal. Higher values will cause the attachment to align quicker. Value can be between 5 and 200]==],
	Changed = [==[Fired whenever the <code>NumberValue.Value</code> is change]==],
	UITableLayout = [==[Lays out sibling UI elements and their child UI elements as rows/columns and cells in a table]==],
	Transparency = [==[Overlays the <code>SurfaceAppearance.ColorMap</code> on top of the underlying part <code>Part.Color3</code> color based on the ColorMap’s alpha channel
<img alt="AlphaMode Transparency" src="/assets/bltd194e7f5a88d1fdd/fern-overlay.png" /]==],
	CharacterAppearance = [==[The base class for objects that change the character's appearance, such as the <code>BodyColors</code>, <code>CharacterMesh</code>, <code>ShirtGraphic</code>, <code>Pants</code> and <code>Shirt</code> objects]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	PlayerChoice = [==[The rig (either R6 or R15) determined by a player's character settings set on the website in the 'Edit Avatar' page]==],
	C1 = [==[Is subtracted from the <code>JointInstance.C0</code> property to create an offset point for <code>JointInstance.Part1</code>]==],
	RemoveCustomStatus = [==[Removes the defined custom status from the Status model in the Humanoid.]==],
	Friend = [==[Two players are friends]==],
	NotFriend = [==[Two players are not friends]==],
	Axes = [==[Axes is a datatype used for the <code>ArcHandles</code> class to control what rotation axes are currently enable]==],
	Changed = [==[Fires if the BinaryStringValue's value is changed]==],
	Fixed = [==[All simulated assemblies inside the workspace will advance forward at 240&nbsp;Hz. This option is best for optimal stability and simulation accuracy]==],
	VirtualUser = [==[VirtualUser is a service that allows you to record the inputs of a user, and then play it back to a limited extent]==],
	SetTeleportData = [==[Setter function for data to be passed to the destination plac]==],
	Unknown = [==[The friendship status of two players is unknown]==],
	ErrorCount = [==[Measures how many errors have been recorded in the test session]==],
	RegisterTouchMovementMode = [==[Registers that a touch movement mode is available to be selected from the game menu]==],
	GetLimb = [==[Returns the <code>Enum.Limb</code> enum that is associated with the given <code>Part</code]==],
	Issue = [==[A player invokes (sends) a friend request]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	StudsPerTileU = [==[Sets the horizontal size, in studs, of the tiled image applied by the <code>Texture</code>]==],
	DropShadow = [==[Causes the frame to appear as a translucent gray rectangle with blurred sides. The blur is more apparent on the bottom edge. It has a padding of eight pixels on all sides]==],
	DynamicThumbstick = [==[The player's character is controlled with one hand while holding their device in portrait mode]==],
	HttpRbxApiService = [==[An internal service whose functionality is not available to developers]==],
	ChatGreen = [==[Causes the frame to appear similar to a Dialog with its Tone property set to "Friendly." Like "ChatBlue" this has a padding of fifteen pixels on all sides]==],
	RobloxSquare = [==[Causes the frame to appear as a translucent dark gray rectangle with a padding of five pixels on all sides]==],
	ChatBlue = [==[Causes the frame to appear similar to a <code>Dialog</code> with its <code>Dialog.Tone</code> property set to <code>Enum.DialogTone</code> neutral. This has a padding of fifteen pixels on all sides]==],
	RotateIncrement = [==[Determines the degrees by which studio's rotation tool will rotate selected objects each tic]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Gamepad4 = [==[Input from the 4th plugged in Gamepad]==],
	Value = [==[Used to hold a number value between <code>DoubleConstrainedValue.MinValue</code> and <code>DoubleConstrainedValue.MaxValue</code]==],
	CurrentDistance = [==[The current distance between the RodConstraint's two <code>Attachment</code>]==],
	Pushing = [==[Skateboard is being pushed (speeding up)]==],
	Brick = [==[Increases by a rate of 1 along the x- and z- axes, 1.2 along the y-axis]==],
	ResizeableFaces = [==[Describes the faces on which a part may be resize]==],
	Size96 = [==[Font size 96]==],
	Size42 = [==[Font size 42]==],
	Size18 = [==[Font size 18]==],
	TitilliumWeb = [==[<style>@import url('https://fonts.googleapis.com/css2?family=Titillium+Web');</style>
<p class="text-nowrap" style={{fontFamily: 'Titillium Web', fontSize: '1.75em', margin: '5px 0px'}}>The quick brown fox jumps over the lazy dog.<br />0123456789 , : ! ? # % & ( ) - + ]==],
	SpecialElite = [==[<style>@import url('https://fonts.googleapis.com/css2?family=Special+Elite');</style>
<p class="text-nowrap" style={{fontFamily: 'Special Elite', fontSize: '1.6em', margin: '5px 0px'}}>The quick brown fox jumps over the lazy dog.<br />0123456789 , : ! ? # % & ( ) - + ]==],
	Roboto = [==[<style>@import url('https://fonts.googleapis.com/css2?family=Roboto');</style>
<p class="text-nowrap" style={{fontFamily: 'Roboto', fontSize: '1.55em', margin: '5px 0px'}}>The quick brown fox jumps over the lazy dog.<br />0123456789 , : ! ? # % & ( ) - + ]==],
	PermanentMarker = [==[<style>@import url('https://fonts.googleapis.com/css2?family=Permanent+Marker');</style>
<p class="text-nowrap" style={{fontFamily: 'Permanent Marker', fontSize: '1.6em', margin: '5px 0px'}}>The quick brown fox jumps over the lazy dog.<br />0123456789 , : ! ? # % & ( ) - + ]==],
	PatrickHand = [==[<style>@import url('https://fonts.googleapis.com/css2?family=Patrick+Hand');</style>
<p class="text-nowrap" style={{fontFamily: 'Patrick Hand', fontSize: '1.8em', margin: '5px 0px'}}>The quick brown fox jumps over the lazy dog.<br />0123456789 , : ! ? # % & ( ) - + ]==],
	Oswald = [==[<style>@import url('https://fonts.googleapis.com/css2?family=Oswald');</style>
<p class="text-nowrap" style={{fontFamily: 'Oswald', fontSize: '1.65em', margin: '5px 0px'}}>The quick brown fox jumps over the lazy dog.<br />0123456789 , : ! ? # % & ( ) - + ]==],
	GetDebugId = [==[Returns a coded string of the <code>Instance</code>s DebugId used internally by Roblox]==],
	Nunito = [==[<style>@import url('https://fonts.googleapis.com/css2?family=Nunito');</style>
<p class="text-nowrap" style={{fontFamily: 'Nunito', fontSize: '1.65em', margin: '5px 0px'}}>The quick brown fox jumps over the lazy dog.<br />0123456789 , : ! ? # % & ( ) - + ]==],
	Axes = [==[Axes is a datatype used for the <code>ArcHandles</code> class to control what rotation axes are currently enable]==],
	Bangers = [==[<style>@import url('https://fonts.googleapis.com/css2?family=Bangers');</style>
<p class="text-nowrap" style={{fontFamily: 'Bangers', fontSize: '1.65em', margin: '5px 0px'}}>The quick brown fox jumps over the lazy dog.<br />0123456789 , : ! ? # % & ( ) - + ]==],
	CollisionGroupsAreCollidable = [==[Returns whether the two groups will collide]==],
	PackageAssetName = [==[The asset name of the package]==],
	GothamBlack = [==[<img src="/assets/bltf60cc0f4a55f6f4f/Font-Face-Sample-Gotham-Black.png" class="img-fluid half-sized" /]==],
	AreAnchorsShown = [==[When set to true, parts that are <code>BasePart.Anchored</code> will show a gray surface outline on the surface of the part's bounding box that is currently facing the ground]==],
	Highway = [==[<img src="/assets/bltc15592366af3c398/Font-Face-Sample-Highway.png" class="img-fluid half-sized" /]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	GetPointBalance = [==[Returns the total number of points the given player has across all game]==],
	Garamond = [==[<style>@import url('https://fonts.googleapis.com/css2?family=EB+Garamond');</style>
<p class="text-nowrap" style={{fontFamily: 'EB Garamond', fontSize: '1.85em', margin: '5px 0px'}}>The quick brown fox jumps over the lazy dog.<br />0123456789 , : ! ? # % & ( ) - + ]==],
	Bodoni = [==[<img src="/assets/blt375ece24cc357f23/Font-Face-Sample-Bodoni.png" class="img-fluid half-sized" /]==],
	X = [==[The x-coordinate of the position]==],
	SourceSansBold = [==[<style>@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:ital,wght@0,300;0,400;0,600;0,700;1,400');</style>
<p class="text-nowrap" class="text-nowrap" style={{fontFamily: 'Source Sans Pro', fontSize: '1.7em', fontWeight: 700, margin: '5px 0px', minWidth: '540px'}}>The quick brown fox jumps over the lazy dog.<br />0123456789 , : ! ? # % & ( ) - + ]==],
	SourceSans = [==[<style>@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro');</style>
<p class="text-nowrap" style={{fontFamily: 'Source Sans Pro', fontSize: '1.7em', margin: '5px 0px'}}>The quick brown fox jumps over the lazy dog.<br />0123456789 , : ! ? # % & ( ) - + ]==],
	Vertical = [==[Fill in the top to bottom direction]==],
	Horizontal = [==[Fill in the left to right direction]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Craters = [==[Explosion generates craters]==],
	Value = [==[The stored <a href="/api-reference/datatype/Color3" title="Color3">Color3</a>]==],
	Magnitude = [==[The magnitude of the force]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	GamepadEnabled = [==[Describes whether the device being used by a user has an available gamepa]==],
	Size = [==[The size of the adornment]==],
	Always = [==[The scrollbar will always have elastic scrolling available, even when there isn't content available to scroll t]==],
	PlayerMouse = [==[The PlayerMouse behaves identically to the <code>Mouse</code> object that is obtained using <code>Tool.Equipped</code>. It can be accessed from <code>LocalScript</code>s using the local player's <code>Player:GetMouse</code> method]==],
	GetTranslatorForLocaleAsync = [==[Yields until the cloud localization asset for the argument locale has been loaded - if available. Returns a Translator to be used for translations using the locale data loade]==],
	Bounce = [==[Moves as if the start or end position of the tween is bouncy (See animation)]==],
	CreateDockWidgetPluginGui = [==[Creates a <code>DockWidgetPluginGui</code> given a <code>DataType.DockWidgetPluginGuiInfo</code]==],
	InstanceCount = [==[The number of instances active in the simulation]==],
	Sine = [==[Movement speed is determined by a sine wave (See animation)]==],
	Linear = [==[Moves at a constant speed (See animation)]==],
	SurfaceColor3 = [==[Determines the color of the box's surface]==],
	Cancelled = [==[The tween was cancelled before completion]==],
	Failed = [==[Prints a red message to the output, prefixed by <em>"TestService: "</em>]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	ClassicChat = [==[Indicates whether or not classic chat is enabled; set by the <code>Players:SetChatStyle</code> method]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	AddSubPose = [==[This function adds a sub <code>Pose</code> to the <code>Pose</code> by parenting it to it]==],
	StudsPerTileV = [==[Sets the vertical size, in studs, of the tiled image applied by the <code>Texture</code>]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	RightArm = [==[The right arm BodyPart]==],
	Quest = [==[Shows an exclamation point ('''!''')]==],
	Y = [==[Describes the Y (vertical) component of the mouse’s screen positio]==],
	Mix = [==[Percentage of the original sound that will be applied to the filter]==],
	MultiplePlayers = [==[Multiple players can simultaneously interact with this dialog. The conversation between the player and the dialog cannot be seen by other players]==],
	Thumbpad = [==[The player's character is controlled with a virtual thumbpad that stays stationary as the player's finger moves. Jumping is controlled with a separate button]==],
	EventConnected = [==[Fires when the receiver is attached to a different <code>CustomEvent</code>, when the <code>CustomEventReciever.Source</code> property is changed]==],
	SkyboxLf = [==[The URL link to a picture for the left surface of the sky]==],
	GetAttributeChangedSignal = [==[Returns an event that fires when the given attribute change]==],
	RobloxGame = [==[Member must have security permissions &lt;= <strong>RobloxPlaceSecurity</strong> to be shown]==],
	UserChoice = [==[The camera will move based on the player's settings]==],
	Version = [==[Uniquely identifies a particular version of the key]==],
	Navigation = [==[Pathfinding for Humanoids via the PathfindingService]==],
	Animation = [==[Playback of Animations on Humanoids and AnimationControllers]==],
	WaistAccessory = [==[A comma-separated list of asset IDs that will be added as <code>Accessory</code> to a <code>Humanoid</code> rig when <code>Humanoid:ApplyDescription</code>, usually those attached to its waist (such as belts]==],
	Sounds = [==[Data of sounds in-game]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	GetSetting = [==[Retrieves a previously stored value with the given key, or nil if the given key doesn't exist]==],
	Dropdown = [==[The color of dropdown menus, like those found in the Properties windo]==],
	fromOrientation = [==[Equivalent to fromEulerAnglesYXZ]==],
	GraphicsMeshParts = [==[Rendering of mesh parts]==],
	PhysicsParts = [==[Physics bodies and the components that control their behavior]==],
	PromptButtonHoldEnded = [==[Triggers when the user stops holding down the <code>ProximityPrompt.KeyboardKeyCode</code>/button on a prompt with a non-zero <code>ProximityPrompt.HoldDuration</code]==],
	ClickToMove = [==[The player can right click in the game world and the character will move there. Player can also control character with mouse and keyboard]==],
	KeyboardMouse = [==[The player's character will be controlled using the keyboard and mouse]==],
	Pages = [==[An abstract class for pages objects]==],
	TouchLongPress = [==[Fired when a user holds at least one finger for a short amount of time on the same screen position on a TouchEnabled device - such as the screen of a mobile devic]==],
	SetIncrementSortedAsync = [==[Refers to <code>GlobalDataStore.SetAsync</code> and <code>GlobalDataStore.IncrementAsync</code> while using an <code>OrderedDataStore</code>]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	AttachmentUp = [==[Sets the offset position of the object on the Player]==],
	Classic = [==[Camera tracks the player but will not automatically rotate if the player walks left or righ]==],
	Follow = [==[Camera tracks the player and automatically rotates if the player walks left or righ]==],
	Default = [==[The default camera mode is classi]==],
	User = [==[The place is owned by a single use]==],
	PlaybackSpeed = [==[Determines the speed at which a <code>Sound</code> will play, with higher values causing the sound to play faster and at a higher pitch]==],
	All = [==[Refers to all available CoreGuis]==],
	RemovePose = [==[This function removes a <code>Pose</code> from the <code>Keyframe</code> by setting its <code>Instance.Parent</code> to nil]==],
	Static = [==[The texture will be rolled out as the attachments move, and they will remain in place until their lifetime is met.
<img alt="The Static TextureMode" src="/assets/blt4e6854cd4a39d272/Enum_TextureMode_Static.gif" /]==],
	FindPartOnRayWithWhitelist = [==[Returns the first <code>BasePart</code> or <code>Terrain</code> cell intersecting with the given <code>DataType.Ray</code> that is in, or is a descendant of an object in, the given whitelis]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	FilteringEnabled = [==[Determines whether changes made from the client will replicate to the server or not]==],
	LeftUpperLeg = [==[Reference to a Humanoid's LeftUpperLeg]==],
	GetWaterCell = [==[Returns if the cell is a water cell]==],
	Focus = [==[Sets the area in 3D space that is prioritized by Roblox's graphical system]==],
	Chromecast = [==[The client is running on Chromecast]==],
	ShowActiveAnimationAsset = [==[When set to true, a label will be shown above each <code>Player</code>'s head, showing the current animation being played by the Player's <code>Humanoid</code>, if any]==],
	Inverse = [==[Returns the inverse of the CFrame]==],
	DisplayDistanceType = [==[Controls the distance behavior of the Humanoid's name and health display]==],
	BodyAngularVelocity = [==[Applies a torque to maintain a constant angular velocit]==],
	GetClassIcon = [==[Provides a dictionary that allows the display of a class' Explorer window ico]==],
	ApiKey = [==[PlayFab API key. Must be set in order to use <code>AnalyticsService:FireEvent</code>]==],
	KeyboardMouse = [==[The player's character is controlled using the keyboard and mouse]==],
	Resume = [==[Resumes the <code>Sound</code>. Sets <code>Sound.Playing</code> to true. Does not alter <code>Sound.TimePosition</code> and thus can be used to resume the playback of a sound stopped using <code>Sound:Pause</code>]==],
	ReloadAssets = [==[When set to true, Roblox Studio will automatically reload changes that are made to files in Roblox's <code>content</code> folder]==],
	Follow = [==[Camera tracks the player and automatically rotates if the player walks left or right]==],
	Enum = [==[A datatype that represents an individual enum]==],
	TextSize = [==[Determine the line height of text in pixels]==],
	Default = [==[The default camera movement mode is classic]==],
	RemoveCharacter = [==[Removes the player's character]==],
	Box = [==[Collision models behave using a box that corresponds to the union's selection bo]==],
	Shop = [==[Shows a dollar sign ('''$''')]==],
	Friends = [==[A player can only chat with users in a game that are on their friends list]==],
	Name = [==[The name of the EnumItem]==],
	StepAnimations = [==[Increments the <code>AnimationTrack.TimePosition</code> of all playing <code>AnimationTrack</code>s that are loaded onto the <code>Animator</code>, applying the offsets to the model associated with the <code>Animator</code>. For use in the command bar or by plugins only]==],
	NoOne = [==[A player cannot chat with any other users in a game]==],
	AllUsers = [==[A player can chat with all users in a game]==],
	Gyro = [==[The Gyroscope of a mobile device]==],
	GetInstanceRemovedSignal = [==[Get a signal that fires when a given tag is removed from an objec]==],
	White = [==[White chat color]==],
	Green = [==[Green chat color]==],
	Resize = [==[Changes the size of an object just like using the Studio resize tool]==],
	AllScopes = [==[Whether the <code>GlobalDataStore</code> should work with all scopes]==],
	GraphicsSpatialHash = [==[Spatial hash lookup tables of the game world that are used for rendering]==],
	InspectPlayerFromUserId = [==[Allows the Inspect Menu to appear showing the user that has the given <code>Player.UserId</code]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	AddSeparator = [==[Adds a separator between items in the men]==],
	MouseButton1Up = [==[Fired when the left mouse has released the GUI objec]==],
	Gamepad5 = [==[Input from the 5th plugged in Gamepa]==],
	DistributedGameTime = [==[The amount of time, in seconds, that the game has been running]==],
	Grip = [==[Stores the Tool's Grip properties as one CFram]==],
	Plain = [==[Sound reverb is changed to sound like the player is an open plain]==],
	TouchInputService = [==[An internal service responsible for touch inputs on mobile devices]==],
	Fixed = [==[Camera is stationary]==],
	Enabled = [==[Determines whether the button is clickable in genera]==],
	BrickColorValue = [==[A container object for a single BrickColor valu]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	GothamBold = [==[<img src="/assets/blta607a446fad08015/Font-Face-Sample-Gotham-Bold.png" class="img-fluid half-sized" /]==],
	RootPart = [==[Reference to a Humanoid's HumanoidRootPart]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	IsLoaded = [==[Returns true if the client has finished loading the game for the first tim]==],
	RightLowerArm = [==[Reference to a Humanoid's RightLowerArm]==],
	LeftUpperArm = [==[Reference to a Humanoid's LeftUpperArm]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	RightUpperLeg = [==[Reference to a Humanoid's RightUpperLeg]==],
	Block = [==[A block shaped par]==],
	LeftFoot = [==[Reference to a Humanoid's LeftFoot]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	UpperTorso = [==[Reference to a Humanoid's UpperTorso]==],
	ImageTransparency = [==[Determines the transparency of the rendered image]==],
	Pucker = [==[Makes a kiss-like shape with the mout]==],
	RightLeg = [==[The right left BodyPart]==],
	Out = [==[The easing style is applied in a reverse direction. (See animation]==],
	Range = [==[The distance from the SurfaceLight's face that will illuminate]==],
	Android = [==[The client is running on Android (Google mobile)]==],
	Shirt = [==[The asset is a shirt]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Z = [==[The Z axi]==],
	Error = [==[Prints a red message to the output]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	X = [==[The X axi]==],
	PlaybackLoudness = [==[A number between 0 and 1000 indicating how loud the <code>Sound</code> is currently playing back]==],
	Drag = [==[Determines the rate at which particles will lose half their speed through exponential deca]==],
	Axes = [==[Sets the current Axes ArcHandles will show]==],
	SetMotor = [==[Sets the vibration intensity of the specified <a href="/api-reference/property/InputObject/UserInputType" class="mw-redirect" title="UserInputType">UserInputType</a> and <a href="/api-reference/enum/VibrationMotor" class="mw-redirect" title="VibrationMotor">VibrationMotor</a>]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	RelativeTo = [==[The <a href="/api-reference/datatype/CFrame" title="CFrame">CFrame</a> in which the Torque is expressed]==],
	len = [==[Returns the number of UTF-8 codepoints in a given string]==],
	Y = [==[The y-coordinate of the Vector3]==],
	SetTeleportGui = [==[Sets the custom <code>ScreenGui</code> that will be shown to the local user during teleportation, prior to the teleport being invoke]==],
	AccountAge = [==[Describes the player's account age in days]==],
	FromAxis = [==[Returns a Vector3 on a particular axis]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Activate = [==[Simulates a click on a Too]==],
	Circular = [==[Whether or not the page layout wraps around at the ends]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	AvatarShop = [==[Item is purchasable only in the Avatar Shop]==],
	TimeLength = [==[The length of the <code>Sound</code> in seconds. If the <code>Sound</code> is not loaded, this value will be 0]==],
	RightLegColor3 = [==[Sets the color of this limb, as a <a href="/api-reference/datatype/Color3" title="API:Color3"><span>Color3</span></a>]==],
	GetKeys = [==[Returns a copy of all the keys in the FloatCurve as a Lua array of FloatCurveKe]==],
	NearIntensity = [==[Intensity of the near field blu]==],
	ExportPlace = [==[Exports the place to an .OBJ file that is saved to the path chosen by the user in a file save dialogue (the <code>filePath</code> argument is ignored)]==],
	GetMinutesAfterMidnight = [==[Returns the number of minutes that have passed after midnight for the purposes of lighting]==],
	PluginMenu = [==[A context menu that can be shown in Studio. Displays a list of PluginActions and supports submenu]==],
	ClickButton2 = [==[Simulates the user clicking the right mouse button]==],
	RightOuterBrowRaiser = [==[Raises the outer part of the right brow upward]==],
	LayoutOrder = [==[Controls the sort order of a <code>GuiObject</code> when used with a <code>UIGridStyleLayout</code]==],
	WireRadius = [==[The radius of the wire]==],
	PoseAnimation = [==[The asset is a pose animation]==],
	Center = [==[The grid is placed at the center of its parent (x-direction), extending equally to the left and right of the center according to the size of the grid relative to the x-axis]==],
	Puffiness = [==[Controls how much underlying clothing items inflate the current clothing item]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	ConvertToSmooth = [==[Transforms the legacy terrain engine into the new terrain engine]==],
	RunAnimation = [==[The asset is a run animation]==],
	WaistAccessory = [==[The asset is a waist accessory]==],
	BackAccessory = [==[The asset is a back accessory]==],
	MinValue = [==[The lowest number that the <code>IntConstrainedValue.Value</code> property can be]==],
	UIConstraint = [==[The base class for UI constraint classes]==],
	FaceAccessory = [==[The asset is a face accessory]==],
	Plugin = [==[The asset is a plugin]==],
	GamePass = [==[The asset is a GamePass]==],
	RightLeg = [==[The asset is a right leg]==],
	LeftLeg = [==[The asset is a left leg]==],
	Level02 = [==[Graphic quality level 2]==],
	GetPoses = [==[This function returns an array containing all <code>Pose</code>s that have been added to a <code>Keyframe</code]==],
	Torso = [==[The asset is a torso]==],
	PromptBundlePurchase = [==[Used to prompt a user to purchase a bundle with the given bundleI]==],
	Face = [==[The asset is a face]==],
	ApplyImpulseAtPosition = [==[Apply an impulse to the assembly at specified positio]==],
	Head = [==[The asset is a head]==],
	Down = [==[The user swiped down]==],
	Mesh = [==[The asset is a mesh]==],
	FitWithinMaxSize = [==[Makes the element the maximum size it can be within the current possible AbsoluteSize of the element while maintaining the aspect rati]==],
	Bottom = [==[The widget will appear docked below the game scree]==],
	RibbonTabTopBar = [==[The background color of the ribbon men]==],
	ClickToMove = [==[The player's character will attempt to move to a location in the world when the player taps a location]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	MinDistance = [==[The minimum distance at which a 3D <code>Sound</code> (direct child of a <code>BasePart</code> or <code>Attachment</code>) will begin to attenuate. Effectively, the emitter size]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	BottomSurfaceInput = [==[Determines the kind of input for the Bottom face of a part (-Y direction]==],
	RemoveKey = [==[Deprecated in favor of <code>LocalizationTable:RemoveEntry</code>.
Calling RemoveKey is the same as making the following call to RemoveEntry:

<div><div><div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><pre class="prettyprint linenums lang-lua">LocalizationTable:RemoveEntry(key,"","")</pre></div></div></div]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Action = [==[(1) - Highest priorit]==],
	CellCenterToWorld = [==[Returns the world position of the center of the terrain cell (x, y, z)]==],
	GameId = [==[Describes the ID of the <code>Articles/Multi Place Games|game</code> the <code>Articles.Place</code> running on the server belongs t]==],
	Camera = [==[This should run after Inpu]==],
	Abandon = [==[Indicates the progression abandone]==],
	Error = [==[When functionality is unavailable or expectations broke]==],
	Warning = [==[Used for warnin]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Lighting = [==[The Lighting service controls the environmental lighting in a game. It includes a range of adjustable properties that can be used to change how lighting appears and interacts with other objects]==],
	Debug = [==[Used for debuggin]==],
	ViewportSize = [==[Describes the dimensions, in pixels, of the client's viewpor]==],
	Automatic = [==[Network ownership is determined automatically by the server]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	CustomStatusRemoved = [==[Fired when a status is removed from the Humanoid]==],
	ObjectValue = [==[A container object for a reference to another instance]==],
	MatchingGenreOnly = [==[Only gear genres matching the allowed genres specified in a place's configuration settings]==],
	fromUniversalTime = [==[Returns a DateTime using the given units from a UTC time]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Enabled = [==[Allows for disabling of the <code>WrapLayer</code> object as if it does not exist]==],
	OSX = [==[The client is running on OSX (Apple desktop)]==],
	Attachment1 = [==[The constraint is expressed relative to Attatchment]==],
	Unit = [==[A normalized copy of the Vector3]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	CheckOcclusionAsync = [==[Checks if a path is blocked starting at a specific waypoin]==],
	Attachment0 = [==[The constraint is expressed relative to Attatchment]==],
	rrotate = [==[Returns a number after its bits have been rotated to the right by a given number of times]==],
	assert = [==[throws an error if the provided value resolves to false or nil]==],
	SetIncrementAsync = [==[Refers to <code>GlobalDataStore.SetAsync</code> and <code>GlobalDataStore.IncrementAsync</code>]==],
	Atmosphere = [==[The <strong>Atmosphere</strong> object pushes Roblox closer toward realistic environments where sunlight scatters in different ways depending on density and other air particle propertie]==],
	GetSunDirection = [==[Returns a <code>DataType.Vector3</code> representing the direction of the sun from the position 0, 0, 0]==],
	HasTag = [==[Check whether an object has a given ta]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	ReflectionMetadataMember = [==[An internal object which cannot be used by developers]==],
	FillCylinder = [==[Fills a cylinder of smooth terrain in a given space]==],
	Chat = [==[The CoreGui used to display and send in-game chat message with other players]==],
	TiltUnits = [==[Tilts the <code>Camera</code> around its <code>Camera.Focus</code> in 10 degree increments around the <code>Camera</code> X axi]==],
	Color = [==[Sets color used for the debug rendering. See <code>WrapTarget.DebugMode</code]==],
	ReferenceOriginWorld = [==[Reference mesh offset relative to parent MeshPart (in the world space)
Note: this property is set up automatically by the FBX importe]==],
	DPad = [==[The player's character is controlled with a virtual dpad. The dpad consists of directional buttons with a jump button in the middle]==],
	Spend = [==[Indicates the spending or loss of an in game resource. For example, a player spends virtual currency to acquire a new ite]==],
	DebugMode = [==[Allows switching between different debugging visualization modes for cage meshes]==],
	WrapLayer = [==[The WrapLayer object defines a 3D accessory’s inner and outer surfaces and other properties related to layering accessories. These surfaces, or the Inner Cage and Outer Cage, are similar to collision boxes, and describe the surfaces of which other 3D accessories can be placed without clipping or breaking]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	min = [==[Returns the minimum value among the numbers passed to the function]==],
	Name = [==[A non-unique identifier of the <code>Instance</code]==],
	IsRegion3Empty = [==[Returns a bool indicating whether there are no <code>BasePart</code>s within the given <code>DataType.Region3</code>]==],
	TextStrokeColor3 = [==[Determines the color of the text stroke (outline)]==],
	Deny = [==[A player denies a friend request]==],
	Right = [==[Whether the right face is included]==],
	Transparency = [==[A mixed property of BackgroundTransparency and TextTransparenc]==],
	Menu = [==[The player is restricted to chatting via a menu of chat messages]==],
	Hit = [==[Fires when the <code>Explosion</code> hits a <code>BasePart</code> within its <code>Explosion.BlastRadius</code>. Returns the part hit along with the distance of the part from <code>Explosion.Position</code>]==],
	Left = [==[Left side of the <code>ScrollingFrame</code>]==],
	GetPartBoundsInBox = [==[Returns an array of parts whose <em>bounding boxes</em> overlap a given bo]==],
	NearPlaneZ = [==[Describes the negative z-offset, in studs, of the <code>Camera</code> near clipping plan]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	ServerStorage = [==[A container whose contents are only accessible on the server. Objects descending from ServerStorage will not replicate to the client and will not be accessible from <code>LocalScript</code>s]==],
	Gamepad3 = [==[Input from the 3rd plugged in Gamepad]==],
	Classic = [==[Enables swipe and pan on mobile devices, and disables edge bump camera controls. Default]==],
	F3 = [==[Determines the face of a <code>Glue</code>]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	AdjustWeight = [==[Changes the weight of an animation, with the optional fadeTime parameter determining how long it takes for <code>AnimationTrack.WeightCurrent</code> to reach <code>AnimationTrack.WeightTarget</code>]==],
	BulkMoveTo = [==[Moves a table of <code>Part</code> to <code>DataType.CFrame</code> in a table of CFrames, without firing property changed event]==],
	MoonAngularSize = [==[The perceived angular size of the moon while using this skybox, in degrees]==],
	ZoomToExtents = [==[Positions and zooms the <code>Workspace.CurrentCamera</code> to show the extent of <code>BasePart</code>s currently in the <code>Workspace</code>]==],
	None = [==[A state that should never be seen in a game, essentially just marks the end of the enum]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	MakeJoints = [==[Goes through all <code>BasePart</code>s given. If any part's side has a <code>Enum.SurfaceType</code> that can make a joint it will create a joint with any adjacent parts]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	MouseEnabled = [==[Describes whether the user’s device has a mouse availabl]==],
	Enabled = [==[Relates to whether or not the tool can be use]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Top = [==[Whether the top face is included]==],
	Size60 = [==[Font size 60]==],
	AreOwnersShown = [==[When set to true, each <code>Player</code>'s character is outlined with a unique color, and each part that the player has network ownership over is outlined with the same color]==],
	Rate = [==[Determines the number of particles emit per secon]==],
	Stopped = [==[Skateboard is stopped (not moving)]==],
	AllowThirdPartySales = [==[Determines whether assets created by other uses can be sold in the game]==],
	Workspace = [==[The Workspace is the service in which any objects that are to be rendered in the 3D world exist. Objects not descending from Workspace will not be rendered or physically interact with the worl]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	NavigationRequested = [==[Fired when navigation is requested from the VRService]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	SetTouchpadMode = [==[Sets the mode of the specified VRTouchpad to the specified VRTouchpadMode]==],
	char = [==[Receives zero or more integers and returns a string with length equal to the number of arguments that has each character has the internal numerical code equal to its corresponding argument]==],
	WorldCFrame = [==[Describes the exact CFrame of the attachment in world-space coordinate]==],
	LeftArmColor = [==[Sets the color of this limb, as a <a href="/api-reference/datatype/BrickColor" class="mw-redirect" title="API:BrickColor"><span>BrickColor</span></a>]==],
	ForcePlayModeRobloxLocaleId = [==[When set to a non-empty string, this property overrides value of the <code>LocalizationService.RobloxLocaleId</code> when running in play solo mode]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	GetUserCFrame = [==[Returns a CFrame describing the position &amp; orientation of a specified virtual reality device]==],
	GetPartBoundsInRadius = [==[Returns an array of parts whose <em>bounding boxes</em> overlap a given spher]==],
	Auditorium = [==[Sound reverb is changed to sound like the player is in an auditorium]==],
	ToAxisAngle = [==[Returns a tuple of a Vector3 and a number which represent the rotation of the CFrame in the axis-angle representation]==],
	RootLocalizationTable = [==[A reference to a <code>LocalizationTable</code> to be used to apply automated localization to this GuiBase2d and its descendants]==],
	GetTranslatorForPlayerAsync = [==[Yields until the cloud localization asset for the player's locale has been loaded - if available. Returns a <code>Translator</code> to be used for translations using the locale data loade]==],
	WalkSpeed = [==[Describes the <code>Humanoid</code> maximum movement speed in studs/se]==],
	MaxPrice = [==[The maximum item price to search for]==],
	VRService = [==[The VRService is a service that is responsible for handling interactions between Roblox and Virtual Reality]==],
	GetPropertyChangedSignal = [==[Get an event that fires when a given property of an object changes]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	IsVoiceEnabledForUserIdAsync = [==[Returns whether or not the given user has voice enabled]==],
	Default = [==[The default is KeyboardMouse]==],
	Core = [==[(4) - Lowest priorit]==],
	Text = [==[Determines the string rendered by the UI element]==],
	NumberSequence = [==[A series of floats across a period of time]==],
	PlayerRejoining = [==[Fired when a player rejoins a game session after having disconnected prior]==],
	LeftEyeClosed = [==[Closes the left eyeli]==],
	ReactionTorqueEnabled = [==[Causes the constraint to apply equal and opposite reaction force]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Default = [==[Default behavior (currently no change to gameplay]==],
	FillDirection = [==[Determines the axis in which UI elements are laid out]==],
	Vector3 = [==[A 3D value representing a direction and magnitude]==],
	TextPlain = [==[The HTTP request data is formatted in plain tex]==],
	ExplorerOrder = [==[Determines how this class is sorted in the Explorer compared to other classes]==],
	StopRecording = [==[Stops recording the user's input. Returns a Lua script as a string, that allows you to playback the inputs that were recorded]==],
	GetMaxQualityLevel = [==[Returns the maximum quality level]==],
	Description = [==[The description of the FunctionalTest]==],
	StartRecording = [==[Starts recording the user's input]==],
	Color = [==[Controls the material color of cloud particles]==],
	SetKeyDown = [==[Simulates the user holding a key down]==],
	BottomSurface = [==[Determines the type of surface for the Bottom face of a part (-Y direction]==],
	MoveMouse = [==[Simulates the user moving the mouse cursor to a specific position]==],
	Changed = [==[Fired whenever <code>StringValue.Value</code> is changed]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	new = [==[Returns a Faces with the corresponding face of each passed <code>enum.NormalId</code> as <code>true</code>]==],
	MouseEnter = [==[Fired when a mouse "enters" the GUI handle]==],
	Button2Down = [==[Simulates the user holding the right mouse button down]==],
	lastForce = [==[Returns the last force in the objec]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	FindPartsInRegion3WithIgnoreList = [==[Returns an array of <code>BasePart</code>s in the given <code>DataType.Region3</code> that aren't in, or a descendant of an entry in, the given IgnoreList]==],
	GetArrivingTeleportGui = [==[Returns the <em>customLoadingScreen</em> the <code>Players.LocalPlayer</code> arrived into the place wit]==],
	BorderMode = [==[Determines in what manner a GuiObject's border is laid out relative to its dimensions]==],
	MakeJoints = [==[Creates a joint on any side of the object that has a surface ID that can make a join]==],
	setfenv = [==[Sets the given function's environment]==],
	Hull = [==[Collision models behave using a <a href="https://en.wikipedia.org/wiki/Convex_hull">convex hull</a]==],
	Always = [==[The ScrollingFrame will always be insetted regardless if the scrollbar is being shown or not]==],
	Video = [==[The asset is a video]==],
	Attachment = [==[Defines a point and orientation relative to the parent <code>BasePart</code>, typically used with <code>Constraint</code>]==],
	SwimAnimation = [==[The asset is a swim animation]==],
	UserId = [==[A unique identifying integer assigned to all user account]==],
	Edit = [==[The current user or group roleset can download a copy of the package from Roblox and publish package changes to Roblox]==],
	RotationOrder = [==[Euler angles rotation orde]==],
	Friction = [==[Used to control the Friction of the part, but now it no longer does anything]==],
	TextureId = [==[The TextureId is the content ID of the texture that is to be applied to the mesh]==],
	TextTruncate = [==[Controls the truncation of the text displayed in this TextLabel]==],
	CountCells = [==[Returns the number of non-empty cells in the Terrain]==],
	MouseLeave = [==[Fires when a user moves their mouse out of a GUI elemen]==],
	Ended = [==[Fires when the <code>VideoFrame.Video</code> has completed playback and stopped]==],
	TimePosition = [==[Indicates the progress in seconds of the <code>VideoFrame.Video</code]==],
	Resolution = [==[Gets the original source resolution of the <code>VideoFrame.Video</code> fil]==],
	Looped = [==[Sets whether or not the <code>VideoFrame.Video</code> repeats once it has finished when it is playin]==],
	VideoFrame = [==[A GUI object that renders a rectangle, like a <code>Frame</code> does, with a moving video imag]==],
	GetUserCFrameEnabled = [==[Returns true if the specified UserCFrame is available to be listened to]==],
	GraphicsParticles = [==[Rendering of particles from ParticleEmitters]==],
	GetCollection = [==[Returns all instances of a given class which are in the <code>DataModel</code]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	ClipsDescendants = [==[When set to true, portions of GuiObjects that fall outside of the BillboardGui's canvas borders will not be drawn]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	SetTeleportSetting = [==[Stores a value under a given key that persists across all teleportations in the same gam]==],
	Source = [==[The code to be executed]==],
	TouchLongPress = [==[Fires when the player starts, continues and stops long-pressing the UI elemen]==],
	TurnSpeed = [==[The speed at which the vehicle will turn. Higher numbers can cause problems and are not necessarily better]==],
	Torque = [==[How fast the vehicles will be able to attain <code>VehicleSeat.MaxSpeed</code>. The greater the number, the faster it will reach the maximum speed]==],
	Level13 = [==[Graphic quality level 13]==],
	ThrottleFloat = [==[Functions identically to <code>VehicleSeat.Throttle</code>, but the value is not an integer]==],
	GetKeyframeSequenceAsync = [==[Returns a KeyframeSequence based on the specified assetId asynchronously]==],
	MaxSpeed = [==[The maximum speed that can be attained]==],
	MouseDrag = [==[Fired when the mouse moves while the MouseButton1Down event has fired, but the left mouse button has not been released yet]==],
	Input = [==[This should run as secon]==],
	Accoutrement = [==[an object that welds its child <code>Part</code> called "Handle" to the Head of a player's character]==],
	DataModel = [==[Describes whether a <code>DataModel</code> is actively in memory, as an integer (where 1 = true, and 0 = false)]==],
	xpcall = [==[Similar to <code>pcall</code> except it uses a custom error handler]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Changed = [==[Fired whenever <code>Vector3Value.Value</code> is changed]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Z = [==[Returns the FloatCurve controlling the Z channel. It is the first child instance of type FloatCurve named <code>Z</code>. If none is found an empty FloatCurve is created]==],
	OpenScript = [==[Used to open the given script instance in an editor window, in Roblox studio, at the given line. If no line is given as an argument it will default to 0]==],
	Y = [==[Returns the FloatCurve controlling the Y channel. It is the first child instance of type FloatCurve named <code>Y</code>. If none is found an empty FloatCurve is created]==],
	Complete = [==[Indicates the progression complete]==],
	UserSettings = [==[A singleton object that houses basic user settings, which persist across all games on Roblox]==],
	AccessoryBlob = [==[A JSON formatted array of Layered Accessorys where each table in the entry in the array describes an accessory’s AssetId, AccessoryType, Order, and (optionally) Puffiness as key-value pairs]==],
	UserService = [==[A service that handles queries regarding users on the Roblox platform]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	LeftArmColor3 = [==[Sets the color of this limb, as a <a href="/api-reference/datatype/Color3" title="API:Color3"><span>Color3</span></a>]==],
	UserCFrameChanged = [==[Fires when the <code>DataType.CFrame</code> of a specified Virtual Reality device change]==],
	InFocusRadius = [==[Controls the distance away from the <code>DepthOfFieldEffect.FocusDistance</code> where no blur is applie]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Changed = [==[Fired whenever the <code>BoolValue.Value</code> of the BoolValue is changed]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	TargetSurface = [==[Sets which side the SurfaceSelection will appear on, on the adorned <code>BasePart</code>]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	CharacterAppearanceLoaded = [==[Fires when the the full appearance of a <code>Player</code>'s <code>Player.Character</code> has been inserte]==],
	LandscapeRight = [==[A preference where the game is displayed landscape (horizontally) with the bottom of the device on the right side of the screen]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Radius = [==[The radius of the cylinder adornment]==],
	TouchPan = [==[Fired when a user drags at least one finger on a <code>UserInputService.TouchEnabled</code> device - such as the screen of an mobile devic]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	ProximityPrompt = [==[An object that allows developers to prompt users to interact with an object in the 3D worl]==],
	MouseWheelForward = [==[Fires when a user scrolls their mouse wheel forward when the mouse is over a GUI elemen]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	TouchesUseCollisionGroups = [==[Determines whether <code>BasePart</code> in different groups set to not collide will ignore collisions and touch event]==],
	TouchMoved = [==[Fired when a user moves their finger on a TouchEnabled device - such as the screen of an Apple iPad or iPhone or a Google Android phon]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	GetUserId = [==[Returns the studio user’s userId if they're logged in, otherwise returns 0]==],
	Faces = [==[A datatype containing six booleans, each representing a face of a <code>BasePart</code>]==],
	Pause = [==[Sets <code>Sound.Playing</code> to false. This pauses the playback of the <code>Sound</code> if the sound is playing. As <code>Sound.TimePosition</code> is not reset ,when the <code>Sound</code> is resumed it will continue from its previous position]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	AssemblyCenterOfMass = [==[The center of mass of the part’s assembly in world spac]==],
	InputEnded = [==[<div data-swiftype-name="summary" data-swiftype-type="text" data-swiftype-index='true'>Fires when a user stops interacting via a Human-Computer Interface device</div]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	PathfindingService = [==[Used to find paths between two point]==],
	Michroma = [==[<style>@import url('https://fonts.googleapis.com/css2?family=Michroma');</style>
<p class="text-nowrap" style={{fontFamily: 'Michroma', fontSize: '1.3em', margin: '5px 0px'}}>The quick brown fox jumps over the lazy dog.<br />0123456789 , : ! ? # % & ( ) - + ]==],
	InputChanged = [==[Fired when a user changes how they're interacting via a Human-Computer Interface devic]==],
	InitialPrompt = [==[Sets the first sentence that the dialog will show to the player, once a chat is commenced]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	lshift = [==[Returns a number whose bits have been logically shifted to the left by a given displacement]==],
	BreakpointRemoved = [==[Fired when a breakpoint is removed from the script]==],
	Size420x420 = [==[Thumbnail resolution is 420 pixels x 420 pixels]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	DeviceAccelerationChanged = [==[Fired when a user moves a device that has an accelerometer. Used to track real-world device movement within a Roblox gam]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	JumpTo = [==[If the <i>page</i> is in the UIPageLayout, then it sets <code>UIPageLayout.CurrentPage</code> to it and animates to it. If the circular layout is enabled, it will take the shortest path to this page]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	ToIsoDate = [==[Returns the DateTime as an ISO 8601 date-time string]==],
	SetAsync = [==[Sets the value of a key]==],
	LandscapeSensor = [==[A preference where the game is displayed landscape (horizontally) with the bottom of the device on the left of right side of the screen depending on the device's orientation (the sensor determines which side allows for the game to be displayed right-side-up)]==],
	Length = [==[Number of keys in the float curve]==],
	FreeLength = [==[Natural resting length of the spring]==],
	DistanceFactor = [==[The number of studs to be considered a meter by <code>SoundService</code> when calculating 3D <code>Sound</code> volume attenuation]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	IsNavigationGamepad = [==[Returns true if the specified <code>Enum.UserInputTypeGamepad</code> is allowed to control the navigation <code>GuiObject</code]==],
	Text = [==[The text that is displayed when viewing this action in Roblox Studio]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	IsMouseButtonPressed = [==[Returns whether the given <code>Enum.UserInputType</code> is currently held dow]==],
	OccludeAll = [==[Occlude (hide) all humanoid names]==],
	IsKeyDown = [==[Returns whether the given  <code>Enum.KeyCode</code> is currently held dow]==],
	GetMouseDelta = [==[Returns the change, in pixels, of the position of the player’s <code>Mouse</code> in the last rendered frame. Only works if the mouse is locke]==],
	GetGamepadConnected = [==[Returns whether a gamepad with the given <code>Enum.UserInputType</code>''gamepadNum'' is connecte]==],
	GamePass = [==[GamePass format type - the product is a GamePass]==],
	GetFocusedTextBox = [==[Returns the currently <code>TextBox</code> the client is currently focused o]==],
	Texture = [==[Determines the image rendered on particle billboard]==],
	GetDeviceGravity = [==[Returns an <code>InputObject</code> describing the device's current gravity vecto]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	GamepadSupports = [==[Returns whether the given <code>Enum.UserInputType</code> gamepad supports a button corresponding with the given <code>Enum.KeyCode</code]==],
	FormatLocalTime = [==[Returns the DateTime's value in local time formatted into a string]==],
	GetButton = [==[Retrieves a <code>ImageButton</code> of a <code>ContextActionService:BindAction</code> action that had a touch input button created]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	OnScreenKeyboardPosition = [==[Determines the position of the on-screen keyboar]==],
	UpdatedTime = [==[Indicates the last time the data store was updated in milliseconds since epoch]==],
	MouseDeltaSensitivity = [==[Scales the delta (change) output of the user's <code>Mouse</code]==],
	Style = [==[Sets what the truss looks like. There are currently three different styles]==],
	KeyboardEnabled = [==[Describes whether the user’s device has a keyboard availabl]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	AccelerometerEnabled = [==[Describes whether the user's device has an acceleromete]==],
	ScriptContext = [==[Describes the context where this member can be used.<br />
If set to <a href="/articles/String" title="String"><span>"Server"</span></a>, this member will not be available to auto fill when editing a `LocalScript`.<br />
If set to <a href="/articles/String" title="String"><span>"Client"</span></a>, this member will not be available to auto fill when editing a `Script`.]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Custom = [==[Uses the frame's <code>GuiObject.BackgroundColor3</code>, <code>GuiObject.BorderColor3</code>, and <code>GuiObject.BackgroundTransparency</code> properties to determine the frame's appearance. It has no padding; elements with the position {{0, 0}, {0, 0}} will appear at the frame's top-left corner]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	SetOnboardingCompleted = [==[Sets onboarding as complete]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	InFullScreen = [==[Returns true if the user's Roblox window is in full screen mode]==],
	Active = [==[Whether or not mouse events will be passed to objects layered below]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	IsDisabled = [==[Returns whether a given badge is disable]==],
	VREnabled = [==[Describes whether the user is using a virtual reality devic]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	GetServerTimeNow = [==[Returns the server epoch time in seconds]==],
	MouseSensitivity = [==[A <a href="/articles/Numbers" class="mw-redirect" title="Float">float</a> representing the sensitivity of the client's mouse]==],
	AssetService = [==[The AssetService is a non-replicated service that handles asset related queries to the Roblox web API. Eventually, this will house all asset related queries for Roblox objects stored in the web. One should mind the <code>Articles/Multi Place Games|limitations</code> this API has]==],
	SimulationRadiusChanged = [==[Fired when the <code>Player</code>'s <code>Player.SimulationRadius</code> is changed]==],
	ControlMode = [==[Toggles whether or not the client can use the Mouse Lock Switch mode]==],
	ComputerCameraMovementMode = [==[The camera movement mode currently in-use by the client]==],
	Z = [==[Returns the <code>FloatCurve</code> controlling the Z channel. It is the first child instance of type <code>FloatCurve</code> named <code>Z</code>. If none is found an empty <code>FloatCurve</code> is created]==],
	ipairs = [==[Returns an iterator function and the table for use in a for loop]==],
	UnionOperation = [==[Combines parts together into a single solid mode]==],
	UITextSizeConstraint = [==[Ensures that the size of text rendered by certain <code>GuiObject</code> classes lies within the range described by <code>UITextSizeConstraint.MaxTextSize</code> and <code>UITextSizeConstraint.MinTextSize</code]==],
	MajorAxis = [==[Determines whether sibling UI elements are treated as rows or columns]==],
	ImageRectOffset = [==[.The offset in pixels of the sub-area of an image to be displaye]==],
	Thickness = [==[Determines the stroke’s thicknes]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Stopped = [==[Fires when an animation to <code>UIPageLayout.CurrentPage</code> is completed without being canceled, and the view stops scrolling]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	PageLeave = [==[Fires when a page leaves view, and will not be rendered]==],
	InOut = [==[The easing style is applied forward for the first half and in reverse for the second half]==],
	CopyRegion = [==[Stores a chunk of terrain into a <code>TerrainRegion</code> object so it can be loaded back later.  Note: <code>TerrainRegion</code> data does not replicate between server and client]==],
	Previous = [==[Sets <code>UIPageLayout.CurrentPage</code> to the page before the current page and animates to it, or does nothing if there isn't a previous page]==],
	arshift = [==[Returns a number after its bits have been arithmetically shifted to the right by a given displacement]==],
	rawequal = [==[Returns whether <code>v1</code> is equal to <code>v2</code>, bypassing their metamethods]==],
	UILayout = [==[The base class for UI layout classes]==],
	SetCustomSortFunction = [==[Sets the function used to determine the order of elements when SortOrder is set to Custom]==],
	AbsoluteContentSize = [==[The absolute size of space being taken up by the grid layout]==],
	PlayerGui = [==[A container for a Player's currently rendered ScreenGui]==],
	TweenInfo = [==[Read-only property that includes information on how the interpolation of the <code>Tween</code> is to be carried out, using the <code>TweenInfo</code> data type]==],
	BindableEvent = [==[An object used to create custom Events that Scripts can fire and connect to]==],
	Light = [==[Light is a root class for dynamic lighting related objects]==],
	TouchMovementMode = [==[The type of controls being used by the client on a mobile device]==],
	Transparency = [==[Determines how much the parent GuiObject can be seen through along the length of the gradien]==],
	StudioService = [==[Provides access to configuration of Roblox Studio and allows importing files from the user's file syste]==],
	Remove = [==[Sets the object's Parent to nil, and does the same for all its descendants]==],
	To = [==[The object that the FloorWire travels to]==],
	GetValue = [==[Calculates a new alpha given an <code>Enum.EasingStyle</code> and <code>Enum.EasingDirection</code]==],
	Help = [==[Shows a question mark ('''?''')]==],
	Create = [==[Creates a new <code>Tween</code> given the object whose properties are to be tweened, a <code>datatype.TweenInfo</code> and a dictionary of goal property values]==],
	TweenService = [==[TweenService is used to create <code>Tween</code>s, which are used to interpolate, or tween, the properties of instances. <code>Tween</code>s can be used on any object with compatible property types]==],
	TrussPart = [==[Truss parts are the same as <code>Part</code>, except that they have a different visual style, resize differently and characters are able to climb the]==],
	TriangleMeshPart = [==[Abstract intermediate class that manages physical geometry properties for PartOperations and MeshParts]==],
	Duty = [==[Controls how long during one volume oscillation the effect will be active]==],
	UserGameSettings = [==[The UserGameSettings is a singleton class found inside of the <code>UserSettings</code> singleton. It holds various persistent settings relating to how the user wants to control their camera, and their character]==],
	CameraMaxZoomDistance = [==[The maximum distance the player's camera is allowed to zoom out]==],
	Watch = [==[Camera is stationary but will rotate to keep the subject in the center of the screen]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	LightInfluence = [==[Determines the factor to which the Trail is influenced by the environment's lightin]==],
	WidthScale = [==[A <code>DataType.NumberSequence</code> that scales the width of the <code>Trail</code> over the course of its lifetime]==],
	TextureMode = [==[Sets how the Texture will be drawn]==],
	Texture = [==[The texture to display on the trail]==],
	ReflectionMetadata = [==[A currently unused object whose functionality was split into <code>ReflectionMetadataClasses</code> and <code>ReflectionMetadataEnums</code>]==],
	MaxLength = [==[Sets the maximum length of the trail]==],
	BuildingTools = [==[Gear with the 'Building' attribute.
<img alt="Building Attribute" src="/assets/blte36164ad978dbc99/GearType_Building.png" /]==],
	FaceCamera = [==[If set to true, the trail textures will always face the camera]==],
	ColorShift_Bottom = [==[The hue represented in light reflected in the opposite surfaces to those facing the sun or moon]==],
	Color = [==[The color of the trail segments throughout the lifetime of the trail]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Exclusivity = [==[Used to customize which prompts can be shown at the same tim]==],
	WeightTarget = [==[WeightCurrent is a read-only property that gives the current weight of the <code>AnimationTrack</code>. It has a default value of 1 and is set when <code>AnimationTrack:Play</code>, <code>AnimationTrack:Stop</code> or <code>AnimationTrack:AdjustWeight</code> is called]==],
	TouchTransmitter = [==[An internal object used by networking and replication code to transmit <code>BasePart.Touched</code> and <code>BasePart.TouchEnded</code> events]==],
	Radius = [==[The visualization radius of the sprin]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	difftime = [==[Returns the number of seconds from t1 to t2, assuming the arguments are correctly casted to the time_t format]==],
	SelectionImageObject = [==[Overrides the default selection adornment (used for gamepads]==],
	MouseButton1Down = [==[Fired when the mouse is in the left mouse down state on the GUI objec]==],
	LimitEnabled = [==[Determines whether the angular motion of attachments’ secondary axes is limite]==],
	Damping = [==[Torsional damping of the sprin]==],
	CurrentAngle = [==[Indicates the current angle, in degrees, of the limiting con]==],
	TorsionSpringConstraint = [==[A rotational spring that opposes the angular motion between two axe]==],
	Throttle = [==[The direction of movement, tied to the keys W and S. Must be an integer 1 (forward) 0 (null) or -1 (reverse). Will refresh back to 0 unless constantly set]==],
	BrickColor = [==[A data type that provides a predefined list of named colors]==],
	StudsOffset = [==[Determines how the BillboardGui is offset from its <code>BillboardGui.Adornee</code>, relative to the <code>Camera</code> orientation and units in studs]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Mountains = [==[Sound reverb is changed to sound like the player is in the mountains]==],
	PromptSaveAvatarCompleted = [==[Fires when the <code>AvatarEditorService:PromptSaveAvatar</code> operation is complete]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	AdditionalCoreIncludeDirs = [==[Used internally by Roblox to add additional CoreScript loading directorie.
The value of this string should be full paths to each directory, separated only by semicolons (<code>;</code>)]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Part1 = [==[The second part connected by the constraint]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	RightArmColor3 = [==[Sets the color of this limb, as a <a href="/api-reference/datatype/Color3" title="API:Color3"><span>Color3</span></a>]==],
	Color3 = [==[Determines the colorization to be applied to the <code>ShirtGraphic</code> texture]==],
	Emit = [==[Emits a given number of particle]==],
	TextService = [==[The TextService is a service internally responsible for handling the display of text in the game]==],
	StatusRemoved = [==[Fired when a status is removed from the Humanoid]==],
	TextWrapped = [==[Determines if text wraps to multiple lines within the <code>TextLabel</code> element space, truncating excess text]==],
	Level11 = [==[Graphic quality level 11]==],
	TextStrokeColor3 = [==[Determines the color of the text stroke (outline)]==],
	GetChatForUserAsync = [==[Returns the text in a properly filtered manner for the specified <code>Player.UserId</code>]==],
	ClientPhysicsPause = [==[Client owned physics is pause]==],
	JumpToIndex = [==[If the index is &gt;= 0 and less than the size of the layout, this method acts like <code>UIPageLayout:JumpTo</code>. If it's out of bounds and circular is set, it will animate the full distance between the in-bounds index of <code>UIPageLayout.CurrentPage</code> and the new index]==],
	Glue = [==[Makes the side appear with thick diagonal "X"]==],
	TextWrap = [==[Determines whether or not text should wrap at the edges of the objec]==],
	MaxVisibleGraphemes = [==[The maximum number of graphemes the <code>TextBox</code> can show]==],
	JointsService = [==[A service that stores joints created by surface connection]==],
	GetJoinData = [==[Returns a dictionary containing information on how the <code>Player</code> joined the gam]==],
	Warn = [==[Prints if a condition is true, otherwise prints a warning]==],
	profilebegin = [==[Starts profiling for a MicroProfiler label]==],
	MaxVisibleGraphemes = [==[The maximum number of graphemes the <code>TextButton</code> can show]==],
	Vector2 = [==[A 2D value representing a direction and magnitude]==],
	FontSize = [==[Determines the font size to be use]==],
	Font = [==[Determines the font used to render text]==],
	Focused = [==[Fires when the <code>TextBox</code> gains focus]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	IsPlaying = [==[This read-only property will return true when the <code>Sound</code> is playing]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	GetPlayingAnimationTracks = [==[Returns an array of all <code>AnimationTrack</code> that are currently being played on the <code>Humanoid</code]==],
	TextTruncate = [==[Controls the truncation of the text displayed in this TextBox]==],
	IntConstrainedValue = [==[An IntConstrainedValue is used to store a value which can never be less than MinValue and can never be more than MaxValue]==],
	TextTransparency = [==[Determines the transparency of rendered text]==],
	TextFits = [==[Whether the text fits within the constraints of the TextBox]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	SelectionStart = [==[Determines the starting position of a text selection, or -1 if no text is selecte]==],
	CanvasSize = [==[Determines the size of the area that is scrollable. The UDim2 is calculated using the parent gui's size, similar to the regular Size property on gui objects]==],
	Decay = [==[When used with increased <code>Atmosphere.Haze</code> and <code>Atmosphere.Glare</code>, defines the hue of the <code>Atmosphere</code> away from the sun, gradually falling off from <code>Atmosphere.Color</code> towards this value.
See the <code>articles.Atmosphere</code> article for property comparisons and example environments.
<h2>See also</h2>
<ul>
<li><code>articles/Custom Skyboxes|Custom Skyboxes</code>, outlines how to change the default skybox for games and customize the lighting</li>
<li><code>articles/Post Processing Effects|Post-Processing Effects</code>, outlines how post-processing effects can quickly improve a game's visuals with a variety of customizable filters</li>
</ul]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	MultiLine = [==[When set to true, text inside a TextBox is able to move onto multiple lines. This also enables players to use the enter key to move onto a new line]==],
	Font = [==[Determines the font used to render tex]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	ObjectText = [==[An optional property that determines the object name text shown to the use]==],
	Completed = [==[The Completed event of a <code>Tween</code> fires when the tween finishes playing. This will happen either when the tween naturally finishes playing, or if it is stopped with <code>TweenBase:Cancel</code>]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Adornee = [==[Sets the object to adorn to]==],
	Health = [==[Describes the current health of the Humanoid on the range [0, <code>Humanoid.MaxHealth</code>]]==],
	ReportAbuse = [==[Attempts to report the given player for the given reaso]==],
	CharacterAdded = [==[Fired when a player's character spawns or respawns]==],
	numPlayers = [==[Returns the number of people in the server at the current tim]==],
	Fail = [==[Indicates a fatal error in a TestService run.
If this is called inside of a script running inside of the TestService, this will initiate a <a href="/articles/Lua-debugger" class="mw-redirect" title="Lua Debugger">breakpoint</a> on the line that invoked the error.]==],
	MaxValue = [==[The highest number that the <code>IntConstrainedValue.Value</code> property can be]==],
	SimulateSecondsLag = [==[Sets a specific amount of additional latency experienced by players during the test session]==],
	IsPhysicsEnvironmentalThrottled = [==[Sets whether or not the physics environment should be throttled while running this test]==],
	Is30FpsThrottleEnabled = [==[Sets whether or not the physics engine should be throttled to 30 FPS while the test is being ran]==],
	ExecuteWithStudioRun = [==[When set to true, the TestService will be executed when using the <em>Run</em> action in Roblox Studio]==],
	Description = [==[A description of the test being executed]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	WriteVoxels = [==[Sets a certain region of <a href="/articles/Intro-To-Terrain" title="Smooth terrain">smooth terrain</a> using the <a href="/articles/Intro-To-Terrain#Reading_and_writing_voxels" title="Smooth terrain">table format</a]==],
	WorldToCellPreferSolid = [==[Returns the grid cell location that contains the point position, preferring non-empty grid cells when position is on a grid edge]==],
	CurrentDistance = [==[The current distance between the RopeConstraint's two <code>Attachment</code>]==],
	ActionId = [==[A string that uniquely identifies this action]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Neutral = [==[Determines whether the player is on a specific team]==],
	ReadVoxels = [==[Returns a certain region of smooth terrain in table forma]==],
	CustomizedTeleportUI = [==[<em>No longer does anything</em]==],
	DataStoreOptions = [==[Object used to provide additional parameters to <code>DataStoreService:GetDataStore</code>]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	VectorForce = [==[A constraint used to apply a force to a part or assembly of part]==],
	GetMaterialColor = [==[Returns current terrain material color for specified terrain material]==],
	RigidityEnabled = [==[When true, the solver reacts as quickly as possible to complete the alignment. When false, the torque is dependent on <code>AlignOrientation.MaxTorque</code>, <code>AlignOrientation.MaxAngularVelocity</code>, and <code>AlignOrientation.Responsiveness</code>]==],
	UserInputState = [==[Describes the state of an input being performed, following a specific flow depending on the <code>InputObject.UserInputType</code]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	CellCornerToWorld = [==[Returns the position of the lower-left-forward corner of the grid cell (x, y, z)]==],
	WaterWaveSpeed = [==[Sets how many times the Terrain water waves will move up and down per minute]==],
	WaterTransparency = [==[The transparency of the Terrain water]==],
	ClickButton1 = [==[Simulates the user clicking the left mouse button]==],
	Horizontal = [==[The output layout is horizontal (x-axis)]==],
	AlwaysOn = [==[The humanoid's health display is always visible]==],
	TeleportToSpawnByName = [==[A variant of <code>TeleportService:Teleport</code> that causes the <code>Player</code> to spawn at a <code>SpawnLocation</code> of the given name at the destination plac]==],
	RightBrowLowerer = [==[Lowers the right brow dow]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	GetTeleportSetting = [==[Retrieves a teleport setting saved using <code>TeleportService:SetTeleportSetting</code> using the given ke]==],
	GetLocalPlayerTeleportData = [==[Returns the <em>teleportData</em> the <code>Players.LocalPlayer</code> arrived into the place wit]==],
	Z = [==[The z-coordinate of the position]==],
	GetBaseSets = [==[Returns an array of dictionaries, containing information about various Roblox approved sets]==],
	Perpendicular = [==[Two perpendicular axe]==],
	PantsTemplate = [==[Determines the texture of the <code>Pants</code>. The content ID link pointing to the pants template hosted on the Roblox website]==],
	ReservedServerAccessCode = [==[The access code of the reserved server that the players are being teleported t]==],
	AddSelectionParent = [==[Creates a gui selection group where gamepad gui navigation will only consider selectable gui objects that are within the group (children of selectionParent)]==],
	ReferenceOrigin = [==[Reference mesh offset relative to parent MeshPart (in the parent MeshPart space)
Note: this property is set up automatically by the FBX importe]==],
	Level06 = [==[Graphic quality level 6]==],
	SelectionChanged = [==[Fires when the <code>Instance</code>s selected in Roblox Studio changes]==],
	EmitterSize = [==[The minimum distance, in studs, at which a 3D <code>Sound</code> (direct child of a <code>BasePart</code> or <code>Attachment</code>) will begin to attenuate (decrease in volume]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	GamepadCameraSensitivity = [==[Describes how sensitive the camera is when using a gamepad]==],
	PlayerAdded = [==[Fires whenever a <code>Player</code> is assigned to the <code>Team</code>. A player is considered assigned if their <code>Player.Team</code> property is equal to the <code>Team</code> and <code>Player.Neutral</code> is false]==],
	LightInfluence = [==[Controls how much the SurfaceGui is influenced by the lighting in the game world]==],
	X = [==[The x-coordinate of the Vector2int16]==],
	TeamColor = [==[This property sets the color of the <code>Team</code>. Determines the <code>Player.TeamColor</code> property of players who are a member of the team. Also determines the color displayed on the player list and above player's heads]==],
	Team = [==[The <code>Team</code> class represents a faction in a Roblox place. The only valid parent for a Team is in the <code>Teams</code> service]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	OpenWikiPage = [==[Opens the context help window to the wiki page that <code>url</code> links to]==],
	SchedulerDutyCycle = [==[The average time divided by the average interval of the duty cycle]==],
	GetChildren = [==[Returns an array containing all of the <code>Instance</code>'s children]==],
	PixelsPerStud = [==[Determines the number of screen-space pixels per world-space stud used to render the contents of the SurfaceGu]==],
	Yellow = [==[Returns the BrickColor Bright Yellow]==],
	ClipsDescendants = [==[When set to true, portions of GuiObjects that fall outside of the SurfaceGui's canvas borders will not be drawn]==],
	gsub = [==[Returns a copy of s in which all or the first n occurrences of the pattern are replaced with the given replacement. The second value returned is the total number of substitutions made]==],
	CanvasSize = [==[The size of a 'virtual screen', in 'virtual pixels', which makes SurfaceGuis pixel-to-pixel compatible with ScreenGuis]==],
	AlwaysOnTop = [==[Determines whether the SurfaceGui will always be rendered on top of other objects]==],
	Active = [==[Whether or not mouse events will be passed to objects layered below]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	RoughnessMap = [==[Determines the apparent roughness across the surfac]==],
	NormalMap = [==[Modifies the lighting of the surface by adding bumps, dents, cracks, and curves without adding more polygon]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Pause = [==[Pauses the game’s simulation if it is running, suspending physics and script]==],
	HealthDisplayDistance = [==[Used in conjunction with the <code>Humanoid</code>'s <code>Humanoid.DisplayDistanceType</code> property to either determine how far a player controlling this Humanoid can see another humanoid's health bar, or how far this Humanoid's health displays to other viewing players]==],
	ServerCollectConditionalResult = [==[Fired when the server should collect a conditional test result]==],
	modf = [==[Returns two numbers, the integral part of x and the fractional part of x]==],
	LeftCheekRaiser = [==[Squints the left ey]==],
	GetUserIdFromNameAsync = [==[Sends a query to the Roblox website for the <code>Player.UserId</code> of an account with a given usernam]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Orbital = [==[The camera locks at a certain angle. Once it’s set, players can rotate the camera, but it will always maintain a consistent angle to the ground]==],
	Frequency = [==[Sets how often the effect will oscillate the volume]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	PromptImportFile = [==[Prompts the current Studio user to select one file to add as a <code>File</code]==],
	Flying = [==[When set, the Humanoid won't be animated, as with the <code>Humanoid.PlatformStand</code> property. <em>Lasts as long as the player flies.</em]==],
	IsEdit = [==[Returns whether the current environment is in <code>Edit</code> mod]==],
	Instances = [==[All the Instances present in memory]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	CreatePluginAction = [==[Creates a <code>PluginAction</code> which is an object that represents a generic performable action in Roblox Studio, with no directly associated <code>Toolbar</code> or <code>Button</code]==],
	Preload = [==[Queues an asset to be downloaded by the <code>ContentProvider</code]==],
	LeftLegColor3 = [==[Sets the color of this limb, as a <a href="/api-reference/datatype/Color3" title="API:Color3"><span>Color3</span></a>]==],
	VerticalScrollBarInset = [==[Indicates the inset behavior of the vertical scrolling bar]==],
	LocalPlayer = [==[The <code>Player</code> that the <code>LocalScript</code> is running for]==],
	HoldDuration = [==[The duration, in seconds, that the player must hold the button/key down to trigger the promp]==],
	StartCorner = [==[Determines from which corner the grid starts laying out UI elements]==],
	Pause = [==[The Pause function halts playback of its <code>Tween</code>. If <code>TweenBase.Resume</code> is called again the tween will resume playback from the moment it was paused]==],
	codes = [==[Returns an iterator function that iterates over all codepoints in a given string]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Orbital = [==[The camera has a fixed Y position, but can be rotated around the player]==],
	sqrt = [==[Returns the square root of x]==],
	TextWrapped = [==[Determines if text wraps to multiple lines within the <code>TextButton</code> element space, truncating excess tex]==],
	EnvironmentSpecularScale = [==[Specular light derived from environmen]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	RemoveVersionAsync = [==[Permanently deletes the specified version of a key]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	DevComputerCameraMovementMode = [==[Lets developer overwrite the default camera mode for each player if the player is on a computer]==],
	EnableFRM = [==[Toggles the enabled state of the framerate manager]==],
	SetGameplayPausedNotificationEnabled = [==[Allows developers to disable the built-in notification when a players gameplay is pause]==],
	PluginsDir = [==[The directory where local plugins are stored]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Changed = [==[Fired whenever the <code>DoubleConstrainedValue.Value</code> of the <code>DoubleConstrainedValue</code> is change]==],
	ThreadPoolConfig = [==[The specified thread pooling configuration for the task scheduler]==],
	SavePlace = [==[Saves the current plac]==],
	LuaDebuggerEnabled = [==[Specifies whether or not the <a href="/articles/Lua-debugger" class="mw-redirect" title="Lua Debugger">Lua Debugger</a> feature is enabled]==],
	IsFriendsWith = [==[Checks whether a player is a friend of the user with the given <code>Player.UserId</code]==],
	MeshID = [==[The <strong>MeshId</strong> is the content ID of the mesh that is to be displayed on the <code>MeshPart</code]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	PreferredPlayersInternal = [==[<code>Players.PreferredPlayers</code> for internal use]==],
	TabBar = [==[The background color of the tab bar, like the one where the script editor is opene]==],
	Red = [==[Returns the BrickColor Bright Red]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	newproxy = [==[Creates a bank <code>userdata</code>]==],
	PathWaypoint = [==[A description of the steps required to reach the next waypoint in a path]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	RuntimeScriptService = [==[An internal service, probably in charge of managing the execution of scripts in run-time.]==],
	GetGuiInset = [==[Returns two <code>DataType.Vector2</code> values representing the inset of user GUIs in pixels, from the top left corner of the screen and the bottom right corner of the screen respectively]==],
	Next = [==[Sets <code>UIPageLayout.CurrentPage</code> to the page after the current page and animates to it, or does nothing if there isn't a next page]==],
	RichText = [==[Determines whether the TextLabel renders the <code>TextLabel.Text</code> string using rich text formatting]==],
	UIMaximum = [==[The maximum value of this property. Used with <code>ReflectionMetadataItem.UIMinimum</code> to control the slider bar of this property in the <i>Properties</i> window]==],
	Last = [==[This should run as last, after Characte]==],
	PhysicsStepTimeMs = [==[A measurement of how long it takes for the physics engine to update its current state, in milliseconds.<br />
If this value is high, then it means the game instance is under stress from the physics simulations taking place]==],
	defer = [==[Calls/resumes a function/coroutine on the next resumption cycle]==],
	ContactsCount = [==[A measurement of how many parts are currently in contact with one another]==],
	UIStroke = [==[Applies an outline to text or a UI borde]==],
	LoadLibrary = [==[Returns a built-in Roblox library by name]==],
	Head = [==[The head BodyPart]==],
	Texture = [==[The content ID of the texture to be displayed on the <code>Beam</code>]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Unequipped = [==[Fired whenever the skateboard is unequipped]==],
	Adornee = [==[Sets the part or attachment that the BillboardGui is adorned too]==],
	Subject = [==[Name and healthbar will be displayed based on the distance settings of the humanoid being viewed, i.e. the one with this property set]==],
	ProportionScale = [==[Determines how wide (0) or narrow (1) a <code>Humanoid</code> rig is; when <code>Humanoid:ApplyDescription</code>, maps to the "BodyProportionScale" <code>NumberValue</code> within the Humanoid]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Outlines = [==[Determines whether outlines are enabled or disabled in a plac]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	ResetPlayerGuiOnSpawn = [==[Determines whether each child parented to the StarterGui will be cloned into a player's PlayerGui when that player's character is respawned]==],
	UserEmotesEnabled = [==[Determines if user-owned emotes are loaded when loading avatars]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	ExtentsOffsetWorldSpace = [==[Determines how the BillboardGui is offset from its <code>BillboardGui.Adornee</code>, relative to the global axes and units are half the dimensions of the model's axis-aligned bounding box]==],
	b = [==[The blue component of the BrickColor (between 0 and 1)]==],
	Thickness = [==[The visualized thickness of the spring's coils]==],
	Rate = [==[The frequency that the effect oscillates at]==],
	CurrentLength = [==[The current distance between the SpringConstantâ€™s <code>Attachment</code>]==],
	Range = [==[The size of the area that the SpotLight will illuminate]==],
	Angle = [==[The angle of which the light is shone from the SpotLight]==],
	PlaybackState = [==[<strong>PlaybackState</strong> describes the current stage for the <code>Tween</code> animation. A description of each state can be found on the page for the <code>Enum.PlaybackState</code> enum. It can be manipulated through other Tween functions, like <code>Tween.Play</code>]==],
	EnumItem = [==[An individual item in an enum]==],
	SetListener = [==[Sets the listener for the <code>SoundService</code>]==],
	IdleAnimation = [==[When this description is <code>Humanoid:ApplyDescription</code> to a <code>Humanoid</code>, this determines the <code>Animation.AnimationId</code> to play when its <code>Humanoid:GetState</code> is <code>enum.HumanoidStateType</code> at a speed near zer]==],
	RemoveKeyAtIndex = [==[Removes a given number of Keys starting from a given index. Returns the number of keys that were removed]==],
	Sit = [==[Describes whether the <code>Humanoid</code> is currently sitting]==],
	DisplayOrder = [==[Controls the order that multiple ScreenGuis are drawn]==],
	FriendService = [==[An internal service which is used to send, cancel, accept and decline friend requests in-gam]==],
	Value = [==[The integral value assigned to the EnumItem]==],
	ClearComputerCameraMovementModes = [==[Unregisters all ComputerCameraMovementMode enums from the game settings menu]==],
	ApplyAtCenterOfMass = [==[When true, applies force at center of mass of Attachment0's parent Part. When false, applied at Attachment0]==],
	Volume = [==[The volume multiplier applied to <code>Sound</code>s that are in the <code>SoundGroup</code>. This value ranges from 0 to 10]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Kick = [==[Forcibly disconnect a player from the game, optionally providing a message]==],
	SoundGroup = [==[A <code>SoundGroup</code> is used to manage the volume and sound effects on multiple <code>Sound</code>s at once. <code>Sound</code>s in the SoundGroup will have their volume and effects adjusted by the SoundGroup]==],
	Unit = [==[The Ray with a normalized direction]==],
	Stopped = [==[Fires when the <code>Sound</code> is stopped due to the <code>Sound:Stop</code> function]==],
	CharacterForward = [==[The player moved forward]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Error = [==[Fired when an error occurs]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Paused = [==[Fires whenever the <code>Sound</code> is paused using <code>Sound:Pause</code>]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Enabled = [==[Determines whether smoke particles are emi]==],
	LoadNumber = [==[Returns a number value that was previously saved to the playe]==],
	Changed = [==[Fired whenever the <code>CFrameValue.Value</code> of the CFrameValue is changed]==],
	Loaded = [==[Fires when the <code>Sound</code> is loaded]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Play = [==[Plays the <code>Sound</code>. Sets <code>Sound.TimePosition</code> to the last value set by a <code>Script</code> (or 0 if it has not been set), and then sets <code>Sound.Playing</code> to true]==],
	InUse = [==[If true, this dialog is being used by at least one player]==],
	DescendantRemoving = [==[Fires immediately before a descendant of the <code>Instance</code> is removed]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	WaterColor = [==[The tint of the Terrain water]==],
	Volume = [==[The volume of the <code>Sound</code>. Can be set between 0 and 10. Defaults to 0.]==],
	SoundId = [==[This property is the content ID of the sound file a <code>Sound</code> object is associated with. Once a sound has been uploaded to Roblox the content ID can be found in the uploaded sound’s URL]==],
	EditQualityLevel = [==[Sets the graphics quality level in Roblox Studio, when <code>RenderSettings.EnableFRM</code> is set to false]==],
	RollOffMaxDistance = [==[The maximum distance, in studs, a client's listener can be from the <code>Sound</code> origin and still hear it. Only applies to Sounds parented to a <code>Part</code> or <code>Attachment</code> (3D sounds]==],
	Playing = [==[Indicates whether the <code>Sound</code> is currently playing]==],
	CycleOffset = [==[A decimal number between 0 and 1, through which you can control how far all of the decals are along the wire]==],
	GetAsync = [==[Refers to <code>GlobalDataStore.GetAsync</code>]==],
	ExtentsOffset = [==[Determines how the BillboardGui is offset from its <code>BillboardGui.Adornee</code>, relative to the <code>Camera</code> orientation and units are half the dimensions of the model's <code>Camera</code>-aligned bounding box]==],
	Color = [==[Determines the color of the primary (outer) flame particle]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	SetGamepadCameraSensitivityVisible = [==[If called, Roblox toggles the menu option to control the camera sensitivity with gamepads]==],
	CacheableContentProvider = [==[A variant of the <code>ContentProvider</code> that caches assets that have already been received. This service is not used directly, but it is used by the services that inherit from it]==],
	AreModelCoordsShown = [==[An ancient property that hasn't work correctly since late 2007.
It's supposed to render an XYZ axis on the root part of a <code>Model</code>, but the axis rendering component doesn't work correctly]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Size = [==[Determines the size of newly emit smoke particle]==],
	SetValue = [==[Sets the value of the <code>CustomEvent</code> and fires the <code>CustomEventReceiver.SourceValueChanged</code> event for all connected <code>CustomEventReciever</code]==],
	LuckiestGuy = [==[<style>@import url('https://fonts.googleapis.com/css2?family=Luckiest+Guy');</style>
<p class="text-nowrap" style={{fontFamily: 'Luckiest Guy', fontSize: '1.6em', margin: '5px 0px'}}>The quick brown fox jumps over the lazy dog.<br />0123456789 , : ! ? # % & ( ) - + ]==],
	MotorMaxForce = [==[The maximum force a SlidingBallConstraint with <code>SlidingBallConstraint.ActuatorType</code> set to <code>Enum.ActuatorType</code> can apply when trying to reach its desired <code>SlidingBallConstraint.Velocity</code>]==],
	new = [==[Returns an instance of the specified class]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	LeftLegColor = [==[Sets the color of this limb, as a <a href="/api-reference/datatype/BrickColor" class="mw-redirect" title="API:BrickColor"><span>BrickColor</span></a>]==],
	TextColor3 = [==[This property determines the color of rendered tex]==],
	SunAngularSize = [==[The perceived angular size of the sun while using this skybox, in degrees]==],
	SkyboxUp = [==[The URL link to a picture for the top surface of the sky]==],
	VREnabled = [==[Indicates whether the user is using a virtual reality headse]==],
	PluginDragLeft = [==[Fires when the user's mouse leaves a PluginGui during a drag operation started by <code>Plugin:StartDrag</code]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	MoveStateChanged = [==[Fired when the SkateboardPlatform's <code>SkateboardPlatform.ControllingHumanoid</code> changes the force being used on the SkateboardPlatform]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	GetEquippedEmotes = [==[Returns an array of tables describing the equipped emotes that have been <code>HumanoidDescription:SetEquippedEmotes</code]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	StickyWheels = [==[If true, wheels won't roll without user input]==],
	Top = [==[The object is above its parent]==],
	Top = [==[Top of the grid]==],
	Graphic = [==[The content ID link pointing to the <code>ShirtGraphic</code> texture hosted on the Roblox website. This property sets the texture associated with a t-shirt]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	TweenTime = [==[The length of the animation]==],
	Idle = [==[Fired during every heartbeat that the mouse isn't being passed to another mouse event]==],
	None = [==[The client's operating system is unknown]==],
	TeleportToPlaceInstance = [==[Teleports a <code>Player</code> to the server instance associated with the given <em>placeId</em> and <em>instanceId</em]==],
	ServerInstanceId = [==[The <code>DataModel.JobId</code> of the server instance to teleport t]==],
	ServiceProvider = [==[A ServiceProvider is an abstract class, which stores, and provides certain singleton classes, depending on what inherited class you are using its members with]==],
	Force = [==[Determines the force exerted on each axi]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Point = [==[Sets the Vector3 target of the lasso object]==],
	SurfaceTransparency = [==[Determines the transparency of the box's surfaces, similar to <code>BasePart.Transparency</code]==],
	Set = [==[Sets the currently selected objects in Roblox Studio to <code>Instance</code>s in the given array]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Occupant = [==[The humanoid that is sitting in the sea]==],
	Disabled = [==[Whether or not the seat is usable. If set to true, the seat will act as a normal part]==],
	Unauthorized = [==[The player is not authorized to complete this teleport]==],
	Head = [==[Reference to a Humanoid's Head]==],
	FailFinishNotEmpty = [==[Failed to compute path; the finish point is not empty]==],
	HorizontalScrollBarInset = [==[Indicates the inset behavior of the horizontal scrolling bar]==],
	Scriptable = [==[The player will not respond to default controls; any character movement must be defined in custom scripts]==],
	TerrainVoxels = [==[Occupancy/Material data of the Terrain]==],
	PartOperationAsset = [==[An internal service which cannot be used by developers]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Scale = [==[Determines the multiplier to apply to the parent UI element's size]==],
	AngularActuatorType = [==[Type of angular actuator: None, Motor, or Servo]==],
	UnequipTools = [==[Unequips any <code>Tool</code> currently equipped by the <code>Humanoid</code]==],
	SetMaterialColor = [==[Sets current terrain material color for specified terrain material]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	InitialEnabled = [==[The enabled state of the <code>PluginGui</code> if it does not have a saved state from a previous session]==],
	EasingDirection = [==[The easing direction to use when performing an animation]==],
	Torso = [==[If the limb is a part of the Humanoid's Torso. <em>This includes UpperTorso and LowerTorso for R16 rigs.</em]==],
	SetWaypoint = [==[Sets a new waypoint which can be used as an undo or redo point]==],
	GetWatches = [==[Returns a list with all the watches for this debugge]==],
	GetUpvalues = [==[Returns a dictionary of all upvalues present in the stack specified]==],
	GetStack = [==[Returns an array of all active call stacks in the script]==],
	GetRenderCFrame = [==[Returns the actual <code>DataType.CFrame</code>where the <code>Camera</code> is being rendered, accounting for any roll applied and the impact of VR device]==],
	GetGlobals = [==[Returns a dictionary of all variables that are visible to the script's global stack, where the keys are the names of the variables, and the values are the actual values of the variables]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	IsPaused = [==[Describes if this ScriptDebugger is paused]==],
	LeafyGrass = [==[Applies to <code>Terrain</code> only]==],
	IsDebugging = [==[Describes if this ScriptDebugger is actually debugging the script attached to it]==],
	CurrentLine = [==[The current line that the script is on]==],
	pack = [==[Returns a new table containing the provided values]==],
	MetalnessMap = [==[Determines which parts of the surface are metal and are non-meta]==],
	OverlapParams = [==[A container for parameters used in boundary-querying functions]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	SoundGroup = [==[The <code>SoundGroup</code> that is linked to this <code>Sound</code>. Volume and SoundEffects applied to this sound group will pass onto the sound. A sound can only be in one sound group at a time]==],
	BreakJoints = [==[Breaks any surface connection with any adjacent part, including <code>Weld</code> and other <code>JointInstance</code>]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Velocity = [==[The velocity a SlidingBallConstraint with <code>SlidingBallConstraint.ActuatorType</code> set to <code>Enum.ActuatorType</code> will attempt to achieve. Measured in studs/second]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Source = [==[The code to be execute]==],
	ScreenGui = [==[Primary container of on-screen 2D user interface elements]==],
	ReflectionMetadataCallbacks = [==[Acts as a <code>Folder</code> containing information about callbacks for a <code>ReflectionMetadataClass</code>, and should be parented to it.
<code>ReflectionMetadataMember</code>s that are parented to this object will be perceived as callbacks under the class this is parented to]==],
	fromAxisAngle = [==[Returns a rotated CFrame from a Unit Vector3 and a rotation in radians]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	XVector = [==[Equivalent to the first column of the rotation matrix]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	None = [==[The user did not swipe in a certain direction]==],
	AspectType = [==[Determines what limits the maximum size of the UI element]==],
	UnbindFromRenderStep = [==[Unbinds a function that was bound to the render loop using <code>RunService:BindToRenderStep</code]==],
	SetNetworkOwner = [==[Sets the given player as network owner for this and all connected part]==],
	FillEmptySpaceColumns = [==[Determines whether cells are sized such that they occupy the horizontal space of the parent UI element]==],
	IsServer = [==[Returns whether the current environment is running on the serve]==],
	IsClient = [==[Returns whether the current environment is running on the clien]==],
	GetScheduledNotifications = [==[<b>(UNIMPLEMENTED)</b]==],
	Workspace = [==[A reference to the <code>Workspace</code> servic]==],
	Cartoon = [==[<img src="/assets/blt5a8c60f0e7d95b64/Font-Face-Sample-Cartoon.png" class="img-fluid half-sized" /]==],
	ImportOrigin = [==[Describes where a global zero was while authoring the cage mesh in an asset creation tool]==],
	EmulatorDropDown = [==[The color of the device and physical size dropdowns in the emulator ba]==],
	GetValueAtTime = [==[Samples the RotationCurve at a given time and returns the corresponding rotation. Empty RotationCurves are interpreted as zero]==],
	Sarpanch = [==[<style>@import url('https://fonts.googleapis.com/css2?family=Sarpanch');</style>
<p class="text-nowrap" style={{fontFamily: 'Sarpanch', fontSize: '1.65em', margin: '5px 0px'}}>The quick brown fox jumps over the lazy dog.<br />0123456789 , : ! ? # % & ( ) - + ]==],
	PaddedCell = [==[Sound reverb is changed to sound like the player is in a padded cell]==],
	AddDebugger = [==[Registers a script to be used in the Lua Debugger. Returns a <code>ScriptDebugger</code> for the script]==],
	SeatPart = [==[A reference to the seat that a <code>Humanoid</code> is currently sitting in, if any]==],
	Length = [==[Number of rotation keys in this curv]==],
	Translator = [==[The role of a Translator is to manufacture/return strings localized for the viewing playe]==],
	Length = [==[The maximum distance two <code>Attachment</code> can be when connected with a RopeConstraint. Measured in studs]==],
	WaterReflectance = [==[Controls how opaque the Terrain's water reflections are]==],
	Length = [==[The distance apart the RodConstraint attempts to keep its <code>Attachment</code> at. Measured in studs]==],
	cos = [==[Returns the cosine of x (assumed to be in radians)]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	MaxSpeed = [==[Determines the maximum speed at which the part will move toward the <code>RocketPropulsion.Target</code]==],
	CartoonFactor = [==[Determines the tendency of the part to face the <code>RocketPropulsion.Target</code]==],
	RocketPropulsion = [==[Applies a force so that a part follows and faces another par]==],
	RigidConstraint = [==[Creates a rigid connection between two Attachment]==],
	NetworkMarker = [==[The NetworkMarker is used to tell the client when the server has finished loading the world for the client]==],
	Density = [==[Controls how many reflections are generated]==],
	Pebble = [==[Applies to <code>BasePart</code> only]==],
	DataStoreKeyInfo = [==[An object specifying information about a particular version of the key]==],
	SelectionBox = [==[Renders a 3D box around its <code>PVAdornment.Adornee</code]==],
	PackageLink = [==[Links a <code>DataModel</code> instance to a corresponding asset in the clou]==],
	None = [==[Default sizing behavio]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	GetPanSpeed = [==[Returns the current ‘pan’ speed of the <code>Camera</code]==],
	WeldConstraint = [==[Joins two <code>BasePart</code> together such that their relative position and orientation remain the same]==],
	GetOutfits = [==[Returns outfit data for the <code>Players.LocalPlayer</code]==],
	Thickness = [==[The visualized thickness of the RodConstraint]==],
	CreateCollisionGroup = [==[Creates a new collision group with the given name, and returns the id of the created group]==],
	UserDialog = [==[Sets what the player will say when they choose this DialogChoice]==],
	FrameRateManager = [==[Specifies the behavior of the framerate manager]==],
	Seated = [==[Fired when a <code>Humanoid</code> either sits in a <code>Seat</code> or <code>VehicleSeat</code> or gets u]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	AspectRatio = [==[Determines the width-to-height ratio to be maintained by the constraint]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	RemoteFunction = [==[Used to create in-game APIs that both the client and the server can use to communicate with each other]==],
	OnServerEvent = [==[Fires listening functions in <code>Script</code> when <code>RemoteEvent:FireServer</code> is called from a <code>LocalScript</code>]==],
	BillboardGui = [==[Containers for GUI objects that appear in the 3D spac]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	DecayTime = [==[Sets how long it takes for the reverberating echoes to fade out completely]==],
	TopLeft = [==[Grid starts in top left corner]==],
	Plastic = [==[Applies to <code>BasePart</code> only]==],
	GripRight = [==[One of the properties that specifies a Tool's orientation in a character's hand. This represents the R00, R10, and R20 values of the Grip CFrame's rotation matri]==],
	SetEmotesMenuOpen = [==[Used to open or close the Emote menu]==],
	ReflectionMetadataItem = [==[Acts as abstract properties for generic information about Classes, Members, Enums, and EnumItems]==],
	ReflectionMetadataEnum = [==[Registers information about an <code>Enum</code> and its EnumItem]==],
	Alley = [==[Sound reverb is changed to sound like the player is in an alley]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	RemoveEntryValue = [==[Removes a single language translation from the LocalizationTable, using the provided <i>key</i>, <i>source</i>, <i>context</i>, and <i>localeId</i> to narrow down the specific entry to be removed]==],
	clamp = [==[Returns a number between [min, max]]==],
	MotorMaxAcceleration = [==[The maximum acceleration a SlidingBallConstraint with <code>SlidingBallConstraint.ActuatorType</code> set to <code>Enum.ActuatorType</code> can apply when trying to reach its desired <code>SlidingBallConstraint.Velocity</code>]==],
	Padding = [==[Determines the amount that pages are separated from each other by]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	ReachedTarget = [==[Fired when the Rocket comes within TargetRadius of the Target. This is used to make the rocket work, such as make an explosion when it flies near the Target]==],
	StarterPlayer = [==[A service which allows the defaults of properties in the <code>Player</code> object to be set]==],
	RowMajor = [==[The direct siblings are considered rows]==],
	GetAvatarRules = [==[Returns the platform Avatar rules for things like scaling, default shirts and pants, number of wearable assets, ect]==],
	Position = [==[The 3D position of the waypoint]==],
	GetValueAtTime = [==[Samples the float curve at a given time passed as argument]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	DevCameraOcclusionMode = [==[Sets how the default camera handles objects between the camera and the player]==],
	MaxParts = [==[The maximum amount of parts to be returned by the query]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	fromUnixTimestamp = [==[Returns a DateTime representing the given Unix timestamp]==],
	StringValue = [==[A container object for a single string]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	RayValue = [==[A container object for a single Ray]==],
	GetTemporaryId = [==[Gets a <em>rbxtemp</em> asset id for this <code>File</code]==],
	PromptTriggered = [==[Triggers when the user interacts with this promp]==],
	PromptTriggerEnded = [==[Triggers when the player stops holding down the <code>ProximityPrompt.KeyboardKeyCode</code>/button while triggering a promp]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	PhysicsCollision = [==[Collision detection in the Workspace]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	PromptButtonHoldBegan = [==[Triggers when the player begins holding down the <code>ProximityPrompt.KeyboardKeyCode</code>/button on a prompt with a non-zero <code>ProximityPrompt.HoldDuration</code]==],
	CanTouch = [==[Determines if the part will trigger <code>BasePart.Touched</code>/<code>BasePart.TouchEnded</code> events on other <code>BasePart</code> with <code>TouchTransmitter</code]==],
	OneGlobally = [==[One prompt will be shown per input <code>enum.KeyCode</code]==],
	Interpolation = [==[The key interpolation mode for the segment started by this key]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	CreatePlaceInPlayerInventoryAsync = [==[Clones a place which has placeId equal to given templatePlaceId and puts it into the inventory of the given player]==],
	PathfindingModifier = [==[Modifiers used to represent space that has a higher or lower cost to be traversed when creating paths using the <code>PathfindingService</code]==],
	Changed = [==[Fired whenever the <code>ObjectValue.Value</code> is change]==],
	unpack = [==[Returns all elements from the given list as a tuple]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	AutoRuns = [==[If set to true, the game will start running when the TestService's <code>TestService:Run</code> method is called]==],
	WindowFocused = [==[Fires when the user begins interacting with the window of the PluginGui]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Status = [==[The status of the package]==],
	PromptButtonHoldEnded = [==[Triggers when the player ends holding down the button on a prompt with a non-zero <code>ProximityPrompt.HoldDuration</code]==],
	Min = [==[Returns a <code>Vector2</code> where each component is the lowest among the respective components of the provided <code>Vector2</code>s]==],
	AdvanceToNextPageAsync = [==[Iterates to the next page in the pages object, if possible]==],
	GamepadKeyCode = [==[The gamepad button the player should press to trigger the promp]==],
	Enabled = [==[Toggles whether or not the PostEffect is enabled]==],
	PostEffect = [==[Abstract base class for post-processing effect]==],
	Pose = [==[A Pose holds the <code>CFrame</code> applied to the <code>Motor6D</code> connected to its associated <code>BasePart</code>. The part which is controlled depends on the name of the Pose]==],
	CorePackages = [==[An internal service which stores <code>ModuleScript</code>s used by Roblox's <code>CoreScript</code>s]==],
	InvokeChatCallback = [==[Invoke a chat callback function registered by <code>Chat:RegisterChatCallback</code>. Used by the Lua Chat System]==],
	Right = [==[The user swiped right]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	GetGamePointBalance = [==[Returns the total number of points a player has in the current gam]==],
	Lerp = [==[Returns a CFrame interpolated between this CFrame and the goal by the fraction alpha]==],
	GetRemoteBuildMode = [==[This method is no longer useful and will always return fals]==],
	PointsService = [==[This service controls the points award system used to showcase a player's achievements and participation throughout Roblo]==],
	CurrentAngle = [==[The current angle of the HingeConstraint]==],
	xAxis = [==[A Vector3 with a value of 1 on the X axis]==],
	ResetOrientationToIdentity = [==[Resets the rotation of the model's parts to the previously set identity rotation, which is done through the <code>Model:SetIdentityOrientation</code> method]==],
	IsRegion3EmptyWithIgnoreList = [==[Returns a bool indicating whether there are no <code>BasePart</code>s within in the given <code>DataType.Region3</code>, ignoring any <code>BasePart</code>s that are descendants of the objects within the given ignore list]==],
	Inverse = [==[Volume attenuates from <code>Sound.EmitterSize</code> in an inverse manne]==],
	spawn = [==[Calls a function immediately through the engine scheduler, with throttling]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	AddNewAction = [==[Creates a temporary action that is hidden from Studio's customize shortcuts window
<ul>
<li>This function creates a temporary action that is hidden from Studio's customize shortcuts window.</li>
</ul>
<h2>See also</h2>
<ul>
<li><code>articles/Intro to Plugins</code>, an introductory article to plugin use and development</li>
<li><code>PluginAction</code>, an object that represents a generic performable action in Roblox Studio, with no directly associated <code>Toolbar</code> or <code>Button</code>.</li>
<li><code>Plugin:CreatePluginAction</code>, creates a PluginAction</li>
<li><code>PluginMenu.Title</code>, the text to be displayed when used as a sub menu</li>
<li><code>PluginMenu.Icon</code>, the icon to be displayed when used as a sub menu</li>
<li><code>PluginMenu:AddAction</code>, adds the given action to the menu</li>
<li><code>PluginMenu:AddMenu</code>, adds the given menu as a separator</li>
<li><code>PluginMenu:AddSeparator</code>, adds a separator between items in the menu</li>
<li><code>PluginMenu:Clear</code>, clears the menu</li>
<li><code>PluginMenu:ShowAsync</code>, shows the menu at the mouse cursor. Yields until either an item is selected or the menu is closed. The selected action fires its Triggered event</li>
</ul]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Torque = [==[The strength and direction of the torque]==],
	Radius = [==[The visualized radius of the spring's coils]==],
	ManualActivationOnly = [==[The ManualActivationOnly property controls whether the <code>Tool</code> can be activated without executing <code>Tool:Activate</code]==],
	Clear = [==[Clears all particles that have been emi]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	IsInGroup = [==[Checks whether a player is a member of a group with the given ID]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	PluginGuiService = [==[A service that stores <code>PluginGui</code> objects to be displayed in Roblox Studio]==],
	EasingDirection = [==[The direction in which the EasingStyle executes]==],
	PromptCreateOutfit = [==[Prompts the <code>Players.LocalPlayer</code> to save the given <code>HumanoidDescription</code> as an outfi]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	PluginDragEntered = [==[Fires when the user's mouse enters a PluginGui during a drag operation started by <code>Plugin:StartDrag</code]==],
	IsUserAvailableForExperiment = [==[Returns true if the user is available for Roblox experiment]==],
	Localize = [==[Automatically set to true when a LocalizationTable's Root targets this object, or an ancestor of this object]==],
	RelativeYY = [==[The scale of Y is shared with ]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	LeftLipCornerDown = [==[Lowers the corners of the mouth downwards in a frow]==],
	AllowBinding = [==[Whether the <code>PluginAction</code> will be hidden from Studio's shortcuts vie]==],
	CurrentScreenOrientation = [==[Describes the user's current screen orientation]==],
	Unloading = [==[Fires immediately before the <code>Plugin</code> stops runnin]==],
	InvokeClient = [==[Calls the method bound to the RemoteFunction by <code>RemoteFunction.OnClientInvoke</code> for the given <code>Player</code>. Use from a <code>Script</code>]==],
	ApplicationJson = [==[The HTTP request data is in Jso]==],
	Deactivation = [==[Fired when the plugin is deactivate]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	tonumber = [==[Returns the provided value converted to a number, or nil if impossible]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	PromptSaveSelection = [==[Prompts the user to save their current selection with the specified file name. Returns true if the user did save the file]==],
	CarpettedHallway = [==[Sound reverb is changed to sound like the player is in a carpeted hallway]==],
	Sphere = [==[The mesh is a sphere]==],
	WalkToPart = [==[A reference to a part whose position is trying to be reached by a humanoid]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Separate = [==[Separates the given UnionOperations and returns the resulting parts]==],
	ReferenceMeshId = [==[AssetID for reference mesh used to define Inner Cage of a 3D objec]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Diffusion = [==[Controls how smooth and reflective the simulated surfaces are]==],
	None = [==[The ScrollingFrame will never be insetted for this scrolling bar]==],
	SetCore = [==[Allows you to perform certain interactions with Roblox's <code>CoreScript</code]==],
	Metal = [==[Applies to <code>BasePart</code> only]==],
	IsActivated = [==[Returns true if this plugin is currently active, after having been activated via the <code>Plugin:Activate</code> functio]==],
	DistanceUpperLimit = [==[Determines the distance in studs that a <code>BillboardGui</code> will stop scaling smaller in size a]==],
	AllowCustomAnimations = [==[Describes the current game's permission levels regarding custom avatar animations from the websit]==],
	AddStatus = [==[Adds a BoolValue to the Humanoid's <em>Status</em> object]==],
	SetLocal = [==[Sets the value of the variable <i>name</i> as <i>value</i> in the stack specified]==],
	CreatePluginMenu = [==[Creates a new plugin men]==],
	RobloxLocked = [==[A deprecated property that used to protect <code>CoreGui</code> object]==],
	Fondamento = [==[<style>@import url('https://fonts.googleapis.com/css2?family=Fondamento');</style>
<p class="text-nowrap" style={{fontFamily: 'Fondamento', fontSize: '1.75em', margin: '5px 0px'}}>The quick brown fox jumps over the lazy dog.<br />0123456789 , : ! ? # % & ( ) - + ]==],
	HttpEnabled = [==[Indicates whether http request can be sent to external website]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	GetDeveloperProductsAsync = [==[Returns a <code>Pages</code> object which contains information for all of the current game's developer products]==],
	NX = [==[The client is running on an NX Operating System (Cisco Nexus)]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	ClearTouchCameraMovementModes = [==[Unregisters all TouchCameraMovementMode enums from the game settings menu]==],
	TextFits = [==[A boolean representation of whether the TextButton's text fits within the size of it]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	GuidRegistryService = [==[An internal service, whose functionality is not accessible to developers]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	FindFirstAncestorOfClass = [==[Returns the first ancestor of the <code>Instance</code> whose <code>Instance.ClassName</code> is equal to the given className]==],
	WalkAnimation = [==[The asset is a walk animation]==],
	VectorToWorldSpace = [==[Returns a Vector3 rotated from Object to World space]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	GetUserThumbnailAsync = [==[Returns the content URL of a player thumbnail given the size and type (avatar, bust, headshot), and a bool describing if the image is ready to be use]==],
	Own = [==[The current user or group roleset can download a copy of the page from Roblox, publish package changes to Roblox, and manage who has access to the package]==],
	NumberRange = [==[A datatype that represents a range of numbers]==],
	elapsedTime = [==[Returns the amount of time in seconds that the current instance of Roblox has been running for]==],
	Left = [==[The left face of a Part]==],
	OnScreenKeyboardSize = [==[Determines the size of the on-screen keyboar]==],
	GetFriendsAsync = [==[Returns a <code>FriendPages</code> object which contains information for all of the given player's friend]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	ShowAsync = [==[Shows the menu at the mouse cursor. Yields until either an item is selected or the menu is close]==],
	WhisperChat = [==[Delivers the given message to a recipient without anyone else seein]==],
	CageMeshId = [==[Asset ID for cage mesh]==],
	MeleeWeapons = [==[Gear with the 'Melee' attribute.
<img alt="Melee Attribute" src="/assets/bltb08afda60a136e61/GearType_Melee.png" /]==],
	All = [==[The game's genre is set to All. The game will be listed as all possible genres]==],
	TeleportOptions = [==[Optional input arguments to the <code>TeleportService:TeleportAsync</code> functio]==],
	Activated = [==[Fired when the player clicks while a tool is equippe]==],
	LocalToolEquipped = [==[Fires when the current player equips a <a href="/api-reference/class/Tool" class="mw-redirect" title="Tool">Tool</a>]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Enemy = [==[Causes the dialog to have a red bar on its left-hand side]==],
	BubbleChat = [==[Indicates whether or not bubble chat is enabled. It is set with the <code>Players:SetChatStyle</code> method]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	SetTopbarTransparency = [==[Sets the transparency of the Topbar CoreGui]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Size180x180 = [==[Thumbnail resolution is 180 pixels x 180 pixels]==],
	ScreenOrientation = [==[Sets the preferred screen orientation mode for this user, if the user is on a mobile device]==],
	ToLocalTime = [==[Returns the components of the DateTime in local time]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	SetCoreGuiEnabled = [==[Sets whether the <code>CoreGui</code> element associated with the given <code>Enum.CoreGuiType</code> is enabled or disable]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	LeftHand = [==[Reference to a Humanoid's LeftHand]==],
	ExportSelection = [==[Exports the current <code>Selection</code> to an .OBJ file that is saved to the path chosen by the user in a file save dialogue (the <code>filePath</code> argument is ignored)]==],
	Warn = [==[Prints if a condition is true, otherwise prints a warning]==],
	GetRankInGroup = [==[Returns the player's rank in the group as an integer between 0 and 255, where 0 is a non-member and 255 is the group's owner]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	IndieFlower = [==[<style>@import url('https://fonts.googleapis.com/css2?family=Indie+Flower');</style>
<p class="text-nowrap" style={{fontFamily: 'Indie Flower', fontSize: '1.85em', margin: '5px 0px'}}>The quick brown fox jumps over the lazy dog.<br />0123456789 , : ! ? # % & ( ) - + ]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	LinearVelocity = [==[Applies force on a part/assembly to maintain a linear velocity]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	GetKeyIndicesAtTime = [==[Returns the index of the last and first key of a period of time]==],
	TorsoColor = [==[Determines the <code>BodyColors.TorsoColor3</code> of a Humanoid when applie]==],
	SaveNumber = [==[Saves a number value that can be loaded again at a later time usin]==],
	Terrain = [==[Terrain lets you to create dynamically morphable environment]==],
	Move = [==[Causes the player's character to walk in the given direction until stopped, or interrupted by the player (by using their controls)]==],
	GetPlayerByUserId = [==[Returns the <code>Player</code> with the given <code>Player.UserId</code> if they are in-gam]==],
	LoadString = [==[Returns a string value that was previously saved to the playe]==],
	LightEmission = [==[Sets how much the colors of the trail are blended with the colors behind them]==],
	GetMotor = [==[Returns the current vibration value set to the specified <a href="/api-reference/property/InputObject/UserInputType" class="mw-redirect" title="UserInputType">UserInputType</a> and <a href="/api-reference/enum/VibrationMotor" class="mw-redirect" title="VibrationMotor">VibrationMotor</a>.
This will not return anything if <a href="/api-reference/function/HapticService/SetMotor" class="mw-redirect" title="SetMotor">SetMotor</a> has not been called prior.]==],
	FindPartOnRayWithIgnoreList = [==[Returns the first <code>BasePart</code> or <code>Terrain</code> cell intersecting with the given <code>DataType.Ray</code> that isn't in, nor is a descendant of an object in, the given ignore lis]==],
	LoadCharacterAppearance = [==[Places the given instance either in the player's character, head, or StarterGear based on the instance's class]==],
	Equipped = [==[Fired when the skateboard is equipped]==],
	ThrustD = [==[Determines the dampening applied to the part in order to prevent it from overshooting the <code>RocketPropulsion.Target</code]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	RemoveMarker = [==[Removes a <code>KeyframeMarker</code> from the <code>Keyframe</code>by settings its <code>Instance.Parent</code> to ni]==],
	ComputeSmoothPathAsync = [==[Computes and returns a smooth <code>Path</code> between two <code>DataType.Vector3</code]==],
	Width = [==[The X dimension of the UDim2]==],
	HasAppearanceLoaded = [==[Returns whether or not the appearance of the player's character has loaded]==],
	GetMouse = [==[Returns the mouse being used by the client]==],
	asin = [==[Returns the arc sine of x]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	GetMemoryUsageMbForTag = [==[Returns the number of megabytes that are being consumed in the specified <i>DeveloperMemoryTag</i> category]==],
	ReportSoundWarnings = [==[Whether or not sound warnings should be reported]==],
	ShadowMap = [==[Future-Is-Bright lighting features. Features crisp shadows.
<img alt="ShadowMap" src="/assets/blt5d79df0c0af20ab8/Technology.ShadowMap.jpg" /]==],
	GetEmotesMenuOpen = [==[Checks if the player Emotes menu is open]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	PhysicsSteppingMethod = [==[Sets how the solver will advance the physics simulation forward in time]==],
	Movement = [==[(2) - 2nd highest priorit]==],
	NameDisplayDistance = [==[Sets the distance at which this player will see other Humanoid's names. If set to 0, names are hidden]==],
	MaximumSimulationRadius = [==[The maximum value a Player's <code>Player.SimulationRadius</code> can grow to]==],
	RightLeg = [==[Determines the asset ID of the RightLeg to be applied to the <code>Humanoid</code]==],
	DevTouchCameraMode = [==[Determines player's camera movement mode when using a touch device]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	DataReady = [==[Indicates when the player's data is available to loa]==],
	CanLoadCharacterAppearance = [==[Determines whether the character's appearance will be loaded when the player spawns. If false, the player will spawn with a default appearance]==],
	TextureLength = [==[Sets the length of the <code>Beam</code>s texture if <code>Beam.TextureMode</code> is 'Wrap' or 'Static'. If <code>Beam.TextureMode</code> is 'Stretch' then it determines the size of the texture relative to the <code>Beam</code> length]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	VectorToObjectSpace = [==[Returns a Vector3 rotated from World to Object space]==],
	Torso = [==[Determines the asset ID of the Torso to be applied to the <code>Humanoid</code]==],
	OverrideCoreScripts = [==[If set to true, the <code>Studio.OverrideCoreScriptsDir</code> will be used for CoreScripts in Roblox Studio, instead of the default <code>rbxasset://scripts</code> directory]==],
	AreRegionsShown = [==[When set to true, a cylinder is drawn around each <code>Player</code>'s character, representing their <code>Player.SimulationRadius</code>]==],
	SetPartCollisionGroup = [==[Sets the collision group of a part]==],
	DevComputerMovementMode = [==[Lets developer overwrite the player's movement mode if the player is on a computer]==],
	EquipTool = [==[Makes the <code>Humanoid</code> equip the given <code>Tool</code]==],
	RemoveCollisionGroup = [==[Removes the collision group with the given name]==],
	GetCollisionGroups = [==[Returns a table with info on all of the place's collision groups]==],
	Float = [==[The widget will not be docked to any side of the game screen, and instead can be freely dragged aroun]==],
	Symmetric = [==[Increases by a rate of 1 along all axes]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	LightEmission = [==[Determines how much particles' colors are blended with the colors behind the]==],
	ScrollWheelInputEnabled = [==[Controls the use of scroll wheel, in case that it is intended for something else. Defaults to true]==],
	FormatUniversalTime = [==[Returns the DateTime's value in UTC formatted into a string]==],
	CurrentCamera = [==[<code>Camera</code> that is used to render children object]==],
	GetSubPoses = [==[This function returns an array containing all sub <code>Pose</code>s that have been added to a <code>Pose</code>]==],
	IsRunning = [==[Returns whether the game is currently runnin]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	DestroyJointRadiusPercent = [==[Used to set the proportion of the <code>Explosion.BlastRadius</code>, between 0 and 1, within which all joints will be destroyed. Anything outside of this range will only have the <code>Explosion</code> force applied to it]==],
	LockedToPart = [==[Determines whether the particles rigidly move with the part they're being emitted from]==],
	From = [==[The object that the FloorWire travels from]==],
	EmptyCutoff = [==[Sets the percent of a voxel has to be occupied to be considered empty. Defaults to 0.16]==],
	PassThrough = [==[Determines if the parts enclosed by the modifier are traversable, even if they would normally be collided with]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	MaxTextSize = [==[The largest size in pixels the font is allowed to b]==],
	ComputeAsync = [==[Computes a <code>Path</code> from a start position to an end positio]==],
	MotorMaxTorque = [==[The maximum torque a HingeConstraint with <code>HingeConstraint.ActuatorType</code> set to <code>Enum.ActuatorType</code> can apply when trying to reach its desired <code>HingeConstraint.AngularVelocity</code>]==],
	GetRenderCFrame = [==[<em>(OBSOLETE)</em> Returns a CFrame describing where the part is being rendered a]==],
	Size28 = [==[Font size 28]==],
	TriangleCount = [==[The number of polygons in this solid model. This value will always be &lt;= 5000]==],
	HeadScale = [==[Determines by what factor the Head of a <code>Humanoid</code> is scaled; when <code>Humanoid:ApplyDescription</code>, maps to the "HeadScale" <code>NumberValue</code> within the Humanoi]==],
	GetSortedAsync = [==[Refers to <code>GlobalDataStore.GetAsync</code> while using an <code>OrderedDataStore</code>]==],
	QualityLevel = [==[If <code>RenderSettings.EnableFRM</code> is set to true, this property controls the quality level in Roblox Studio]==],
	ShirtTemplate = [==[Determines the texture of the <code>Shirt</code>. The content ID link pointing to the shirt template hosted on the Roblox website]==],
	FallenPartsDestroyHeight = [==[Determines the height at which falling <code>BasePart</code> (and their ancestor <code>Model</code>) are destroye]==],
	Front = [==[Whether the front face is included]==],
	Lifetime = [==[Defines a random range of ages for newly emit particle]==],
	PromptPurchaseFinished = [==[Fires when a purchase prompt closes for an affiliate gear sale or other asset (does not fire for developer product or game pass prompts]==],
	TeamColor = [==[The <code>Team</code> this flag is for. Corresponds with the TeamColors in the <code>Teams</code> servic]==],
	ColorShift_Top = [==[The hue represented in light reflected from surfaces facing the sun or moon]==],
	Enabled = [==[Determines whether particles ought to be emi]==],
	Acceleration = [==[Determines the global-axis acceleration of all alive particles, measured in studs per second square]==],
	ParticleEmitter = [==[A special effects object that emits customizable 2D billboard particles into the worl]==],
	Part = [==[The Part object is a physical object, commonly known as a <strong>brick</strong]==],
	PrimaryAxisOnly = [==[If true, the <code>AlignOrientation</code> applies torque if the primary axis of its <code>Constraint.Attachment0</code> becomes unaligned with the goal]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	MeshPart = [==[A form of <code>BasePart</code> that includes a physically simulated custom mesh]==],
	Offset = [==[The Offset of a mesh determines the relative position from the <code>BasePart.Position</code> of a <code>BasePart</code> that the mesh will be displayed at]==],
	Creator = [==[The creator of the package asset]==],
	BindAction = [==[Bind user input to an action given an action handling function]==],
	Torque = [==[A constraint used to apply a torque to a part or assembl]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	NameDisplayDistance = [==[Used in conjunction with the Humanoid's DisplayDistanceType property to either determine how far a player controlling this Humanoid can see another humanoid's name, or how far this Humanoid's name displays to other viewing players]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	OrderedDataStore = [==[A GlobalDataStore that also allows for ordered data store entrie]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Trace = [==[Trace is the noisiest level, rarely (if ever) enabled for a production ap]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Size11 = [==[Font size 11]==],
	DidLoop = [==[Event that fires whenever the <code>Sound</code> loops. Returns soundId and numOfTimesLooped, giving the contentID of the sound and the number of times looped respectively]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	MeshType = [==[Determines the type of mesh that will be applied to the <code>BasePart</code> the <code>SpecialMesh</code> is parented to]==],
	CancelNotification = [==[<b>(UNIMPLEMENTED)</b]==],
	RelativeTo = [==[The <code>DataType.CFrame</code> in which the force is expresse]==],
	Radius = [==[The constraint’s visualization radiu]==],
	NonReplicatedCSGDictionaryService = [==[A version of the <code>CSGDictionaryService</code> that does not replicate to clients]==],
	SourceSansLight = [==[<style>@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:ital,wght@0,300;0,400;0,600;0,700;1,400');</style>
<p class="text-nowrap" style={{fontFamily: 'Source Sans Pro', fontSize: '1.7em', fontWeight: 300, margin: '5px 0px'}}>The quick brown fox jumps over the lazy dog.<br />0123456789 , : ! ? # % & ( ) - + ]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Button2Up = [==[Fired when the right mouse button is release]==],
	TrackPhysicsDetails = [==[When set to true, this tells the replicator stats to sample replication physics details]==],
	SetEntryKey = [==[Sets the <b>Key</b> field of a LocalizationTable entry to <i>newKey</i>, using the specified <i>key</i>, <i>source</i>, and <i>context</i> to narrow down the entry that will have this change applied]==],
	GraphicsTerrain = [==[Rendering of terrain geometry]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	GetPlayer = [==[Returns the player that is connected to the NetworkReplicator]==],
	setmetatable = [==[Sets the given table's metatable]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	WrapTarget = [==[The WrapTarget object defines a target. A target is the 3D body with only an outer surface, or an Outer Cage]==],
	task = [==[This library allows for functions and coroutines to be coordinated with the Task Scheduler]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Face = [==[The face that the SurfaceGui is rendered on]==],
	Pause = [==[Sets <code>VideoFrame.Playing</code> to false, pausing playback if the <code>VideoFrame.Video</code> is playing]==],
	ResizeIncrement = [==[Describes the smallest change in size allowable by the Resize metho]==],
	ConnectionAccepted = [==[Fired when the client successfully connects to a server. Returns a string showing the server's IP and Port, and the client's <code>ClientReplicator</code>]==],
	SecondaryAxis = [==[The direction of the <code>Attachment</code>'s Y-Axis, represented as a unit <code>Vector3</code>]==],
	Precise = [==[Compute time using a precise method]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	ArcHandles = [==[The <b>ArcHandles</b> object places 3D ArcHandles around any object that its Adornee is set t]==],
	Accepted = [==[Text accepted by filter]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	GetSelectedRibbonTool = [==[Returns the currently selected <code>Enum.RibbonTool</code>]==],
	Title = [==[The title that is displayed above the contents of the <code>PluginGui</code]==],
	Player = [==[An object that represents a presently connected client to the game]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	IgnoreGuiInset = [==[When set to true, the <code>GuiService:GetGuiInset</code> imposed by Roblox's CoreGuis will be ignored by the ScreenGui and its descendants]==],
	WheelForward = [==[Fires when the mouse wheel is scrolled forwards]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Changed = [==[Fired when <code>RayValue.Value</code> is change]==],
	PluginMouse = [==[The PluginMouse object gives <code>Plugin</code>s access to the mouse. It works like the <code>Mouse</code> object and can be obtained using the plugin <code>Plugin:GetMouse</code> method]==],
	Move = [==[Fired when the mouse is moved]==],
	DominantAxis = [==[Determines the axis to use when setting the new size of the UI element]==],
	AngularResponsiveness = [==[Specifies the sharpness of the servo motor in reaching the <code>HingeConstraint.TargetAngle</code>]==],
	GripPos = [==[The positional offset of a Tool weld matri]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	EventDisconnected = [==[Fires when the receiver is attached to a different <code>CustomEvent</code> instance when the <code>CustomEventReciever.Source</code> property is changed]==],
	ScriptService = [==[An unimplemented service that has zero functionality, in a similar manner to the <code>LocalWorkspace</code> service]==],
	SunTextureId = [==[The texture of the sun while using this skybox]==],
	Instance = [==[The <code>BasePart</code> that the ray intersected]==],
	SetTextureOffset = [==[Sets the current offset of the <code>Beam</code>'s texture cycle]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	First = [==[This should run firs]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	ViewSizeX = [==[Describes the width of the game window in pixel]==],
	UnitRay = [==[A <code>DataType.Ray</code> directed towards the <code>Mouse</code>'s world position, originating from the <code>Workspace.CurrentCamera</code>'s world positio]==],
	TargetSurface = [==[Indicates the <code>Enum.NormalId</code> of the <code>BasePart</code> surface at which the mouse is pointin]==],
	SubscribeAsync = [==[Begins listening to the given topi]==],
	Hit = [==[The <code>DataType.CFrame</code> of the mouse's position in 3D spac]==],
	RemoveEntry = [==[Removes an entry from the LocalizationTable, using the specified <i>key</i>, <i>source</i>, and <i>context</i> to narrow down the specific entry to be removed]==],
	Begin = [==[Occurs when an <code>InputObject</code> starts to interact with the game. For example, a mouse button down, or a key down, or when a touch begins touching the screen]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	LeftHand = [==[Left hand]==],
	GetExtentsSize = [==[Returns the size of the smallest bounding box that contains all of the <code>BasePart</code>s in the <code>Model</code>, aligned with the <code>Model.PrimaryPart</code> if it is set]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	WorldPivot = [==[Determines where the pivot of a <code>Model</code> which does <strong>not</strong> have a set <code>Model.PrimaryPart</code> is located]==],
	PlayerChatted = [==[Fired when a player chats]==],
	GetFavorite = [==[Returns if the <code>Players.LocalPlayer</code> has favorited the given bundle or asse]==],
	Model = [==[Models are container objects, meaning they group objects together. They are best used to hold collections of <code>BasePart</code> and have a number of functions that extend their functionality]==],
	SetEntryExample = [==[Sets the <b>Example</b> field of a LocalizationTable entry to <i>example</i>, using the specified <i>key</i>, <i>source</i>, and <i>context</i> to narrow down the entry that will have this change applied]==],
	TextXAlignment = [==[Determines the horizontal alignment of rendered text]==],
	GamepadConnected = [==[Fires when a gamepad is connected to the client. Passes the ''gamepadNum'' of the gamepad that was connecte]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Heat = [==[Determines the velocity at which particles are emi]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Code = [==[<img src="/assets/blt06b912cfc8be6ebd/Font-Face-Sample-Code.png" class="img-fluid half-sized" /]==],
	MaxValue = [==[The highest number that the <code>DoubleConstrainedValue.Value</code> property can b]==],
	UIAspectRatioConstraint = [==[Ensures the parent UI element maintains a particular aspect ratio]==],
	Wood = [==[Applies to <code>BasePart</code> only]==],
	CookiesService = [==[A backend service used by Roblox to control HTTP cookies. Its functions are not available to developers]==],
	Fantasy = [==[<img src="/assets/blt2b8a67bb6bac95f2/Font-Face-Sample-Fantasy.png" class="img-fluid half-sized" /]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	SetEntryValue = [==[Sets the text of the specified localeId in a LocalizationTable entry, using the specified <i>key</i>, <i>source</i>, and <i>context</i> to narrow down the entry that will have this change applied]==],
	Explosives = [==[Gear with the 'Explosive' attribute.
<img alt="Explosive Attribute" src="/assets/blt9eee5ac8f58367c8/GearType_Explosive.png" /]==],
	Translate = [==[Returns the localized text string in a <code>LocalizationTable</code> based on its <code>Translator</code> locale, by source lookup]==],
	PrintPhysicsErrors = [==[When set to true, debug messages will be printed into the output pertaining to physics replication errors]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Lifetime = [==[Duration of the trail in seconds]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	PowerUps = [==[Gear with the 'Power Up' attribute.
<img alt="Power Up Attribute" src="/assets/blt0c97538d414a753b/GearType_PowerUp.png" /]==],
	RemoveAsync = [==[Removes the provided key from the sorted map]==],
	FindFirstAncestor = [==[Returns the first ancestor of the <code>Instance</code> whose <code>Instance.Name</code> is equal to the given name]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	LocaleId = [==[This property shows the locale id that the local player has set for their Roblox accoun]==],
	wrap = [==[Creates a new coroutine and returns a function that, when called, will resume the coroutine]==],
	Team = [==[Determines the Team with which a Player is associated]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	GetSortedMap = [==[Returns a <code>MemoryStoreSortedMap</code> instance for the provided name]==],
	GetQueue = [==[Returns a <code>MemoryStoreQueue</code> instance for the provided name]==],
	CameraType = [==[Specifies the <code>Enum.CameraType</code> to be read by the camera script]==],
	Width = [==[The width of the Rect]==],
	BodyMover = [==[Base class for objects that continually exert forces to part]==],
	ImageColor3 = [==[Determines how a rendered image will be colorized]==],
	PromptGameInvite = [==[Prompts the given <code>Player</code> with the game invite scree]==],
	Select = [==[Sets the color of the <code>Model.PrimaryPart</code> selection box]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	TouchEnded = [==[Fired when a user releases their finger from the screen on a TouchEnabled device - such as the screen of a mobile devic]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	MinLength = [==[Minimum length of a trail's segment in studs]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Value = [==[A value that is specified for a <code>KeyframeMarker</code]==],
	SpawnerService = [==[An internal service that is responsible for the behavior or <code>SpawnLocation</code>s. Its functionality is not accessible to developers]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Clothing = [==[Clothing is the base class for the <code>Shirt</code> and <code>Pants</code> clothing objects]==],
	Medium = [==[Medium priorit]==],
	BevelMesh = [==[An abstract class that <code>BlockMesh</code> and <code>CylinderMesh</code> inherit fro]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	ContentProvider = [==[The ContentProvider is a service that is used to load content, or assets, into a game]==],
	ImportFbxRig = [==[Prompts the user to open a .fbx file, uploads the individual components of the model as meshes, and generates a character rig for use in animation, which is loaded into the <code>Workspace</code>]==],
	PromptProductPurchaseFinished = [==[Fires when a purchase prompt closes for a developer product. Warning: do not use to process developer product purchases]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	coroutine = [==[A function that executes alongside the main thread]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	ClockTime = [==[A numerical representation (in hours) of the current time of day used by <code>Lighting</code>]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	DataStoreName = [==[The name of the data store]==],
	GetBoundingBox = [==[Returns a description of a volume that contains all parts of a Mode]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	AutomaticSize = [==[Determines whether resizing occurs based on child conten]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	MouseHoverEnter = [==[Fired when the <code>ClickDetector</code>'s parent is hovered upon by a playe]==],
	Version = [==[Uniquely identifies the version of the object]==],
	ColorSequence = [==[A gradient of color values comprised of <code>datatype.ColorSequenceKeypoint</code>s]==],
	Orthonormalize = [==[Returns an orthonormalized copy of the CFrame]==],
	UnixTimestampMillis = [==[The number of milliseconds between January 1st, 1970 at 00:00 UTC (the Unix epoch)]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	GetProductInfo = [==[Returns the product information of an asset using its assetI]==],
	Hat = [==[The asset is a hat]==],
	MessageOut = [==[Fired when text is added to the output]==],
	AnimationTrack = [==[Controls the playback of an animation on a <code>Humanoid</code> or <code>AnimationController</code>. This object cannot be created, instead it is returned by the <code>Humanoid:LoadAnimation</code> method]==],
	Disconnect = [==[Disconnects the connection from the event]==],
	GetNumAwakeParts = [==[Returns the number of <code>BasePart</code>s that are deemed physically active, due to being recently under the influence of physics]==],
	warn = [==[Behaves similarly to print, except with more distinct formatting (yellow); intended for messages which describe potential problems]==],
	GettingUp = [==[Fires when the <code>Humanoid</code> enters or leaves the <em>GettingUp</em> <code>Enum.HumanoidStateType</code]==],
	Color = [==[Sets the color of a GUI objec]==],
	Position = [==[Describes a positional value of this inpu]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	XY = [==[Automatically resize element along X and Y axes to fit child content]==],
	FilterType = [==[Determines how the <code>FilterDescendantsInstances</code> list will be used]==],
	PromptProductPurchase = [==[Used to prompt a user to purchase a product with the given product id]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	GetPhysicsThrottling = [==[Returns an integer, between 0 and 100, representing the percentage of real-time that physics simulation is currently being throttled to]==],
	RightLeg = [==[If the limb is a part of the Humanoid's Torso. <em>This includes UpperRightLeg and LowerRightLeg for R16 rigs.</em]==],
	ConvertToSmooth = [==[Transforms the TerrainRegion so it can be used with smooth terrain]==],
	Size60x60 = [==[Thumbnail resolution is 60 pixels x 60 pixels]==],
	LuaSourceContainer = [==[The base class for all objects which contain Lua code. <code>Script</code>, <code>LocalScript</code>, <code>ModuleScript</code> and <code>CoreScript</code> all inherit from LuaSourceContainer]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Sound = [==[A <code>Sound</code> is an object that emits sound. Sounds can be placed within a <code>BasePart</code> or <code>Attachment</code> to emit a sound from a particular position within a place or world, or it can be attached elsewhere to play the sound at a constant volume throughout the entire place]==],
	Enabled = [==[Determines whether the <code>Beam</code> is visible or not]==],
	XBoxOne = [==[The client is running on an XBox One (console)]==],
	LockCenter = [==[The mouse is locked, and cannot move from, the center of the user's screen]==],
	RenderStreamedRegions = [==[When set to true, regions of space that are being streamed to the client will be outlined in red]==],
	Configuration = [==[The Configuration object is a container object that is designed to hold value objects to make values used in <code>Tool</code>s or any model using <code>Script</code>s more accessible]==],
	Shutdown = [==[Shuts down the current game instanc]==],
	GetBreakpoints = [==[Returns a list of <code>DebuggerBreakpoint</code> present in the script]==],
	MeshId = [==[The MeshId is the content ID of the mesh that is to be displayed]==],
	GameFull = [==[The game that this player attempted to teleport to is full]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	TextBoxFocusReleased = [==[Fired when the client loses focus on a <code>TextBox</code]==],
	Legacy = [==[Lighting technology that predates Future-Is-Bright. It is no longer available]==],
	IsFocused = [==[Returns true if the textbox is focused, or false if it is not]==],
	TextStrokeTransparency = [==[Determines the transparency of the text stroke (outline)]==],
	Position = [==[Describes the position of the part in the worl]==],
	SetEntryContext = [==[Sets the <b>Context</b> field of a LocalizationTable entry to <i>newContext</i>, using the specified <i>key</i>, <i>source</i>, and <i>context</i> to narrow down the entry that will have this change applied]==],
	RelativeXX = [==[The scale of X is shared with ]==],
	RelativeTo = [==[Sets the <code>enum.ActuatorRelativeTo</code> property for the <code>LinearVelocity</code> constraint]==],
	SetEntries = [==[Sets the contents of the LocalizationTabl]==],
	replace = [==[Return a copy of a number with a range of bits replaced by a given value]==],
	Transform = [==[Describes the current animation offset of the <code>Motor6D</code> join]==],
	MoveToFinished = [==[Fires when the <code>Humanoid</code> finishes walking to a goal declared by <code>Humanoid:MoveTo</code]==],
	SearchKeyword = [==[The keyword to search for catalog results with]==],
	JawRight = [==[Moves mouth and jaw to the right (character right]==],
	SizeOffset = [==[Determines how the BillboardGui is offset on the screen in 2D space; units are relative to the <code>BillboardGui.AbsoluteSize</code]==],
	Handles = [==[The Handles object places 3D handles around any object that its Adornee is set t]==],
	Automatic = [==[Roblox will automatically decide what graphics mode to use, depending on what best suits your device's specifications]==],
	ModuleScript = [==[A type of script object that runs once when <code>require</code> is called with it. Returns exactly one value, usually a table of functions, to used by other scripts. Useful for compartmentalizing code]==],
	GetCountryRegionForPlayerAsync = [==[Returns country/region code string according to player's client IP geolocatio]==],
	GetString = [==[Returns a translation based on the specified language and key]==],
	SoundService = [==[A service that determines various aspects of how <code>Sound</code>s play in the game]==],
	RobloxLocaleId = [==[The locale id that the local player has set for their Roblox account]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	TextColor3 = [==[Determines the color of rendered tex]==],
	GetDeviceRotation = [==[Returns an <code>InputObject</code> and a <code>DataType.CFrame</code>,describing the device's current rotation vecto]==],
	NotificationService = [==[An internal service which cannot be used by developers]==],
	GetHash = [==[Returns a hash of the script's sourc]==],
	Length = [==[The length of the line]==],
	SetAccountAge = [==[Sets the AccountAge of the player]==],
	PrimaryTangentAxis = [==[The primary axis in the plane, when <code>LinearVelocity.VelocityConstraintMode</code> is set to <strong>Plane</strong>]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	TweenSize = [==[Smoothly resizes a GUI to a new <code>DataType.UDim2</code]==],
	MouseIconEnabled = [==[Determines whether the <code>Mouse</code> icon is visibl]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Technology = [==[A temporary non-scriptable property that determines the lighting system used to render the 3D world (e.g. legacy, Future Is Bright, shadow map)]==],
	GetPlayerFromCharacter = [==[Returns the <code>Player</code> whose <code>Player.Character</code> matches the given instance, or <code>nil</code> if one cannot be foun]==],
	FogColor = [==[A <code>DataType.Color3</code> value giving the hue of <code>Lighting</code>'s fog]==],
	GetRequestBudgetForRequestType = [==[Returns the number of requests that can be made by the given request type]==],
	IsTeleporting = [==[The player is currently being teleported]==],
	BodyPart = [==[The part of the Character's body that is affected]==],
	Ambient = [==[The lighting hue applied to areas that are occluded from the sky, such as indoor area]==],
	Cylinder = [==[A cylinder shaped par]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	RegisterKeyframeSequence = [==[Generates a temporary asset ID from a <code>KeyframeSequence</code> that can be used for localized testing of an animation. Generates a hash]==],
	HeartbeatTimeMs = [==[A measurement of the total amount of time it takes long it takes for Roblox to update all of its Task Scheduler jobs, in milliseconds]==],
	TextYAlignment = [==[Determines the vertical alignment of rendered text]==],
	DevEnableMouseLock = [==[Determines if the player can toggle mouse loc]==],
	AddKeyframe = [==[This function adds a <code>Keyframe</code> to the <code>KeyframeSequence</code> by parenting it to the <code>KeyframeSequence</code>]==],
	Changed = [==[Fired whenever the <code>Color3Value.Value</code> is changed]==],
	AuthoredHipHeight = [==[Contains the hip height of the <code>Humanoid</code> of the model that was used to author this <code>KeyframeSequence</code]==],
	KeyframeMarker = [==[An instance meant to represent an event that will eventually be fired when a <code>Keyframe</code> is hi]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	GetMarkers = [==[Returns an array containing all <code>KeyframeMarkers</code> that have been added to the <code>Keyframe</code]==],
	AddMarker = [==[Adds a <code>KeyframeMarker</code> to the <code>Keyframe</code> by parenting it to the keyfram]==],
	Keyframe = [==[A Keyframe holds the <code>Pose</code> applied to joints in a <code>Model</code> at a given point of time in an animation. <code>Keyframe</code>s are interpolated between during animation playback]==],
	ShowPermissibleJoints = [==[When used it will visibly display a potential surface connection between the two <code>BasePart</code>, which were set with <code>JointsService:SetJoinAfterMoveTarget</code> and <code>JointsService:SetJoinAfterMoveInstance</code>]==],
	Rotation = [==[A copy of the CFrame with no translation]==],
	Gotham = [==[<img src="/assets/bltbde5041ca08777a3/Font-Face-Sample-Gotham.png" class="img-fluid half-sized" /]==],
	KeyDown = [==[Fires when a Key is presse]==],
	Bathroom = [==[Sound reverb is changed to sound like the player is a bathroom]==],
	Radius = [==[The visualized radius of the HingeConstraint]==],
	Part0 = [==[The first <code>BasePart</code> that the joint connects]==],
	Image = [==[The image content displayed by the UI element]==],
	C0 = [==[Determines how the offset point is attached to <code>JointInstance.Part0</code>]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Ragdoll = [==[Fires when the <code>Humanoid</code> enters or leaves the <em>Ragdoll</em> <code>Enum.HumanoidStateType</code]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	PaddingBottom = [==[The padding to apply on the bottom side relative to the parent's normal size]==],
	ImportFbxAnimation = [==[Prompts the user to open a .fbx animation file that can be loaded onto the <i>rigModel</i>, then proceeds to insert the animation as a <code>KeyframeSequence</code> in the <code>Workspace</code]==],
	Changed = [==[Fired whenever the <code>IntValue.Value</code> of the IntValue is changed]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	utf8 = [==[This library provides basic support for <code>UTF-8</code> encoding]==],
	Concrete = [==[Applies to <code>BasePart</code> and <code>Terrain</code>]==],
	Size = [==[Determines the world size over individual particles' lifetime]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	GetFFlag = [==[Returns the value of an FFlag if it exists]==],
	ZOffset = [==[Determines the forward-backward render position of particles; used to control what particles render on top/botto]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	new = [==[Returns a Vector2int16 from the given x and y components]==],
	BindButton = [==[Activates an overriding bind on the specified button]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Check = [==[Prints result of condition to output]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Overlay = [==[Overlays the <code>SurfaceAppearance.ColorMap</code> on top of the underlying part color based on the ColorMap’s alpha channel
<img alt="AlphaMode OverLay" src="/assets/blt625b6777e66ae841/fern-cutout.png" /]==],
	Surface = [==[Joints are created between any kind of surface. Functions identically to Al]==],
	ceil = [==[Returns the smallest integer larger than or equal to x]==],
	DescendantAdded = [==[Fires when a descendant is added to the <code>Instance</code]==],
	reverse = [==[Returns a string that is the string s reversed]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	ShowDevelopmentGui = [==[Determines whether the contents of <code>StarterGui</code> is visible in studi]==],
	Restitution = [==[How elastic <code>Attachment</code> connected by a BallSocketConstraint will be when they reach the end of the range specified by <code>BallSocketConstraint.UpperAngle</code> when <code>BallSocketConstraint.LimitsEnabled</code> is true. Constrained between 0 and 1]==],
	ImageTransparency = [==[Determines the transparency of the rendered imag]==],
	Brightness = [==[Sets how bright the emitted light is, defaults to 1]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Position = [==[The 3D position of the CFrame]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Classic = [==[Camera tracks the player but will not automatically rotate if the player walks left or right]==],
	IsAncestorOf = [==[Returns true if an <code>Instance</code> is an ancestor of the given descendant]==],
	Bevel = [==[The corners are beveled (see image above]==],
	SavedQualityLevel = [==[The graphics quality level set by the client]==],
	GetFullName = [==[Returns a string describing the <code>Instance</code>'s ancestry]==],
	LimitAngle1 = [==[Determines the maximum angle between the rod and <code>Constraint.Attachment0</code> when <code>RodConstraint.LimitsEnabled</code> is tru]==],
	GetSupportedGamepadKeyCodes = [==[Returns an array of <code>Enum.KeyCode</code> that the gamepad associated with the given <code>Enum.UserInputType</code> support]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Color = [==[Determines the color of the <code>Beam</code> across its segments]==],
	ExplosionType = [==[This property determines how the <code>Explosion</code> will interact with <code>Terrain</code>. Used to set if explosions will cause damage to the terrain or not]==],
	AreAssembliesShown = [==[When set to true, each physics assembly is assigned a unique color and the <code>Part</code> associated with the assembly are outlined with the color. Parts that are attached together by <code>JointInstance</code> will share the same color]==],
	Union = [==[Unions the given parts and returns the resulting UnionOperation]==],
	OnInvoke = [==[Callback for when the <code>BindableEvent</code> is invoke]==],
	FindFirstDescendant = [==[Returns the first descendant found with the given FullName (or partial FullName)]==],
	RollOffMinDistance = [==[The minimum distance, in studs, at which a 3D <code>Sound</code> (direct child of a <code>BasePart</code> or <code>Attachment</code>) will begin to attenuate (decrease in volume]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	FindFirstChildWhichIsA = [==[Returns the first child of the <code>Instance</code> for whom <code>Instance:IsA</code> returns true for the given className]==],
	FindFirstChild = [==[Returns the first child of the <code>Instance</code> found with the given name]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	GraphicsSolidModels = [==[Rendering solid models (stuff made with Union, Negate, etc.]==],
	Brightness = [==[Determines the factor by which the GUI's light is scaled when <code>SurfaceGui.LightInfluence</code> is 0]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Destroy = [==[Sets the <code>Instance.Parent</code> property to nil, locks the <code>Instance.Parent</code> property, disconnects all connections and calls Destroy on all children]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Parent = [==[Determines the hierarchical parent of the <code>Instance</code]==],
	Friendly = [==[Causes the dialog to have a green bar on its left-hand side]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	RequestStreamAroundAsync = [==[Requests that the server stream to the player around the specified locatio]==],
	NetworkReplicator = [==[An object which handles the replication of other objects either from the server to the client, or from the client to the server]==],
	ApplyStrokeMode = [==[Determines whether to apply the stroke to the object’s border instead of the text itsel]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	NextSelectionLeft = [==[Sets the GuiObject which will be selected when the Gamepad selector is moved in this directio]==],
	MakeJoints = [==[Goes through all <code>BasePart</code>s in the <code>Model</code>. If any part's side has a SurfaceType that can make a joint it will create a joint with any adjacent part]==],
	InsertService = [==[Used to insert assets from the Roblox website]==],
	InputObject = [==[An object created when an input begins that describes a particular user inpu]==],
	ExportMergeByMaterial = [==[Sets whether materials should be generated per part, or per unique appearance in Roblox's obj exporter]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	SwimAnimation = [==[When this description is <code>Humanoid:ApplyDescription</code> to a <code>Humanoid</code>, this determines the <code>Animation.AnimationId</code> to play when its <code>Humanoid:GetState</code> is <code>enum.HumanoidStateType</code]==],
	Priority = [==[This property sets the priority of an <code>AnimationTrack</code>. Depending on what this is set to, playing multiple animations at once will look to this property to figure out which <code>Keyframe</code> <code>Pose</code>s should be played over one another]==],
	ImageRectSize = [==[Determines the size in pixels of the sub-area of an image to be displayed]==],
	Constraint = [==[Describes a constraint for a single-argument function whose argument type is a <code>Instance.ClassName</code>]==],
	PressedImage = [==[A textureId that will be used when an <code>ImageButton</code> is being presse]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	GetAsync = [==[Retrieves the value of a key in the sorted map]==],
	ApplyAtCenterOfMass = [==[Whether the force is applied at the center of mass of <code>VectorForce.Attachment0</code> parent <code>Part</code]==],
	MusicalInstruments = [==[Gear with the 'Musical' attribute.
<img alt="Musical Attribute" src="/assets/bltfc24574f48eb2125/GearType_Musical.png" /]==],
	RightLegColor = [==[Determines the <code>BodyColors.RightLegColor3</code> of a Humanoid when applie]==],
	LeftLegColor = [==[Determines the <code>BodyColors.LeftLegColor3</code> of a <code>Humanoid</code> when applie]==],
	fromRGB = [==[Returns a Color3 from the given components within the range [0, 255]]==],
	HeightScale = [==[Determines by what factor the height (top-to-bottom distance) of a Humanoid rig is scaled; when <code>Humanoid:ApplyDescription</code>, maps to the "HeightScale" <code>NumberValue</code> within the Humanoi]==],
	Swimming = [==[Fires when the speed at which a <code>Humanoid</code> is swimming in <code>Terrain</code> water change]==],
	PromptGamePassPurchaseFinished = [==[Fires when a purchase prompt closes for a game pas]==],
	GeographicLatitude = [==[The geographic latitude, in degrees, of the scene, influencing the result of <code>Lighting</code>s time on the position of the sun and moon]==],
	SetSetting = [==[Stores a given value for later use under the given key. The value will persist even after studio is closed]==],
	SpotLight = [==[A light source that emits light directionally in the shape of a cone with a spherical base]==],
	ProcessUserInput = [==[Allows the StarterGui service to process input like <code>PlayerGui</code> and <code>CoreGui</code> d]==],
	NoPath = [==[Path doesn't exist]==],
	MembershipType = [==[Describes the account's membership type]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Gray = [==[Returns the BrickColor Medium stone grey]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	UIListLayout = [==[Positions sibling UI elements in a single row]==],
	UpperAngle = [==[Upper limit for the angle (in degrees) between the reference axis and the SecondaryAxis of Attachment1 around the rotation axis. Value in [-180, 180]]==],
	MemoryStoreSortedMap = [==[Provides access to a sorted map within MemoryStore]==],
	AutoUpdate = [==[When this property is set to true, the package associated with the given <code>PackageLink</code> automatically updates to the latest version]==],
	DisableCSGv2 = [==[When set to true, Roblox will fall back to using its legacy CSG solver when performing <a href="/articles/3D-Modeling-with-Parts" title="Solid modeling">solid model operations</a>]==],
	AttributeChanged = [==[Fires whenever an attribute is changed on the <code>Instance</code]==],
	ClearTouchMovementModes = [==[Unregisters all TouchMovementMode enums from the game settings menu]==],
	StarCount = [==[How many stars are shown in the skybox]==],
	GetState = [==[Returns the <code>Humanoid</code> current <code>Enum.HumanoidStateType</code]==],
	CollisionGroupId = [==[Describes the automatically-set ID number of a part's collision grou]==],
	Size10 = [==[Font size 10]==],
	fromOffset = [==[Returns a UDim2 with the given offset components and no scales]==],
	TextButton = [==[A 2D user interface element that displays interactive tex]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	SizeConstraint = [==[Selects the <code>GuiObject.Size</code> axes that a <code>GuiObject</code> will be based relative to the size of its paren]==],
	ReplaceBodyPartR15 = [==[Dynamically replaces a Humanoid body part with a different part]==],
	Default = [==[The default prompt UI styl]==],
	MoveTo = [==[Causes the <code>Humanoid</code> to attempt to walk to the given location by setting the <code>Humanoid.WalkToPoint</code> and <code>Humanoid.WalkToPart</code> propertie]==],
	getfenv = [==[Returns a function's environment as a dictionary]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	SetPhysicsThrottleEnabled = [==[Determines whether physics throttling is enable]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	BreakJoints = [==[Breaks connections between <code>BaseParts</code>, including surface connections with any adjacent parts, <code>WeldConstraint</code>s and all <code>Weld</code>s and other <code>JointInstance</code>s]==],
	Vertical = [==[The output layout is vertical (y-axis)]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Velocity = [==[Determines the goal velocit]==],
	ScaleType = [==[Determines how an image will scale if displayed in a UI element whose size differs from the source image]==],
	ScrollBarThickness = [==[How thick the scroll bar appears. This applies to both the horizontal and vertical scroll bars. If set to 0, no scroll bars are rendered]==],
	CanvasPosition = [==[The location within the canvas, in pixels, that should be drawn at the top left of the scroll fram]==],
	ImageTransparency = [==[Determines the transparency of the rendered imag]==],
	Humanoid = [==[A special object that gives models the functionality of a character]==],
	noise = [==[Returns a perlin noise value]==],
	Number = [==[The unique number that identifies the BrickColor]==],
	TopRight = [==[Grid starts in top right corner]==],
	JSONDecode = [==[Decodes a JSON string into a Lua tabl]==],
	MidImage = [==[The middle image on the vertical scrollbar. The size of this can vary in the y direction, but is always set as <code>ScrollingFrame.ScrollBarThickness</code> in the x direction. This is also used as the middle image on the horizontal scroll bar]==],
	GetTextSize = [==[Computes the <code>DataType.Vector2</code> dimensions (in pixels) that will be taken up with text when using the specified formatting parameters and size constraints]==],
	GraphicsMode = [==[The graphics API that Roblox will use on startup]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	GetPolicyInfoForPlayerAsync = [==[Returns policy information about a player which is based on geolocation, age group, and platform]==],
	Pants = [==[Determines the <code>Pants.PantsTemplate</code> used by a <code>Pants</code> when <code>Humanoid:ApplyDescription</code]==],
	Z = [==[The z-coordinate of the Vector3int16]==],
	AbsoluteWindowSize = [==[The size in pixels of the frame, without the scrollbars]==],
	SetAttribute = [==[Sets the attribute with the given name to the given valu]==],
	AreContactIslandsShown = [==[When set to true, each contact island will render <code>SelectionBox</code> adorns on the parts in contact islands, where each contact island is assigned a random color]==],
	AllGames = [==[(Default) Item is purchasable in the Avatar Shop and all experiences]==],
	Font = [==[Specifies the font used in the script editor]==],
	Size = [==[The size in studs of the image]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Hint = [==[A Hint is an object that creates a small black bar at the very top of the screen with text. Its appearance cannot be customized in any way. With the introduction of Roblox's GUI features it has been deprecated and <code>TextLabel</code>s should be used instead for new work]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Funneler = [==[Makes a 'O' shape with the mout]==],
	BreakJointsOnDeath = [==[Determines whether a <code>Humanoid</code> joints break when in the Dead stat]==],
	ABXY = [==[The touchpad will function as a means of inputting the standard ABXY gamepad input, dividing it up into 4 diagonal pie slices]==],
	ViewPortBackground = [==[The background color of the game viewpor]==],
	Orientation = [==[A <a href="/api-reference/datatype/Vector3" class="mw-redirect" title="Vector3">Vector3</a> that describes the orientation of the Attachment relative to the orientation of its parent, in degrees. Rotations are applied in Z, X, Y order]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Fatal = [==[The most critical level, Fatal events demand immediate attentio]==],
	log = [==[Returns the logarithm of x using the given base]==],
	DebugMode = [==[Allows switching between different debugging visualization modes for cage meshes]==],
	Left = [==[The object is on the left side of it's parent (x-axis)]==],
	ColorSequenceKeypoint = [==[A color and time value that represents a keypoint in a <code>datatype.ColorSequence</code>]==],
	SliceScale = [==[Scales the 9slice edges by the specified rati]==],
	Pass = [==[If <em>functionToBind</em> from <code>ContextActionService.BindAction</code> returns Enum.ContextActionResult.Pass, the input event is considered to have not been handled by <em>functionToBind</em> and will continue being passed to actions bound to the same input type]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Negate = [==[Negates the given parts and returns the resulting NegateOperations]==],
	Run = [==[Runs scripts which are parented to TestService]==],
	JosefinSans = [==[<style>@import url('https://fonts.googleapis.com/css2?family=Josefin+Sans');</style>
<p class="text-nowrap" style={{fontFamily: 'Josefin Sans', fontSize: '1.75em', margin: '5px 0px'}}>The quick brown fox jumps over the lazy dog.<br />0123456789 , : ! ? # % & ( ) - + ]==],
	MouseLeave = [==[Fired when the mouse leaves the GUI handle]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	wait = [==[Yields the current thread until the next Heartbeat in which the given duration (in seconds) has passed, without throttling]==],
	MouseButton1Down = [==[Fires when a user presses down on their left mouse button while hovering over the adornment]==],
	AlwaysOnTop = [==[Forces this object to render on top of all 3d objects in the Workspace]==],
	Center = [==[Aligned starts at the center of the GUI object and spreads equally toward the top and bottom]==],
	Global = [==[The ZIndex property will override the default value computed from the depth in the hierarchy]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Track = [==[Camera moves with the subject but does not rotate automatically]==],
	RemoveStatus = [==[.Removes the defined status from the Status model in the Humanoid]==],
	Duration = [==[The length of time, in seconds, that a <code>ForceField</code> will be applied to a <code>Player</code> character spawning at this <code>SpawnLocation</code>. If Duration is zero, the <code>ForceField</code> is never created, and it will not trigger the <code>Instance.DescendantAdded</code> or <code>Instance.ChildAdded</code> events]==],
	LoadData = [==[Used by an ancient data persistence method to load the user's Data Persistenc]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	unpack = [==[Returns all elements from the given list as a tuple]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	GenerateGUID = [==[Generates a UUID/GUID random string, optionally with curly brace]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Never = [==[The scrollbar will never have elastic scrolling availabl]==],
	Mix = [==[Percentage of the original sound that will be applied to the filter]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	EagerBulkExecution = [==[When set to true, all scene updates will be given an unlimited budget, regardless of how computationally expensive it may be]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Font = [==[Determines the font used to render text]==],
	AutowedgeCell = [==[<em>(OBSOLETE)</em> No longer does anything]==],
	getmetatable = [==[Returns the metatable of the given table]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	VirtualInputManager = [==[An internal service that offers no functionality to developers]==],
	TextAndMenu = [==[A player can chat via custom text messages and a menu of chat messages]==],
	SetSuperSafeChat = [==[Sets whether or not the player sees filtered chats, rather than normal chats]==],
	GraphicTShirt = [==[Determines the <code>ShirtGraphic.Graphic</code> used by a <code>ShirtGraphic</code> when <code>Humanoid:ApplyDescription</code]==],
	SetEntrySource = [==[Sets the <b>Source</b> field of a LocalizationTable entry to <i>newSource</i>, using the specified <i>key</i>, <i>source</i>, and <i>context</i> to narrow down the entry that will have this change applied]==],
	IsTenFootInterface = [==[Returns true if the client is using the ten foot interface, which is a special version of Roblox's UI, exclusive to consoles.
This is the only guaranteed way to verify if the user is on a console or not.]==],
	VelocityConstraintMode = [==[The mode of the <code>LinearVelocity</code> constraint: <strong>Line</strong>, <strong>Plane</strong>, or <strong>Vector</strong>]==],
	HealthDisplayDistance = [==[Sets the distance at which this player will see other Humanoid’s health bars. If set to 0, the health bars will not be displayed]==],
	UpperLimit = [==[The upper position limit along the x-axis of <code>Constraint.Attachment0</code> for a SlidingBallConstraint if <code>SlidingBallConstraint.LimitsEnabled</code> is true]==],
	PermissionLevel = [==[The package permission for the current studio user]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Damping = [==[Damping constant for the SpringConstraint. Multiplied to the velocity of the constraintâ€™s <code>Attachment</code> to reduce the spring force applied]==],
	GetLocals = [==[Returns a dictionary of all local variables in the specified stack, where the keys are the names of the variables, and the values are the actual values of the variables]==],
	Top = [==[Alignment starts at the top of the GUI object]==],
	Clear = [==[Clears the terrain]==],
	MeshPart = [==[The asset is a mesh part]==],
	GuiNavigationEnabled = [==[Used to enable and disable the default controller GUI navigation]==],
	TouchTap = [==[Fires when the player performs a tap gesture on the UI elemen]==],
	ToHSV = [==[Returns the hue, saturation, and value of the Color3]==],
	TouchSwipe = [==[Fires when the player performs a swipe gesture on the UI elemen]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	TouchPan = [==[Fires when the player moves their finger on the UI elemen]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	OnServerInvoke = [==[Called when the server is invoked by <code>RemoteFunction:InvokeServer</code]==],
	WorldSecondaryAxis = [==[Represents the direction of the <code>Attachment.SecondaryAxis</code> of the <code>Attachment</code>, relative to the world, as a unit <code>DataType.Vector3</code> with a length of ]==],
	MouseWheelBackward = [==[Fires when a user scrolls their mouse wheel back when the mouse is over a GUI elemen]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	FindPartsInRegion3WithWhiteList = [==[Returns an array of <code>BasePart</code>s in the given <code>DataType.Region3</code> that are in, or descendant of an object in, a given white list]==],
	BuildRigFromAttachments = [==[Assembles a tree of <code>Motor6D</code> joints by attaching together <code>Attachment</code> objects in a <code>Humanoid</code> characte]==],
	TweenPosition = [==[Smoothly moves a GUI to a new <code>DataType.UDim2</code]==],
	FilterStringForBroadcast = [==[Filters a string sent from a player meant for broadcast to no particular target. More restrictive than <code>Chat:FilterStringAsync</code>]==],
	DragEnter = [==[Fired when Instances are being selected while the mouse is dragging]==],
	ZIndex = [==[Determines the order in which a <code>GuiObject</code> renders relative to other GUI]==],
	PlayerList = [==[The CoreGui displaying the list of in-game players]==],
	HandleAdornment = [==[HandleAdornment is an abstract class inherited by 3D handle adornments]==],
	Rotation = [==[Determines the number of degrees by which a UI element is rotate]==],
	Position = [==[Determines the pixel and scalar position of a <code>GUI</code]==],
	NextSelectionUp = [==[Sets the GuiObject which will be selected when the Gamepad selector is moved in this directio]==],
	NextSelectionRight = [==[Sets the <code>GuiObject</code> which will be selected when the `Enum/Gamepad selector is moved in this directio]==],
	BorderColor = [==[Determines the color of a <code>GuiObject</code> borde]==],
	ApplyLayout = [==[Force re-layout of subling UI elements]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	FileMesh = [==[The mesh is determined by the Roblox mesh asset id provided]==],
	BackgroundTransparency = [==[Determines the transparency of the <code>GuiObject</code> background and borde]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Min = [==[The minimum value of the NumberRange]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	SelectionPartLasso = [==[An instance used to display a "lasso" between a <code>Humanoid</code> Torso and a <code>BasePart</code>]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Message = [==[Prints Test message, followed by text to the output, in blue text]==],
	RollOffMode = [==[Controls how the volume of a 3D <code>Sound</code> (parented to a <code>BasePart</code> or <code>Attachment</code>) behaves as the distance between the listener and sound's parent changes]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	LowerAngle = [==[The minimum rotation angle the HingeConstraint will allow if <code>HingeConstraint.LimitsEnabled</code> is true]==],
	Kalam = [==[<style>@import url('https://fonts.googleapis.com/css2?family=Kalam');</style>
<p class="text-nowrap" style={{fontFamily: 'Kalam', fontSize: '1.75em', margin: '5px 0px'}}>The quick brown fox jumps over the lazy dog.<br />0123456789 , : ! ? # % & ( ) - + ]==],
	Visible = [==[Determines whether the object and its descendants will be displayed]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	OnUndo = [==[Fired when the user undoes an action in studio. Waypoint describes the type action that has been undone]==],
	GetCanRedo = [==[Returns whether there are actions that can be redone, and, if there are, returns the last of them]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	UDim = [==[A one-dimensional value with two components, a relative scale and an absolute offset]==],
	RemoveAccessories = [==[Removes all <code>Accessory</code> worn by the <code>Humanoid</code> paren]==],
	AbsoluteRotation = [==[Describes the actual screen rotation of a UI element, in degrees]==],
	GetGroupsAsync = [==[Returns a list of tables containing information on all of the groups a given player is a member o]==],
	GetJobsInfo = [==[Returns a table containing basic information about the jobs performed by the task schedule]==],
	GetGroupInfoAsync = [==[Returns a table containing information about the given group]==],
	LocalPlayerArrivedFromTeleport = [==[Fires when the <code>Players.LocalPlayer</code> enters the place following a teleport. Provides the <code>Player</code> <em>teleportData</em> and <em>customLoadingScreen</em]==],
	SetCameraYInvertVisible = [==[If called, Roblox toggles the menu option to invert the user's camera y axis]==],
	GroupService = [==[GroupService is a service that allows developers to fetch information about a Roblox group from within a game]==],
	F2 = [==[Determines the face of a <code>Glue</code>]==],
	F0 = [==[Determines the face of a <code>Glue</code>]==],
	MouseButton1 = [==[The left mouse button]==],
	GetCorescriptLocalizations = [==[Returns a list of <code>LocalizationTable</code> objects that are parented to the LocalizationService]==],
	GenericSettings = [==[The abstract class for settings database classes]==],
	OnUpdate = [==[Sets callback as a function to be executed any time the value associated with key is change]==],
	DevComputerCameraMode = [==[Determines player's camera movement mode when using a desktop version of Roblox]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Cylinder = [==[The mesh is a cylinder]==],
	DevCameraOcclusionMode = [==[Sets how the default camera handles objects between the camera and the player]==],
	GetRoleInGroup = [==[Returns the player's role in the group as a string, or "Guest" if the player isn't part of the group]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Trail = [==[The Trail object is used to create a trail like effect between two points]==],
	Frame = [==[A GuiObject that renders as a plain rectangle, generally used as a containe]==],
	FormFactorPart = [==[The FormFactorPart class is an abstract class. It inherits from the BasePart class and adds the FormFactor property to classes that inherit from it]==],
	CreatorType = [==[Describes the <code>Enum.CreatorType</code> of the <code>Articles.Place</code>, whether the place is owned by a user or a grou]==],
	OutdoorAmbient = [==[The lighting hue applied to outdoor areas]==],
	Time = [==[This property gives the <code>Keyframe</code>'s time position (in seconds) in an animation. This determines the time at which the <code>Pose</code>s inside the keyframe will be shown]==],
	Started = [==[The client has started attempting to teleport]==],
	Velocity = [==[The speed that the textures flow along the wire]==],
	Hinge = [==[Makes the side appear with a yellow hinge. Any part connected to this hinge will stick to the side and rotate using physic]==],
	Seat = [==[A type of <code>BasePart</code> that characters can 'sit' in. When a character touches an enabled Seat object, it will be attached to the part by a <code>Weld</code> and the default character scripts will play a sitting animation]==],
	PlatformStanding = [==[The Humanoid is platformstanding. Check the <code>Humanoid.PlatformStand</code> property]==],
	MouseBehavior = [==[Determines whether the user’s mouse can be moved freely or is locke]==],
	ScriptTimeoutLength = [==[The time (in seconds) a script can wait to be resumed before timing out]==],
	Rotation = [==[A <a href="/api-reference/datatype/Vector3" class="mw-redirect" title="Vector3">Vector3</a> that describes the rotation of the Attachment relative to the rotation of its parent, in degrees. Rotations are applied in Z, Y, X order]==],
	FloorMaterial = [==[Describes the <code>Enum.Material</code> that the <code>Humanoid</code> is currently standing on. If the <code>Humanoid</code> isn't standing on anything, the value of this property will be <em>Air</em>]==],
	Follow = [==[Camera moves with the subject and rotates to keep the subject in the center]==],
	Size = [==[Determines the size of the flame particle]==],
	FillDirectionMaxCells = [==[Determines the maximum number of cells that may be used in a row or column before before the next one is started]==],
	Rect = [==[A value that represents a two-dimensional rectangle]==],
	GetBinaryContents = [==[Reads the contents of the <code>File</code> as a strin]==],
	ShadowSoftness = [==[Controls how blurry the shadows ar]==],
	MaxTorque = [==[Determines the maximum amount of torque that may be exerted to rotate the part towards the <code>RocketPropulsion.Target</code]==],
	File = [==[An asset loaded from a file on dis]==],
	FaceInstance = [==[The FaceInstance class is an abstract class from which the <code>Decal</code> class inherits]==],
	components = [==[Returns the values: x, y, z, R00, R01, R02, R10, R11, R12, R20, R21, R22, where R00-R22 represent the 3x3 rotation matrix of the CFrame, and xyz represent the position of the CFrame]==],
	Height = [==[The height of the cone adornment]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	RightLowerLipDepressor = [==[Lowers the lower lip down away from the upper lip revealing the lower teet]==],
	RightEyeClosed = [==[Closes the right eyeli]==],
	RightCheekPuff = [==[Puffs up the right chee]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	MouthLeft = [==[Moves the mouth lef]==],
	LeftLipCornerPuller = [==[Raises the corners of the mouth upwards in a smil]==],
	Style = [==[The style of the prompt’s U]==],
	Running = [==[Fires when the speed at which a <code>Humanoid</code> is running change]==],
	RemoveKeyframe = [==[This function removes a <code>Keyframe</code> from the <code>KeyframeSequence</code> by setting its parent to nil]==],
	LeftInnerBrowRaiser = [==[Raises the interior half of the left brow upward]==],
	Restitution = [==[How elastic <code>Attachment</code> connected by a HingeConstraint will be when they reach the end of the range  when <code>HingeConstraint.LimitsEnabled</code> is true. Constrained between 0 and 1]==],
	Icon = [==[The icon to be displayed when used as a sub men]==],
	TextColor3 = [==[Determines the color of rendered tex]==],
	RobloxReplicatedStorage = [==[An internal version of the <code>ReplicatedStorage</code> service. This cannot be used by developers]==],
	CanUsersChatAsync = [==[Will return false if the two users cannot communicate because their account settings do not allow it]==],
	SelectionGained = [==[Fired when the GuiObject is being focused on with the Gamepad selecto]==],
	ToUniversalTime = [==[Returns the components of the DateTime in UTC]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	ForceShow = [==[The mouse icon is forced to always remain shown/visible]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	GetCollection = [==[Returns the most recently uploaded models in the specified category]==],
	ToOrientation = [==[Returns approximate angles that could be used to generate the CFrame, if angles were applied in Z, X, Y order]==],
	WorldRotation = [==[Determines the rotation (in degrees) of the attachment relative to the worl]==],
	UIOffset = [==[The pixel offset applied to the prompt’s U]==],
	BaseAngle = [==[The base angle of the DynamicRotate object, in radians]==],
	FilterStringAsync = [==[Filters a string being received from a user, and returns a <code>TextFilterResult</code> which can be used to distribute the correctly filtered text accordingly]==],
	FogEnd = [==[The depth from the <code>Workspace.CurrentCamera</code>, in studs, at which fog will be completely opaque]==],
	Hangar = [==[Sound reverb is changed to sound like the player is in a hangar]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	TriggerDistance = [==[Sets the maximum distance that a dialog can be triggered from]==],
	MouseDown = [==[Initializes a dragging action, specifying which parts to use when dragging]==],
	WorldToCellPreferEmpty = [==[Returns the grid cell location that contains the point position, preferring empty grid cells when position is on a grid edge]==],
	Attachment0 = [==[The <code>Attachment</code> that is connected to <code>Constraint.Attachment1</code]==],
	LeftSurfaceInput = [==[Determines the kind of input for the Left face of a part (+X direction]==],
	DataStoreIncrementOptions = [==[Specifies additional parameters for a <code>GlobalDataStore:IncrementAsync</code> call]==],
	CoreGuiNavigationEnabled = [==[Toggles whether or not objects in the <code>CoreGui</code> can be navigated using a Gamepad]==],
	TestCount = [==[Measures how many test calls have been recorded in the test session]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Throttle = [==[The direction of movement, tied to the keys W and S. Must be an integer 1 (forward), 0 (null), or -1 (reverse). Will refresh back to 0 unless constantly set]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Success = [==[Path found successfully]==],
	X = [==[Describes the X (horizontal) component of the mouse's position on the scree]==],
	LeftLowerArm = [==[Reference to a Humanoid's LeftLowerArm]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	ForceHide = [==[The mouse icon is forced to always remain hidden/invisible]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Purpose = [==[Sets the icon that the initial dialog displays]==],
	Position = [==[This property is the position of the center of the <code>Explosion</code>. It is defined in world-space and not influenced by the <code>Explosion</code>'s parent]==],
	IOS = [==[The client is running on IOS (Apple mobile)]==],
	MouseLeave = [==[Fires when a user moves their mouse out of the adornment]==],
	FocusDistance = [==[Distance away from the camera where objects are in focu]==],
	FriendRequestReceived = [==[At least one of two players has received a friend request sent by the other player]==],
	IsGrounded = [==[Returns true if the object is connected to a part that will hold it in place (eg an <code>BasePart.Anchored</code> part), otherwise returns false]==],
	PlayerCount = [==[The number of players currently in the active game-instance]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	ConstrainedValue = [==[Hold a <code>Integer</code> value between <code>IntConstrainedValue.MinValue</code> and <code>IntConstrainedValue.MaxValue</code>. Replaced by <code>IntConstrainedValue.Value</code>, but still functional]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	SocialService = [==[Facilitates social functions that impact relationships made on the Roblox platfor]==],
	IsGearTypeAllowed = [==[Returns whether gear of the given <code>Enum.GearType</code> is permitted to be added to <code>Player</code> <code>StarterGear</code]==],
	ToWorldSpace = [==[Returns a CFrame transformed from Object to World space]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Pavement = [==[Applies to <code>Terrain</code> only]==],
	StarterGear = [==[If the game allows gear, StarterGear contains all of a player's appropriate gear. Whenever the <code>Player</code>'s character spawns, all of the contents of that player's StarterGear will get copied into the player's <code>Backpack</code>]==],
	StepIn = [==[Performs a <a href="/articles/Lua-debugger" class="mw-redirect" title="Lua Debugger">step into</a> operation on the Lua Debugger]==],
	TextureSize = [==[Sets the size of the texture used with the FloorWire]==],
	ClimbAnimation = [==[The asset is a climb animation]==],
	Speed = [==[The desired speed a SlidingBallConstraint with <code>SlidingBallConstraint.ActuatorType</code> set to <code>Enum.ActuatorType</code> will attempt to maintain while translating towards its <code>SlidingBallConstraint.TargetPosition</code>. Measured in studs/second]==],
	EmoteAnimation = [==[The asset is an emote animation]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Inset = [==[As <code>GuiObject.BorderSizePixel</code> increases, the border grows evenly inward only. The dimensions of the GuiObject's contents are reduced at a 1:2 ratio]==],
	DragStopped = [==[Fired when a player stops dragging the objec]==],
	IsFinished = [==[Whether or not the current page is the last page available]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	sub = [==[Returns the substring of s that starts at i and continues until j. i and j can be negative. i defaults to 1 and j defaults to -j]==],
	SetKeys = [==[Resets this curve’s keys using the FloatCurveKey array passed as argument]==],
	Target = [==[Determines the object towards which the part should follow/fac]==],
	PlatformStanding = [==[Fires when the <code>Humanoid</code> enters or leaves the <em>PlatformStanding</em> <code>Enum.HumanoidStateType</code]==],
	SetTitle = [==[Given the name of a bound action with a touch button, sets the text shown on the button]==],
	Default = [==[Uses the default collision mode]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	MaxForce = [==[Determines the limit on how much force that may be applied to each axi]==],
	Faces = [==[A datatype containing six booleans, each representing a face of a <code>BasePart</code>]==],
	ConcertHall = [==[Sound reverb is changed to sound like the player is in a concert hall]==],
	MaxItems = [==[Historically the maximum number of items that can be assigned to the <code>Debris</code> service at one tim]==],
	Debris = [==[The Debris service allows the developer to schedule the removal of the object without yielding any code, through the usage of the <code>Debris:AddItem</code> method]==],
	time = [==[Returns how many seconds have passed since the Unix epoch (1 January 1970, 00:00:00) under current UTC time]==],
	GetCollisionGroupId = [==[Returns the id of the group with the specified name]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	ReflectionMetadataEnums = [==[Acts as a <code>Folder</code> for <code>ReflectionMetadataEnum</code> object]==],
	WindowFocusReleased = [==[Fires when the window of the Roblox client loses focus on the user’s scree]==],
	ContentText = [==[A copy of <code>TextButton.Text</code> that contains exactly what is being rendered by the <code>TextButton</code>]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	GetGlobalDataStore = [==[Returns the default data stor]==],
	AutomaticRetry = [==[Sets whether data store functions should automatically retry or not. DataStoreService does not respect this property because automatic retry has been disabled due to technical reasons. Therefore, you must implement systems for retrying operations yourself]==],
	Y = [==[The y-coordinate of the Vector3int16]==],
	GetCore = [==[Returns a variable that has been specified by a Roblox <code>CoreScript</code]==],
	Enabled = [==[If set to true, light will be emitted from the source object]==],
	RemoveSelectionGroup = [==[Removes a group that was created with <code>GuiService:AddSelectionParent</code> or <code>GuiService:AddSelectionTuple</code>]==],
	RobloxRound = [==[Causes the frame to appear as a translucent dark gray rectangle with rounded edges. Like "RobloxSquare" this has a padding of five pixels on all sides]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	TextScaled = [==[Determines whether text in a UI element is scaled to fill the UI elemen]==],
	CurrentCamera = [==[The <code>Camera</code> object being used by the local player]==],
	None = [==[The player does not have an active paid membership]==],
	GetVersionAsync = [==[Retrieves the specified key version]==],
	JSONEncode = [==[Generate a JSON string from a Lua tabl]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	PlayerMembershipChanged = [==[Fires when the game server recognizes that a player’s membership has change]==],
	Style = [==[Sets the style of the GuiButton based on a list of pre-determined styles]==],
	SetUpvalue = [==[Sets the value of the upvalue <i>name</i> as <i>value</i> in the stack specified]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Value = [==[The stored <a href="/api-reference/datatype/Vector3" class="mw-redirect" title="Vector3">Vector3</a>]==],
	SetCameraPanMode = [==[Sets the <code>Enum.CameraPanMode</code> to be used by the <code>Camera</code> on mobile device]==],
	JointInstance = [==[JointInstance is the base class for joints, such as Connectors, Welds, and Snaps]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	GetMetadata = [==[Gets the custom metadata set with this <code>DataStoreSetOptions</code> instance]==],
	sinh = [==[Returns the hyperbolic sine of x]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Keypoints = [==[An array of ColorSequenceKeypoint values in ascending order]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	GraphicsQualityChangeRequest = [==[Fires when the user prompts and increase or decrease in graphics quality using the hotkey]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Size = [==[Determine the pixel and scalar size of a <code>GuiObject</code]==],
	Gear = [==[The asset is a gear item]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	PlayerDisconnecting = [==[Fired when a player is disconnecting from the game]==],
	SetUniverseId = [==[Sets the <code>DataModel.GameId</code> of the current game instance to the given <em>universeId</em]==],
	GetMoonDirection = [==[Returns a <code>DataType.Vector3</code> representing the direction of the moon from the position 0, 0, 0]==],
	StreamingEnabled = [==[Whether content streaming is enabled for the plac]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	PromptHidden = [==[Triggers client-side when a prompt becomes hidde]==],
	MinPrice = [==[The minimum item price to search for]==],
	CageOriginWorld = [==[Cage mesh offset in world space]==],
	CollectionService = [==[A service which manages object collections using assigned tags]==],
	AbsolutePosition = [==[Describes the actual screen position of a UI element, in pixels]==],
	Green = [==[Returns the BrickColor Dark Green]==],
	DOS = [==[The client is running on DOS]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	RootPart = [==[A reference to the <code>Humanoid</code> <em>HumanoidRootPart</em>]==],
	GothamSemibold = [==[<img src="/assets/bltbd02f418138a4347/Font-Face-Sample-Gotham-Semibold.png" class="img-fluid half-sized" /]==],
	Sin = [==[Rotate at a velocity of:
<pre><code>ParamA * math.sin(game.Workspace.DistributedGameTime * ParamB).
</code></pre>
<code>BasePart</code> <em>ParamA</em> will determine the maximum speed at which the part will spin, and BasePart <em>ParamB</em> will determine how frequently it changes direction]==],
	VIPServerId = [==[A string that could identify the current server as a VIP serve]==],
	PlaceVersion = [==[Describes the version of the <code>Articles.Place</code> the server is running o]==],
	TextureID = [==[The texture applied to the <code>MeshPart</code>]==],
	Genre = [==[Not functional. Historically described the <code>Enum.Genre</code> of the <code>Articles.Place</code> as set on the Roblox websit]==],
	Shirt = [==[Displays a Shirt texture from the Roblox website to display on a <code>Humanoid</code> ri]==],
	Stop = [==[Ends the game’s simulation if it is runnin]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	RotationAxisVisible = [==[Enable the visibility of the rotation axis]==],
	KeyboardKeyCode = [==[The key the player should press to trigger the promp]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	AngularVelocity = [==[The target angular velocity of the motor in radians per second around the rotation axis. Value in [0, inf)]==],
	Value = [==[The stored <a href="/articles/String" class="mw-redirect" title="API:Type/string"><span>string</span></a>]==],
	AngularSpeed = [==[Target angular speed. This value is unsigned as the servo will always move toward its target. In radians per second. Value in [0, inf)]==],
	Orientation = [==[Specifies how to orient particle]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	SourceValueChanged = [==[Fires when the value of the CustomEvent's source is changed, passing the CustomEvent's new value]==],
	ApplyDescription = [==[Makes the <code>Player.Character</code> look match that of the passed in <code>HumanoidDescription</code]==],
	UserChoice = [==[The player's character will moved based on the user's settings]==],
	Range = [==[The size of the area that the PointLight will illuminate]==],
	Level16 = [==[Graphic quality level 16]==],
	Source = [==[Attaches the <code>CustomEventReceiver</code> object to a <code>CustomEvent</code]==],
	ReceiverDisconnected = [==[Fires when a receiver is disconnected from the <code>CustomEvent</code]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	WindowFocused = [==[Fires when the window of the Roblox client gains focus on the user’s scree]==],
	Character = [==[A <code>Model</code> controlled by the player that contains a <code>Humanoid</code>, body parts, scripts and other objects]==],
	Move = [==[Causes the <code>Humanoid</code> to walk in the given directio]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Torso = [==[The torso BodyPart]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	RemoveSubPose = [==[This function removes a sub <code>Pose</code> from the <code>Pose</code> by parenting it to nil]==],
	RequiresNeck = [==[Allows developers to disable the behavior where a player <code>Character</code> dies if the Neck <code>Motor6D</code> is removed or disconnected even momentaril]==],
	Stiffness = [==[The strength of the spring. The higher this value the more force will be applied when the attachments are separated a different length than the <code>SpringConstraint.FreeLength</code>]==],
	Portrait = [==[A preference where the game is displayed portrait (vertically) with the bottom of the device on the bottom of the screen]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	TextBounds = [==[The pixel size of a UI element's text]==],
	GetAsync = [==[Performs a GET request on an <a rel="nofollow" class="external text" href="http://api.roblox.com/docs">official Roblox web API</a]==],
	FriendPages = [==[A special version of <code>Pages</code> which contains information about a player's friends]==],
	MidGain = [==[The output volume of frequencies between 400 and 4000 Hz]==],
	SetDescription = [==[Given the name of a bound action with a touch button, sets the description of the action]==],
	UIComponent = [==[A base class for UI constraint and layout classes, inherits from <code>UiBase</code>]==],
	TargetOffset = [==[Determines the world offset from the <code>RocketPropulsion.Target</code> toward which the force/torque is exerte]==],
	BindActivate = [==[Bind a <code>Enum.KeyCode</code> with a specific <code>Enum.UserInputType</code> to trigger <code>Tool.Activation</code> and <code>ClickDetector</code> event]==],
	ControllerService = [==[Container class for the <code>HumanoidController</code> among other classes]==],
	BindActionToInputTypes = [==[Binds <em>functionToBind</em> to input events such as key presses, mouse movement, or controller input]==],
	sort = [==[Sorts table elements using the provided comparison function or the &lt; operator]==],
	Custom = [==[Increases by a rate as low as .001 along all axes]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	DeprecatedObjectsShown = [==[If set to true, deprecated objects will be shown in the Advanced Objects window, as well as the Object Browser]==],
	SpecialMesh = [==[The SpecialMesh is an object that allows developers to provide a standard template or user uploaded mesh to a <code>BasePart</code>]==],
	SurfaceColor3 = [==[Determines the color of the sphere's surfac]==],
	UnjoinFromOutsiders = [==[Breaks all joints between the specified <code>BasePart</code>s and other <code>BasePart</code>s]==],
	Radius = [==[The radius of the cone adornment]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	GainMakeup = [==[The overall amplification applied to the effectâ€™s Sound or SoundGroup after attenuation of sounds above the threshold]==],
	SetJoinAfterMoveTarget = [==[Sets the PVInstance that will be connected with the PVInstance specified by <code>JointsService:SetJoinAfterMoveInstance</code>]==],
	RegisterComputerMovementMode = [==[Registers that a computer movement mode is available to be selected from the game menu]==],
	Climbing = [==[Fires when the speed at which a <code>Humanoid</code> is climbing change]==],
	IsUserFeatureEnabled = [==[Returns true if the specified user feature is enabled. This will throw an error if the user feature does not exist]==],
	Touched = [==[Fired when a part comes in contact with another par]==],
	PrimaryAxis = [==[The direction of the goal's X-Axis, represented as a unit <code>Vector3</code>]==],
	ItemRemoved = [==[Fires when a <code>Configuration</code>, <code>CustomEvent</code>, <code>CustomEventReceiver</code>, <code>Dialog</code>, or <code>VehicleSeat</code> is removed from the <code>DataModel</code]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	GetInstanceAddedSignal = [==[Get a signal that fires when a given tag is added to an objec]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Clouds = [==[Renders realistic clouds that drift slowly across the sky]==],
	GetFreeModels = [==[Retrieves a list of Free Models from the Catalo]==],
	children = [==[Returns an array of the object's children]==],
	Platform = [==[Historically a form of <code>Seat</code> that wouldn't place the player in a sitting pose. This object is no longer create-able and cannot be used by developer]==],
	Score = [==[Deprecated. This property can be used to store an integer value associated with the team. This property offers no additional functionality and is not used by any game services]==],
	Height = [==[The height of the cylinder adornment]==],
	GetSecondaryAxis = [==[Returns the value of the Attachment's <code>Attachment.SecondaryAxis</code]==],
	Width = [==[The x axis]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	CursorIcon = [==[Sets the mouse icon that will be displayed when the mouse is hovered over this ClickDetecto]==],
	Level04 = [==[Graphic quality level 4]==],
	Visible = [==[Determines whether or not the <code>ForceField</code>'s particle effect is visible]==],
	LoadDefaultChat = [==[Toggles whether the default chat framework should be automatically loaded when the game runs]==],
	BubbleChatEnabled = [==[Determines whether player's chat messages will appear above their in-game avata]==],
	LimitAngle0 = [==[Determines the maximum angle between the rod and <code>Constraint.Attachment0</code> when <code>RodConstraint.LimitsEnabled</code> is tru]==],
	FilterStringAsync = [==[Filters a string sent from a player to another player using filtering that is appropriate to the players' account settings]==],
	SetEnabled = [==[Sets whether or not the ChangeHistoryService is enabled]==],
	ResetWaypoints = [==[Clears the history, causing all undo/redo waypoints to be removed]==],
	InputBegan = [==[Fired when a user begins interacting via a Human-Computer Interface device (Mouse button down, touch begin, keyboard button down, etc]==],
	UnionAsync = [==[Performs a Union operation on the calling <code>BasePart</code> and the list of parts passed in as the first paramete]==],
	CFrameValue = [==[A container object for a single CFrame value]==],
	RBXScriptConnection = [==[A connection between an <code>RBXScriptSignal</code> and a function]==],
	yAxis = [==[A Vector3 with a value of 1 on the Y axis]==],
	Face = [==[Determines the asset ID of the Face to be applied to the <code>Humanoid</code]==],
	DryLevel = [==[The output volume of the original sound]==],
	LoadAsset = [==[Returns a <code>Model</code> containing the asse]==],
	ChildAdded = [==[Fires when an object is parented to this <code>Instance</code>]==],
	RodConstraint = [==[Constraints two Attachment such that they maintain the same distance from each other, and optionally constraints the maximum angle between the ends of the rod and respective attachment]==],
	CameraMaxZoomDistance = [==[The maximum distance the player's default camera is allowed to zoom out in studs]==],
	BaseTextureId = [==[The texture of a CharacterMesh. It can be overridden by Shirts, Pants, T-Shirts, and the <code>CharacterMesh.OverlayTextureId</code> property]==],
	IsRunMode = [==[Returns whether the ‘Run’ button has been pressed to run the simulation in Roblox Studi]==],
	Windows = [==[The client is running on a Windows Operating System]==],
	CloseInspectMenu = [==[Closes the Inspect Menu, if ope]==],
	CoordinateFrame = [==[The old version of the <code>Camera.CFrame</code> property which functions identically to it.
This item should be used in a <code>LocalScript</code> in order to work as expected online]==],
	FreeMemoryMBytes = [==[Describes how much free memory is available, in MBs]==],
	Transparency = [==[Determines the transparency of the <code>Decal</code> with 0 being completely opaque and 1 completely transparent]==],
	CameraOffset = [==[An offset applied to the Camera's subject position when its CameraSubject is set to this Humanoid]==],
	GetAttribute = [==[Returns the attribute which has been assigned to the given nam]==],
	Level18 = [==[Graphic quality level 18]==],
	PromptImportFiles = [==[Prompts the current Studio user to select files to add as <code>File</code]==],
	UserCFrameEnabled = [==[Fires when a UserCFrame gets enabled or disabled]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	GetKeyIndicesAtTime = [==[Returns key indices before and after time]==],
	BorderSizePixel = [==[Determines the pixel width of a <code>GuiObject</code> borde]==],
	Idle = [==[(3) - Second lowest priorit]==],
	UIMinimum = [==[The minimum value of this property. Used with <code>ReflectionMetadataItem.UIMaximum</code> to control the slider bar of this property in the <i>Properties</i> window]==],
	SetDesiredAngle = [==[Sets <code>Motor.DesiredAngle</code> of the motor]==],
	IsDeleted = [==[Whether the version has been marked as deleted]==],
	Thumbstick = [==[The player's character is controlled with a virtual thumbstick that moves with the player's finger. Jumping is controlled with a separate button]==],
	Transparency = [==[Sets the transparency of a GUI object, where 1 is invisible and 0 is completely visible]==],
	JawDrop = [==[Lowers the jaw downward opening the mout]==],
	Unequipped = [==[Fired when the tool is unequippe]==],
	HeadScale = [==[Sets the scale of the user's head when using V]==],
	Release = [==[The time the effect takes to become inactive after its sound is below the Threshold]==],
	Antique = [==[<img src="/assets/bltac043658e44c549a/Font-Face-Sample-Antique.png" class="img-fluid half-sized" /]==],
	BlastPressure = [==[Used to determine the amount of force applied to <code>BasePart</code>s caught in the <code>Explosion.BlastRadius</code>]==],
	Button1Down = [==[Fired when the left mouse button is pressed]==],
	Region3 = [==[A datatype that describes a rectangular volume in 3D space]==],
	UIScale = [==[An object that acts as a multiplier for the size of the parent UI element's scale]==],
	SelectionLost = [==[Fired when the Gamepad selector stops focusing on the GuiObjec]==],
	D = [==[Determines the amount of dampening to use in reaching the goal <code>BodyPostion.Position</code]==],
	AutoFRMLevel = [==[Sets the starting quality level of the framerate manager, when <code>RenderSettings.EnableFRM</code> is set to true]==],
	BodyPosition = [==[Applies a force to maintain a constant positio]==],
	MaxTorque = [==[Determines the limit on how much torque that may be applied to each axi]==],
	TurboBuildersClub = [==[(no longer available]==],
	HeadColor = [==[Sets the color of this limb, as a <a href="/api-reference/datatype/BrickColor" class="mw-redirect" title="API:BrickColor"><span>BrickColor</span></a>]==],
	CFrame = [==[Represents the CFrame offset of the Attachment]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Threshold = [==[Determines how bright a color must be before it bloom]==],
	SetAsync = [==[Sets the value of the data store for the given key]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Jumping = [==[Fires when the <code>Humanoid</code> enters and leaves the <em>Jumping</em> <code>Enum.HumanoidStateType</code]==],
	UpperAngle = [==[Sets the upper rotation limit of the BallSocketConstraint, as long as <code>BallSocketConstraint.LimitsEnabled</code> is <code>true</code>]==],
	ClassicAndBubble = [==[Has the effects of Classic and Bubble combined]==],
	Button1Up = [==[Fires when the left mouse button is released]==],
	Transparency = [==[Determines the transparency of the <code>Beam</code> across its segments]==],
	UniversalConstraint = [==[A constraint that maintains a perpendicular angle between two axes of two attachment]==],
	LightEmission = [==[Determines to what degree the colors of the <code>Beam</code> are blended with the colors behind it]==],
	next = [==[An iterator function for use in for loops]==],
	players = [==[Returns a list of players in a gam]==],
	StreamingPauseMode = [==[Whether streaming physics pause mode is activ]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	SetContents = [==[Sets the contents of the LocalizationTable, via the legacy JSON format]==],
	MouseHoverLeave = [==[Fired when a player's mouse moves off of the <code>ClickDetector</code>'s paren]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	TopImage = [==[The Up image on the vertical scrollbar. The size of this is always ScrollBarThickness by ScrollBarThickness. This is also used as the left image on the horizontal scroll bar]==],
	MaxLength = [==[The maximum separation the SpringConstraint will allow if <code>SpringConstraint.LimitsEnabled</code> is true]==],
	Browsable = [==[Whether or not this can be seen in studi]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Sensor = [==[A preference where the game is displayed depending on the best match to the device's current orientation - either landscape (left/right) or portrait]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	WetLevel = [==[The output volume of the echoed effect]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Left = [==[Whether the left face is included]==],
	GetNetworkOwnershipAuto = [==[Returns true if the game engine automatically decides the network owner for this part]==],
	RemoteEvent = [==[Similar to <code>BindableEvent</code>, but allows crossing the client/server boundary]==],
	random = [==[Returns a random number within the range provided]==],
	TopSurface = [==[Determines the type of surface for the Top face of a part (+Y direction]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	RootPriority = [==[The main rule in determining the root part of an assembl]==],
	FallAnimation = [==[When this description is <code>Humanoid:ApplyDescription</code> to a <code>Humanoid</code>, this determines the <code>Animation.AnimationId</code> to play when its <code>Humanoid:GetState</code> is <code>enum.HumanoidStateType</code]==],
	Material = [==[Determines the texture and default physical properties of a par]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	LeftParamA = [==[Determines the first parameter for the SurfaceType on the Left face of a part (-Z direction]==],
	GlobalDataStore = [==[An object that exposes methods to access a single data stor]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	GetBadgeInfoAsync = [==[Fetch information about a badge given its I]==],
	KeyframeSequence = [==[This object stores all of the <code>Keyframe</code>s for an animation and other data about the animation. It is the object that is created by the Roblox Animation Editor and uploaded to Roblox]==],
	Random = [==[A provider of pseudorandom numbers]==],
	GetTags = [==[Get all tags applied to a given objec]==],
	RegisterComputerCameraMovementMode = [==[Registers that a computer camera movement mode is available to be selected from the game menu]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	OnClientEvent = [==[Fires listening functions in <code>LocalScript</code> when either <code>RemoteEvent:FireClient</code> or <code>RemoteEvent:FireAllClients</code> is called from a <code>Script</code>]==],
	RightUpperLipRaiser = [==[Raises the right upper lip away from the lower lip revealing the upper teet]==],
	BrickColor = [==[Determines the color of a part]==],
	CharacterRight = [==[The player moved right]==],
	BasePart = [==[The abstract base class for in-world objects that physically interact]==],
	TwistUpperAngle = [==[Sets the upper twist rotation limit of the BallSocketConstraint, as long as <code>BallSocketConstraint.TwistLimitsEnabled</code> is <code>true</code>]==],
	WheelBackward = [==[Fires when the mouse wheel is scrolled backward]==],
	Flag = [==[The Flag object is a deprecated object that was used to make capture the flag game]==],
	MouseEnter = [==[Fires when a user moves their mouse over the adornment]==],
	DopplerScale = [==[This property determines the degree to with a 3D <code>Sound</code>s pitch varies due to the Doppler effect]==],
	PivotOffset = [==[Specifies the offset of the part's pivot from its <code>datatype.CFrame</code>]==],
	PlaceholderText = [==[Sets the text that gets displayed when no text has been entered into the TextBox yet]==],
	Universal = [==[Makes the side appear with both Studs and Inlets in a checker patter]==],
	GetStringForKeyCode = [==[Returns a string representing a key the user should press in order to input a given KeyCod]==],
	ScrollingDirection = [==[Determines the direction scrolling is allowed in this scrolling fram]==],
	GetAvailableThemes = [==[Returns a list of <code>StudioTheme</code> available in Studi]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	JumpPower = [==[Determines how much upwards force is applied to the <code>Humanoid</code> when jumpin]==],
	Value = [==[Used to hold a <span class="explain" title="true/false">boolean</span> value]==],
	TextureSpeed = [==[Determines the speed at which the <code>Beam.Texture</code> image moves along the <code>Beam</code>]==],
	PageEnter = [==[Fires when a page comes into view, and is going to be rendered]==],
	Material = [==[The <code>enum.Material</code> at the intersection point]==],
	CollisionType = [==[Selects the <code>Enum.HumanoidCollisionType</code> for R15 and Rthro non-player character]==],
	RigType = [==[Describes whether this <code>Humanoid</code> is utilizing the legacy R6 character rig, or the new R15 character rig]==],
	UpperLipSuck = [==[Rolls the upper lip around the teet]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	CurrentAngle = [==[Signed angle (in degrees) between the reference axis and the secondary axis of Attachment1 around the rotation axis. Value in [-180, 180]]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	MouseButton1Up = [==[Fires when a user releases their left mouse button while hovering over the adornment]==],
	WorldModel = [==[Provides some physics features to a <code>ViewportFrame</code]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	SetStateEnabled = [==[Sets whether a given <code>Enum.HumanoidStateType</code> is enabled for the <code>Humanoid</code]==],
	Badge = [==[The asset is a badge]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	GetMetadata = [==[Returns the metadata associated with the object]==],
	RebalanceTeams = [==[Evens the number of people on each team. This function does not work correctly and should not be used]==],
	TextBounds = [==[The pixel size of a UI element's text]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Looped = [==[This property sets whether the animation will repeat after finishing. If it is changed while playing the result will take effect after the animation finishes]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	RightCheekRaiser = [==[Squints the right ey]==],
	PackagePermission = [==[Indicates the current user's or group roleset's permission to the package]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	LeftDimpler = [==[Moves the corners of the mouth back in ]==],
	TouchTapInWorld = [==[Fires when a user taps the game world on a <code>UserInputService.TouchEnabled</code> device - such as the screen of a mobile devic]==],
	GetNavigationGamepads = [==[Returns an array of <code>Enum.UserInputType</code> connected and enabled for GUI navigation in descending order of priorit]==],
	GetCharacterAppearanceInfoAsync = [==[Returns information about the character appearance of a given use]==],
	Thickness = [==[The thickness of the line in pixels]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	WorldToScreenPoint = [==[Returns the 2D screen location of a <code>DataType.Vector3</code> position in the world, the depth of it from the screen and whether it is visible. Accounts for the GUI inse]==],
	FillRegion = [==[Fills a <a href="/api-reference/datatype/Region3" class="mw-redirect" title="Region3">Region3</a> space with smooth terrain]==],
	IsStudio = [==[Returns whether the current environment is running in Roblox Studi]==],
	Width0 = [==[The width in studs of the <code>Beam</code> at its base]==],
	Custom = [==[Sorting order is custom]==],
	GetAssetIdsForPackage = [==[Returns an array of assetIds that are contained in a specified package]==],
	DataReceiveKbps = [==[In a networked game, this describes roughly how many kilobytes of data are being received by the current instance, per second]==],
	Saturation = [==[Determines the change in intensity of color]==],
	ClearCharacterAppearance = [==[Removes all accessories and other character appearance objects from a player's Character]==],
	BindToClose = [==[Binds a function to the <code>PluginGui</code> close button, overriding the default behavio]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Height = [==[The Y dimension of the UDim2]==],
	SliceScale = [==[Scales the 9slice edges by the specified rati]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Clone = [==[Create a copy of an object and all its descendants, ignoring objects that are not <code>Instance.Archivable</code]==],
	sign = [==[Returns -1 if x &lt; 0, 0 if x == 0, or 1 if x &gt; 0]==],
	Studs = [==[Makes the side appear with square stud]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Front = [==[Whether the front face is included]==],
	CollisionGroupContainsPart = [==[Returns whether the part is in the collision group]==],
	KeyCode = [==[Contains an Enum that describes the kind of input use]==],
	GetPlayers = [==[Returns a list of <code>Player</code>s who are assigned to the <code>Team</code>. A <code>Player</code> is considered assigned if their <code>Player.Team</code> property is equal to the <code>Team</code> and <code>Player.Neutral</code> is false]==],
	ServoMaxTorque = [==[Maximum torque the servo motor can apply. The units are mass * studs^2 / second^2. Value in [0, inf)]==],
	Offset = [==[Controls how light transmits between the camera and the sky background]==],
	InsertKey = [==[Adds the key passed as argument to this curve. If a key at the same time is found it will be replaced]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	ResetOnSpawn = [==[Controls how this LayerCollector behaves when its associated <code>Player</code> respawns]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	AnimationPlayed = [==[This event fires whenever the <code>AnimationController</code> begins playing an animation. It returns the <code>AnimationTrack</code> playing]==],
	GetKeyframes = [==[Returns an array that contains all <code>Keyframe</code>s that have been added to a <code>KeyframeSequence</code>]==],
	AutomaticCanvasSize = [==[Determines whether <code>ScrollingFrame.CanvasSize</code> is resized based on child conten]==],
	Paused = [==[This event fires whenever the <code>VideoFrame.Video</code> is paused using <code>VideoFrame:Pause</code> or by setting <code>VideoFrame.Playing</code> to fals]==],
	SetSecondaryAxis = [==[Sets the value of the Attachment's <code>Attachment.SecondaryAxis</code]==],
	GetOnboardingCompleted = [==[Checks if onboarding has been complete]==],
	Keyboard = [==[Key press on a keyboard]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	BindToRenderStep = [==[Given a string name of a function and a priority, this method binds the function to <code>RunService.RenderStepped</code]==],
	pairs = [==[Returns an iterator function and the provided table for use in a for loop]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	RBXScriptSignal = [==[An object that runs connected functions upon a specific occurrence]==],
	ToolPunchThroughDistance = [==[Sets the distance left clicking starts acting on the surface gui instead of the held tool]==],
	X = [==[The x-coordinate of the Vector3int16]==],
	GetAttributes = [==[Returns a dictionary of string → variant pairs for each of the <code>Instance</code> attribute]==],
	TouchCameraMovementMode = [==[The camera type in-use by the client while on a mobile device]==],
	BloomEffect = [==[Simulates the camera viewing a very bright ligh]==],
	AngularVelocity = [==[Applies a constant torque to a Part, relative to an Attachment space or world spac]==],
	UIGridLayout = [==[Positions sibling UI elements by filling rows using the space of the parent UI elemen]==],
	BackpackItem = [==[BackpackItem is an abstract class for backpack items such as HopperBins and Tools]==],
	Condition = [==[The condition of the debugger breakpoint]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	ChinRaiser = [==[Raises the chin up; moves the lower lip upward]==],
	Top = [==[The top face of a Part]==],
	VirtualThumbstick = [==[The touchpad will function as a gamepad joystick]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	AdService = [==[A decommissioned service that is no longer operational. Historically used to display mobile video ad]==],
	UINumTicks = [==[The number of potential values the property's slider bar can be set to, between <a href="/api-reference/property/ReflectionMetadataItem/UIMinimum" class="mw-redirect" title="UIMinimum">UIMinimum</a> and <a href="/api-reference/property/ReflectionMetadataItem/UIMaximum" class="mw-redirect" title="UIMaximum">UIMaximum</a>]==],
	Density = [==[Defines the amount of particles in the <code>Atmosphere</code> and essentially controls how much <span class="text-nowrap">in-game</span> objects/terrain will be obscured by them]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	new = [==[Returns a Vector3 from the given x, y, and z components]==],
	mouseClick = [==[Deprecated in favor of <code>ClickDetector.MouseClick</code]==],
	BaseScript = [==[The base class for all script objects which run automatically]==],
	UrlEncode = [==[Replaces URL-unsafe characters with '%' and two hexadecimal character]==],
	Changed = [==[Fired whenever the <code>BrickColorValue.Value</code> of the BrickColorValue is changed]==],
	RightDimpler = [==[Moves the corners of the mouth back in ]==],
	new = [==[Returns a Vector2 from the given x and y components]==],
	SetBubbleChatSettings = [==[Customizes various settings of the in-game bubble cha]==],
	Level14 = [==[Graphic quality level 14]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	SelectionImageObject = [==[Overrides the default selection adornment (used for gamepads). For best results, this should point to a GuiObject]==],
	EmotesChanged = [==[Fires when emotes are added, removed or set on this descriptio]==],
	CreatorId = [==[Describes the ID of the user or group that owns the <code>Articles.Place</code]==],
	Jump = [==[Whether the <code>Humanoid</code> is jumping. If set to true, it will cause the <code>Humanoid</code> to jump]==],
	AllowTeamChangeOnTouch = [==[Allows a <code>Player</code> to join the team by touching the <code>SpawnLocation</code>. When set to true, if a <code>Player</code> character comes into contact with the <code>SpawnLocation</code>, the player's <code>Player.TeamColor</code> will be set to <code>SpawnLocation.TeamColor</code>]==],
	Rotation = [==[Determines the clockwise rotation in degrees of the gradient starting from left to right]==],
	TextXAlignment = [==[Determines the horizontal alignment of rendered text]==],
	Normal = [==[The normal vector of the intersected face]==],
	NumberSequenceKeypoint = [==[A keypoint within a NumberSequence with a particular time, value, and envelope size]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	PrivateServerId = [==[Describes the private server ID of the server, if the server is a <code>Articles/Creating a VIP Server on Roblox|VIP server</code> or a <code>TeleportService:ReserveServer</code]==],
	Default = [==[The default movement controller]==],
	TurnD = [==[Determines the amount of dampening that to use in reaching the <code>RocketPropulsion.Target</code]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Center = [==[The object is centered around the center of its parent]==],
	RemoveDefaultLoadingScreen = [==[Immediately removes the default Roblox loading screen. Note if any object has been placed in <code>ReplicatedFirst</code>, the default loading screen will remove after 5 seconds regardless if this function has been called or not]==],
	NumberRange = [==[A datatype that represents a range of numbers]==],
	Transport = [==[Gear with the 'Transport' attribute.
<img alt="Transport Attribute" src="/assets/blt669c2a184782cd46/GearType_Transport.png" /]==],
	Cobblestone = [==[Applies to <code>BasePart</code> and <code>Terrain</code>]==],
	SetIdentityOrientation = [==[Sets the identity rotation of the given model, allowing you to reset the rotation of the entire model later, through the use of the <code>ResetOrientationToIdentity</code> method]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	ScreenPointToRay = [==[Creates a unit <code>DataType.Ray</code> from a position on the screen (in pixels), at a set depth from the <code>Camera</code> orientated in the <code>Camera</code> direction. Accounts for the GUI inse]==],
	Position = [==[A <a href="/api-reference/datatype/Vector3" class="mw-redirect" title="Vector3">Vector3</a> that describes the positional offset of the Attachment, relative to the position and orientation of its parent]==],
	AxisChanged = [==[Fired when any input state of the skateboard controller is updated]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	PostAsync = [==[Performs a HTTP POST reques]==],
	Scale = [==[The relative scale component of the UDim]==],
	Back = [==[Whether the back face is included]==],
	TurnP = [==[Determines how aggressive of a torque is applied in facing the <code>RocketPropulsion.Target</code]==],
	EnumType = [==[A reference to the parent <code>datatype.Enum</code> of the EnumItem]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	GetEnumItems = [==[Returns an array of all <code>datatype.EnumItem</code> options available for this enum]==],
	FloatingYSize = [==[The initial pixel height of the PluginGui when floating]==],
	GoodbyeDialog = [==[Sets the sentence that the dialog will show to the player when the chat end]==],
	Brightness = [==[Determines by how much the brightness of pixel colors will be shifte]==],
	TongueOut = [==[Extends the tip of the tongue out of the mout]==],
	EulerRotationCurve = [==[Represents a 3D rotation curve, it groups 3 <code>FloatCurve</code>, stored as 3 FloatCurve child instances]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	CurveSize1 = [==[Determines, along with <code>Beam.Attachment1</code> the position of the second control point in the <code>Beam</code>'s Bézier curve]==],
	ThreadPoolSize = [==[The current size of the thread pool]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	GetBundleDetailsAsync = [==[Returns details of the contents of specified bundl]==],
	FloatCurveKey = [==[A time-value pair used with <code>FloatCurve</code> instances]==],
	LoadAnimation = [==[This function loads an <code>Animation</code> onto an <code>AnimationController</code>, returning an <code>AnimationTrack</code> that can be used for playback]==],
	lerp = [==[Returns a Color3 interpolated between two Color3 objects]==],
	SetBaseUrl = [==[Sets <code>ContentProvider.BaseUrl</code>, used by CoreScripts to interact with the web APIs]==],
	Thumbstick = [==[Change the movement controller to the thumbstick]==],
	Triggered = [==[Triggered when the prompt <code>ProximityPrompt.KeyboardKeyCode</code>/button is pressed, or after a specified amount of time holding the button, if <code>ProximityPrompt.HoldDuration</code> is use]==],
	Wait = [==[Yields the current thread until the signal is fired and returns the parameters provided by the signal]==],
	LipsTogether = [==[Brings the lips together relative to JawDro]==],
	Clear = [==[Clears the men]==],
	FallingDown = [==[Fires when the <code>Humanoid</code> enters or leaves the <em>FallingDown</em> <code>Enum.HumanoidStateType</code]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	HandlesBase = [==[An abstract class for Handle objects, such as <code>ArcHandles</code> and <code>Handles</code>]==],
	LoadAnimation = [==[Loads an <code>Animation</code> onto a <code>Humanoid</code>, returning an <code>AnimationTrack</code> that can be used for playbac]==],
	ManualGlue = [==[ManualGlue is a joint created in a similar manner to the <code>ManualWeld</code> class. It functions identically to the <code>Glue</code> class]==],
	GetAttachedReceivers = [==[Returns the <code>CustomEventReceiver</code> that are connected to the <code>CustomEvent</code]==],
	PartAdornment = [==[An abstract class for GUI elements that are adorned to (displayed as attached to) objects deriving from <code>BasePart</code>]==],
	Vector2int16 = [==[A Vector2 with signed 16-bit integers for components]==],
	FlagStand = [==[The FlagStand and <code>Flag</code> are deprecated objects that were used to make capture the flag game]==],
	YVector = [==[Equivalent to the second/middle column of the rotation matrix]==],
	Connect = [==[Connects the given function to the event and returns an RBXScriptConnection that represents it]==],
	RightArm = [==[If the limb is a part of the Humanoid's Torso. <em>This includes UpperRightArm and LowerRightArm for R16 rigs.</em]==],
	AxisRotate = [==[Rotates the currently dragged part(s) by 90 degrees on the given axis]==],
	FireAllClients = [==[Fires the <code>RemoteEvent.OnClientEvent</code> event for each client]==],
	CFrame = [==[Determines the target orientation (translational component ignored]==],
	Vector3int16 = [==[A Vector3 with signed 16-bit integers for components]==],
	B = [==[The blue value of the color]==],
}
